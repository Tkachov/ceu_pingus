#ifndef SCREEN_MANAGER_CEU
#define SCREEN_MANAGER_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "screen.ceu"
#include "../../pingus/fps_counter.ceu"

native/pre do
    ##include "engine/screen/screen_manager.hpp"
    ##include "engine/display/display.hpp"
    ##include "engine/display/drawing_context.hpp"
    ##include "engine/display/framebuffer.hpp"
    ##include "engine/input/manager.hpp"
    ##include "engine/screen/screen.hpp"
    ##include "pingus/fonts.hpp"
    ##include "pingus/globals.hpp"

    ##define globals__software_cursor globals::software_cursor
    ##define globals__print_fps globals::print_fps
    ##define globals__developer_mode globals::developer_mode
    ##define Display__get_framebuffer() Display::get_framebuffer()
    ##define Display__flip_display() Display::flip_display()
    ##define Input__POINTER_EVENT_TYPE Input::POINTER_EVENT_TYPE
    ##define Input__STANDARD_POINTER Input::STANDARD_POINTER
    ##define Fonts__pingus_small Fonts::pingus_small
end

native @pure _Display__get_framebuffer(), _Display__flip_display(), _Display__get_width(), _Display__get_height();

input _ScreenManagerUpdatePackage* SCREEN_MANAGER_UPDATE;
input _ScreenManager* DELETE_SCREEN_MANAGER;

class ScreenManager with
    //interface IScreenManager;
    var _ScreenManager&? screen_manager;

    event (_Screen*, _Screen*) fade_over;
do
    var FPSCounter fps_counter;
    var Vector2i mouse_pos;

    par/or do
        every package in SCREEN_MANAGER_UPDATE do
            if package:screen_manager != &screen_manager then
                continue;
            end

            // Will be triggered when pop_all_screens() is called by pressing window close button
            if not package:screen then
                continue;
            end

            var bool do_fade_over = false;
            var Screen*? screen;

            loop i in package:events.size() do
                if package:events.at(i).type == _Input__POINTER_EVENT_TYPE and package:events.at(i).pointer.name == _Input__STANDARD_POINTER then
                    mouse_pos.x = package:events.at(i).pointer.x;
                    mouse_pos.y = package:events.at(i).pointer.y;
                end

                screen = _PTR2REF((Screen*)package:screen:ceu);
                if screen then
                    emit screen:call_update_event => _addr(package:events.at(i));
                else
                    package:screen:update(package:events.at(i));
                end

                if package:screen != screen_manager.get_current_screen() then
                    do_fade_over = true;
                    break;
                end
            end

            if do_fade_over then
                emit fade_over => (package:screen.get(), screen_manager.get_current_screen().get());
                continue;
            end

            emit global:update => package:delta;
            
            screen = _PTR2REF((Screen*)package:screen:ceu);
            if not screen then
                _log_error("Screen has no `ceu` organism binded!");
                package:screen:update(package:delta) finalize with end;
            end

            if package:screen != screen_manager.get_current_screen() then 
                emit fade_over => (package:screen.get(), screen_manager.get_current_screen().get());
                continue;
            end

            // Draw screen to DrawingContext
            screen = _PTR2REF((Screen*)screen_manager.get_current_screen():ceu);
            if screen then
                emit screen:call_draw => screen_manager.display_gc.get();
            else
                screen_manager.get_current_screen():draw(*screen_manager.display_gc) finalize with end;
            end
  
            // Render the DrawingContext to the screen
            screen_manager.display_gc:render(*_Display__get_framebuffer(), _Rect(_Vector2i(0, 0), _Size(_Display__get_width(), _Display__get_height())));
            screen_manager.display_gc:clear();

            // Draw the mouse pointer
            if _globals__software_cursor then
                screen_manager.cursor.render(mouse_pos.x, mouse_pos.y, *_Display__get_framebuffer());
            end

            // Draw FPS Counter
            var int y_pos = 35;
            if _globals__print_fps then            
                fps_counter.draw();
                y_pos = 60;
            end

            if _globals__developer_mode then
              _Fonts__pingus_small.render(_origin_center, _Display__get_width()/2, y_pos, 
                                         "Developer Mode", *_Display__get_framebuffer());
            end

            _Display__flip_display();
        end
    with
        every (old_screen, new_screen) in fade_over do
            if not old_screen or not new_screen then
                continue;
            end
            
            var u32 last_ticks = _SDL_GetTicks();
            var float progress = 0.01;
            loop do
                if progress > 1.0 then
                    break;
                end

                var int border_x = ((float)_Display__get_width()/2)  * (1.0 - progress);
                var int border_y = ((float)_Display__get_height()/2) * (1.0 - progress);

                _printf("fade_over before draw old [%d]\n", old_screen);
                if old_screen:ceu == null then                    
                    old_screen:draw(*screen_manager.display_gc) finalize with end;
                else            
                    _printf("[%d] ceu draw\n", old_screen:ceu);
                    _fflush(_stdout);
                    emit ((Screen*)old_screen:ceu):call_draw => screen_manager.display_gc.get();
                end
                screen_manager.display_gc:render({*Display::get_framebuffer(), Rect(Vector2i(0, 0), Size(Display::get_width(), Display::get_height()))});
                screen_manager.display_gc:clear();
                    
                ({Display::get_framebuffer()}):push_cliprect(
                    _Rect(_Vector2i(0 + border_x, 0 + border_y), 
                          _Size(_Display__get_width() - 2*border_x, _Display__get_height() - 2*border_y))
                );
                
                if new_screen:ceu == null then
                    new_screen:draw(*screen_manager.display_gc) finalize with end;
                else            
                    emit ((Screen*)new_screen:ceu):call_draw => screen_manager.display_gc.get();
                end
                screen_manager.display_gc:render({*Display::get_framebuffer(), Rect(Vector2i(0, 0), Size(Display::get_width(), Display::get_height()))});
                screen_manager.display_gc:clear();
                    
                ({Display::get_framebuffer()}):pop_cliprect();
                ({Display::get_framebuffer()}):flip();
                screen_manager.display_gc:clear();
                    
                progress = (float)(_SDL_GetTicks() - last_ticks)/1000.0 * 2.0;        
            end

            screen_manager.input_manager.refresh();
        end
    with
        var _ScreenManager* e = await DELETE_SCREEN_MANAGER until (e == &screen_manager);
    end
end

#endif
