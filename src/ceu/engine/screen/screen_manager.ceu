#ifndef SCREEN_MANAGER_CEU
#define SCREEN_MANAGER_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"

native/pre do
    ##include "engine/screen/screen_manager.hpp"
    ##include "engine/display/display.hpp"
    ##include "engine/display/drawing_context.hpp"
    ##include "engine/display/framebuffer.hpp"
    ##include "engine/input/manager.hpp"
    ##include "engine/screen/screen.hpp"
    ##include "pingus/fps_counter.hpp"
    ##include "pingus/fonts.hpp"
    ##include "pingus/globals.hpp"

    ##define globals__software_cursor globals::software_cursor
    ##define globals__print_fps globals::print_fps
    ##define globals__developer_mode globals::developer_mode
    ##define Display__get_framebuffer() Display::get_framebuffer()
    ##define Display__flip_display() Display::flip_display()
    ##define Input__POINTER_EVENT_TYPE Input::POINTER_EVENT_TYPE
    ##define Input__STANDARD_POINTER Input::STANDARD_POINTER
    ##define Fonts__pingus_small Fonts::pingus_small
end

native @pure _Display__get_framebuffer(), _Display__flip_display(), _Display__get_width(), _Display__get_height();

input _ScreenManagerUpdatePackage* SCREEN_MANAGER_UPDATE;
input _ScreenManager* DELETE_SCREEN_MANAGER;

class ScreenManager with
    //interface IScreenManager;
    var _ScreenManager* me;
do
    var _ScreenManager&? screen_manager = _PTR2REF((_ScreenManager*)me);

    par/or do
        every package in SCREEN_MANAGER_UPDATE do
            if package:screen_manager != &screen_manager then
                continue;
            end

            // Will be triggered when pop_all_screens() is called by pressing window close button
            if not package:screen then
                continue;
            end

            var bool fade_over = false;

            loop i in package:events.size() do
                if package:events.at(i).type == _Input__POINTER_EVENT_TYPE and package:events.at(i).pointer.name == _Input__STANDARD_POINTER then
                    finalize screen_manager.mouse_pos = _Vector2i(package:events.at(i).pointer.x, package:events.at(i).pointer.y); with end
                end

                package:screen:update(package:events.at(i));

                if package:screen != screen_manager.get_current_screen() then
                    fade_over = true;
                    break;
                end
            end

            if fade_over then
                screen_manager.fade_over(package:screen, screen_manager.get_current_screen()) finalize with end;
                continue;
            end

            package:screen:update(package:delta) finalize with end;

            if package:screen != screen_manager.get_current_screen() then
                screen_manager.fade_over(package:screen, screen_manager.get_current_screen()) finalize with end;
                continue;
            end

            // Draw screen to DrawingContext
            screen_manager.get_current_screen():draw(*screen_manager.display_gc) finalize with end;
  
            // Render the DrawingContext to the screen
            screen_manager.display_gc:render(*_Display__get_framebuffer(), _Rect(_Vector2i(0, 0), _Size(_Display__get_width(), _Display__get_height())));
            screen_manager.display_gc:clear();

            // Draw the mouse pointer
            if _globals__software_cursor then
                screen_manager.cursor.render(screen_manager.mouse_pos.x, screen_manager.mouse_pos.y, *_Display__get_framebuffer()) finalize with end;
            end

            // Draw FPS Counter
            if _globals__print_fps then            
                screen_manager.fps_counter:draw();
                if _globals__developer_mode then
                  _Fonts__pingus_small.render(_origin_center, _Display__get_width()/2, 60, 
                                             "Developer Mode", *_Display__get_framebuffer());
                end            
            else/if _globals__developer_mode then
                _Fonts__pingus_small.render(_origin_center, _Display__get_width()/2, 35, 
                                           "Developer Mode", *_Display__get_framebuffer());
            end

            _Display__flip_display();
        end           
    with
        var _ScreenManager* e = await DELETE_SCREEN_MANAGER until (e == &screen_manager);
    end
end

#endif
