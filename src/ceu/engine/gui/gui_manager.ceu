#ifndef GUI_MANAGER_CEU
#define GUI_MANAGER_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../math/vector2i.ceu"
#include "../display/sprite.ceu"
#include "igui_manager.ceu"

native/pre do
    ##include "engine/display/sprite.hpp"
    ##include <vector>

    ##define std__vector_Component std::vector<GUI::Component*>
    ##define new_Vector_Component new std::vector<GUI::Component*>

    ##define new_DrawingContext new DrawingContext
end

native @pure _new_Vector_Component(), _new_DrawingContext();

/*
  void on_pointer_leave();

  void on_pointer_move(int x, int y);

  void add(Component* comp);

  template<typename C, typename ...Args>
  C* create(Args&&... args)
  {
    C* c = new C(std::forward<Args>(args)...);
    add(c);
    return c;
  }

  void update_layout();

  bool is_at(int x, int y);

  // Causes all input directed to comp
  void grab(Component* comp);
  void ungrab(Component* comp);

  Component* component_at (const Vector2i& pos);

  */

/*
GUIManager() == drawing_context(Rect(0, 0, Display::get_width(), Display::get_height()), false)
GUIManager(rect) == drawing_context(rect, true)

anyways that rect is also passed into _GUI_RectComponent()
*/

class GUIManager with
    interface IGUIManager;
do
    var Vector2i mouse_pos;
    mouse_pos.x = 400;
    mouse_pos.y = 300;

    var _std__vector_Component&? children = _new_Vector_Component();
    var _GUI__Component* mouse_over_comp = null;
    var _GUI__Component* focused_comp = null;
    var _GUI__Component* grabbed_comp = null;
    var _GUI__Component* primary_pressed_comp = null;
    var _GUI__Component* secondary_pressed_comp = null;

    finalize with   
        loop i in children.size() do
            _delete_obj(children.at(i));
        end

        _delete_obj(drawing_context);
        _delete_obj(children);
    end

    function (_GUI__Component* comp) => void add do
        comp:set_parent((_GUI__RectComponent*)&me);
        children.push_back(comp);
    end

    var PrimaryButtonProxy p with this.gui = outer; end;
    var PointerProxy pp with this.gui = outer; end;
    var EventProxy ep with this.gui = outer; end;

    function @rec (Vector2i pos) => bool is_at_func do
        //TODO
        ///package:result = (package:mouse_pos.x > pos.x and package:mouse_pos.x < pos.x + (int)button_surface.get_width() and package:mouse_pos.y > pos.y and package:mouse_pos.y < pos.y + (int)button_surface.get_height());
        ///return (RectComponent::is_at(x,y) or call/rec component_at(drawing_context.screen_to_world(_Vector2i(package:mouse_pos.x, package:mouse_pos.y))));
        return false;
    end

    function @rec (Vector2i pos) => _GUI_Component* component_at do
        var int i = children.size()-1;
        loop do
            if i < 0 then
                break;
            end

            var bool at = false;

            if children.at(i):ceu == null then
                at = children.at(i):is_at(pos.x, pos.y);
            else
                at = call/rec ((IGUI_Component*)children.at(i):ceu):is_at_func(pos);
            end

            if children.at(i):is_visible() and at then
                return children.at(i);
            end

            i = i - 1;
        end

        return null;
    end

    par do
        every package in is_at do
            var Vector2i iap;
            iap.x = package:mouse_pos.x;
            iap.y = package:mouse_pos.y;
            package:result = call/rec is_at_func(iap);            
        end
    with
        every parent_gc in draw do
            drawing_context.clear();

            loop i in children.size() do
                if children.at(i):is_visible() then
                    if children.at(i):ceu == null then
                        _printf("draw/ceu==null\n");
                        children.at(i):draw(_deref(drawing_context));
                    else
                        emit ((IGUI_Component*)children.at(i):ceu):draw => &drawing_context;
                    end
                end
            end
          
            parent_gc:draw(_deref(drawing_context));
        end
    with
        every delta in update do
            loop i in children.size() do
                if children.at(i):is_visible() then
                    if children.at(i):ceu == null then
                        _printf("update/ceu==null\n");
                        children.at(i):update(delta);
                    else
                        emit ((IGUI_Component*)children.at(i):ceu):update => delta;
                    end
                end
            end
        end
    with
        every ev in update_event do        
            if ev:type == {Input::POINTER_EVENT_TYPE} then
                mouse_pos.x = ev:pointer.x;
                mouse_pos.y = ev:pointer.y;
                emit mouse_move => (mouse_pos.x, mouse_pos.y);
            else/if ev:type == {Input::BUTTON_EVENT_TYPE} then
                if ev:button.name == {Input::PRIMARY_BUTTON} then
                    if ev:button.state == {Input::BUTTON_PRESSED} then
                        emit mouse_press => (mouse_pos.x, mouse_pos.y);
                    else/if ev:button.state == {Input::BUTTON_RELEASED} then
                        emit mouse_release => (mouse_pos.x, mouse_pos.y);
                    end                
                else/if ev:button.name == {Input::SECONDARY_BUTTON} then                  
                    if ev:button.state == {Input::BUTTON_PRESSED} then
                        emit mouse_secondary_press => (mouse_pos.x, mouse_pos.y);
                    else/if ev:button.state == {Input::BUTTON_RELEASED} then
                        emit mouse_secondary_release => (mouse_pos.x, mouse_pos.y);
                    end
                end
            else/if ev:type == {Input::TEXT_INPUT_EVENT_TYPE} then
                emit text_input => _addr(ev:text);
            else/if ev:type == {Input::KEYBOARD_EVENT_TYPE} then
                if ev:keyboard.state then                
                    emit key_pressed => _addr(ev:keyboard);
                else                
                    //original FIXME: implement this on_key_release(event.keyboard);
                end
            else/if ev:type == {Input::SCROLLER_EVENT_TYPE} then
                //there's no on_scroller_move in GUIManager
                ///emit on_scroller_move => (ev:scroll.x_delta, ev:scroll.y_delta);
            end  
        end
    with
        every (x, y) in mouse_press do
            var Vector2i mouse_pos;
            _readVector2i(mouse_pos, drawing_context.screen_to_world(_Vector2i(x, y)));

            if grabbed_comp then
                if grabbed_comp:ceu == null then
                    _log_error("/ceu==null");
                    grabbed_comp:on_primary_button_press(mouse_pos.x, mouse_pos.y);
                else
                    emit ((IGUI_Component*)grabbed_comp:ceu):mouse_press => (mouse_pos.x, mouse_pos.y);
                end
            else
                var _GUI_Component* comp = _PTR2REF(call/rec component_at(mouse_pos));
                if comp then
                    if comp:ceu == null then
                        _log_error("/ceu==null");
                        comp:on_primary_button_press(mouse_pos.x, mouse_pos.y);
                    else
                        emit ((IGUI_Component*)comp:ceu):mouse_press => (mouse_pos.x, mouse_pos.y);
                    end

                    if focused_comp then
                        focused_comp:set_focus(false);
                    end

                    focused_comp = _PTR2REF(comp);

                    if focused_comp then
                        focused_comp:set_focus(true);
                    end
                end

                primary_pressed_comp = _PTR2REF(comp);
            end
        end
    with
        every (x, y) in mouse_release do
            var Vector2i mouse_pos;
            _readVector2i(mouse_pos, drawing_context.screen_to_world(_Vector2i(x, y)));

            if grabbed_comp then
                if grabbed_comp:ceu == null then
                    _log_error("/ceu==null");
                    grabbed_comp:on_primary_button_release(mouse_pos.x, mouse_pos.y);
                else
                    emit ((IGUI_Component*)grabbed_comp:ceu):mouse_release => (mouse_pos.x, mouse_pos.y);
                end
            else
                var _GUI_Component* comp = _PTR2REF(call/rec component_at(mouse_pos));
      
                if primary_pressed_comp then
                    if primary_pressed_comp:ceu == null then
                        _log_error("/ceu==null");
                        primary_pressed_comp:on_primary_button_release(mouse_pos.x, mouse_pos.y);
                    else
                        emit ((IGUI_Component*)primary_pressed_comp:ceu):mouse_release => (mouse_pos.x, mouse_pos.y);
                    end

                    if comp == primary_pressed_comp then
                        if primary_pressed_comp:ceu == null then
                            _log_error("/ceu==null");
                            primary_pressed_comp:on_primary_button_click(mouse_pos.x, mouse_pos.y);
                        else
                            emit ((IGUI_Component*)primary_pressed_comp:ceu):mouse_click => (mouse_pos.x, mouse_pos.y);
                        end
                    end

                    primary_pressed_comp = null;
                else
                    if comp then
                        if comp:ceu == null then
                            _log_error("/ceu==null");
                            comp:on_primary_button_release(mouse_pos.x, mouse_pos.y);
                        else
                            emit ((IGUI_Component*)comp:ceu):mouse_release => (mouse_pos.x, mouse_pos.y);
                        end
                    end
                end
            end
        end
    with
        every (x, y) in mouse_secondary_press do
            var Vector2i mouse_pos;
            _readVector2i(mouse_pos, drawing_context.screen_to_world(_Vector2i(x, y)));

            if grabbed_comp then
                if grabbed_comp:ceu == null then
                    _log_error("/ceu==null");
                    grabbed_comp:on_secondary_button_press(mouse_pos.x, mouse_pos.y);
                else
                    emit ((IGUI_Component*)grabbed_comp:ceu):mouse_secondary_press => (mouse_pos.x, mouse_pos.y);
                end
            else            
                var _GUI_Component* comp = _PTR2REF(call/rec component_at(mouse_pos));
                if comp then
                    if comp:ceu == null then
                        _log_error("/ceu==null");
                        comp:on_secondary_button_press(mouse_pos.x, mouse_pos.y);
                    else
                        emit ((IGUI_Component*)comp:ceu):mouse_secondary_press => (mouse_pos.x, mouse_pos.y);
                    end
                end

                if not primary_pressed_comp then
                    secondary_pressed_comp = _PTR2REF(comp);
                end
            end
        end
    with
        every (x, y) in mouse_secondary_release do
            var Vector2i mouse_pos;
            _readVector2i(mouse_pos, drawing_context.screen_to_world(_Vector2i(x, y)));

            var _GUI_Component* comp = _PTR2REF(call/rec component_at(mouse_pos));
              
            if grabbed_comp then
                if grabbed_comp:ceu == null then
                    _log_error("/ceu==null");
                    grabbed_comp:on_secondary_button_release(mouse_pos.x, mouse_pos.y);
                else
                    emit ((IGUI_Component*)grabbed_comp:ceu):mouse_release => (mouse_pos.x, mouse_pos.y);
                end
            else/if secondary_pressed_comp then
                if secondary_pressed_comp:ceu == null then
                    _log_error("/ceu==null");
                    secondary_pressed_comp:on_secondary_button_release(mouse_pos.x, mouse_pos.y);
                else
                    emit ((IGUI_Component*)secondary_pressed_comp:ceu):mouse_release => (mouse_pos.x, mouse_pos.y);
                end
                  
                if comp == secondary_pressed_comp then
                    if secondary_pressed_comp:ceu == null then
                        _log_error("/ceu==null");
                        secondary_pressed_comp:on_secondary_button_click(mouse_pos.x, mouse_pos.y);
                    else
                        emit ((IGUI_Component*)secondary_pressed_comp:ceu):mouse_click => (mouse_pos.x, mouse_pos.y);
                    end
                end
                  
                secondary_pressed_comp = null;
            else
                if comp then
                    if comp:ceu == null then
                        _log_error("/ceu==null");
                        comp:on_secondary_button_release(mouse_pos.x, mouse_pos.y);
                    else
                        emit ((IGUI_Component*)comp:ceu):mouse_release => (mouse_pos.x, mouse_pos.y);
                    end
                end
            end
        end
    with
        every (x, y) in mouse_move do
            var Vector2i mouse_pos;            
            _readVector2i(mouse_pos, drawing_context.screen_to_world(_Vector2i(x, y)));

            if grabbed_comp then  
                if grabbed_comp:ceu == null then
                    _log_error("/ceu==null");
                    grabbed_comp:on_pointer_move(mouse_pos.x, mouse_pos.y);
                else
                    emit ((IGUI_Component*)grabbed_comp:ceu):mouse_move => (mouse_pos.x, mouse_pos.y);
                end
            else/if primary_pressed_comp then  
                if primary_pressed_comp:ceu == null then
                    _log_error("/ceu==null");
                    primary_pressed_comp:on_pointer_move(mouse_pos.x, mouse_pos.y);
                else
                    emit ((IGUI_Component*)primary_pressed_comp:ceu):mouse_move => (mouse_pos.x, mouse_pos.y);
                end
            else/if secondary_pressed_comp then  
                if secondary_pressed_comp:ceu == null then
                    _log_error("/ceu==null");
                    secondary_pressed_comp:on_pointer_move(mouse_pos.x, mouse_pos.y);
                else
                    emit ((IGUI_Component*)secondary_pressed_comp:ceu):mouse_move => (mouse_pos.x, mouse_pos.y);
                end
            else  
                var _GUI_Component* comp = _PTR2REF(call/rec component_at(mouse_pos));
                if comp then
                    if comp:ceu == null then
                        _log_error("/ceu==null");
                        comp:on_pointer_move(mouse_pos.x, mouse_pos.y);
                    else
                        emit ((IGUI_Component*)comp:ceu):mouse_move => (mouse_pos.x, mouse_pos.y);
                    end
                end

                if comp != mouse_over_comp then
                    if mouse_over_comp then
                        mouse_over_comp:set_mouse_over(false);
                        if mouse_over_comp:ceu == null then
                            _log_error("/ceu==null");
                            mouse_over_comp:on_pointer_leave();
                        else
                            emit ((IGUI_Component*)mouse_over_comp:ceu):mouse_leave;
                        end
                    end
                  
                    if comp then
                        comp:set_mouse_over(true);
                        if comp:ceu == null then
                            _log_error("/ceu==null");
                            comp:on_pointer_enter();
                        else
                            emit ((IGUI_Component*)comp:ceu):mouse_enter;
                        end
                    end
                end

                mouse_over_comp = _PTR2REF(comp);
            end
        end
    with
        every kev in key_pressed do
            if grabbed_comp then
                if grabbed_comp:ceu == null then
                    grabbed_comp:on_key_pressed(_deref(kev));
                else
                    emit ((IGUI_Component*)grabbed_comp:ceu):key_pressed => kev;
                end
            else/if focused_comp then
                if focused_comp:ceu == null then
                    focused_comp:on_key_pressed(_deref(kev));
                else
                    emit ((IGUI_Component*)focused_comp:ceu):key_pressed => kev;
                end
            else/if mouse_over_comp then
                if mouse_over_comp:ceu == null then
                    mouse_over_comp:on_key_pressed(_deref(kev));
                else
                    emit ((IGUI_Component*)mouse_over_comp:ceu):key_pressed => kev;
                end
            end
        end
    with
        every tev in text_input do
            if grabbed_comp then
                if grabbed_comp:ceu == null then
                    grabbed_comp:on_text_input(_deref(tev));
                else
                    emit ((IGUI_Component*)grabbed_comp:ceu):text_input => tev;
                end
            else/if focused_comp then
                if focused_comp:ceu == null then
                    focused_comp:on_text_input(_deref(tev));
                else
                    emit ((IGUI_Component*)focused_comp:ceu):text_input => tev;
                end
            else/if mouse_over_comp then
                if mouse_over_comp:ceu == null then
                    mouse_over_comp:on_text_input(_deref(tev));
                else
                    emit ((IGUI_Component*)mouse_over_comp:ceu):text_input => tev; 
                end
            end
        end
    end
end

/*
void
GroupComponent::update_layout()
{
  drawing_context.set_rect(rect);
}

void
GroupComponent::on_pointer_leave()
{
  if (!grabbed_comp)
  {
    if (mouse_over_comp)
    {
      mouse_over_comp->set_mouse_over(false);
      mouse_over_comp->on_pointer_leave();
      //Ceu ON_POINTER_LEAVE
      ceu_sys_go(&CEUapp, CEU_IN_ON_POINTER_LEAVE, &mouse_over_comp);
    }
    mouse_over_comp = 0; 
  }
}

void
GroupComponent::grab(Component* comp)
{
  grabbed_comp = comp;
  Component::grab();
}

void
GroupComponent::ungrab(Component* comp)
{
  grabbed_comp = 0;
  Component::ungrab();
}
*/

#endif
