#ifndef IGUI_COMPONENT_CEU
#define IGUI_COMPONENT_CEU

native/pre do
    ##include "engine/gui/component.hpp"
    ##include "engine/gui/rect_component.hpp"
    ##include "math/vector2i.hpp"
    ##define GUI_Component GUI::Component
    ##define GUI_RectComponent GUI::RectComponent
    ##define GUI__Component GUI::Component
    ##define GUI__RectComponent GUI::RectComponent
    ##define new_GUI__RectComponent new GUI::RectComponent

    ##define const_Input__KeyboardEvent const Input::KeyboardEvent
    ##define const_Input__TextInputEvent const Input::TextInputEvent
end

native @pure _new_GUI__RectComponent();

#define RECT_IS_AT(comp) \
function @rec (Vector2i pos) => bool is_at_func do \
    return ((_GUI__RectComponent*)comp):rect.contains(_Vector2i(pos.x, pos.y)); \
end

interface IGUI_Component with
    var _GUI_Component& me;

    function @rec (Vector2i pos) => bool is_at_func;

    event _DrawingContext* draw;
    event _ComponentIsAtPackage* is_at;

    event void mouse_enter;
    event void mouse_leave;
    event (int, int) mouse_move;

    event (int, int) mouse_press;
    event (int, int) mouse_release;
    event (int, int) mouse_click;
    event void mouse_double_click;

    event (int, int) mouse_secondary_press;
    event (int, int) mouse_secondary_release;
    event (int, int) mouse_secondary_click;
    event void mouse_secondary_double_click;

    event _const_Input__KeyboardEvent* key_pressed;
    event _const_Input__TextInputEvent* text_input;
end

class Relay with
    var IGUI_Component& src;
    var IGUI_Component& dst;
do
    par do
        every gc in src.draw do
            emit dst.draw => gc;
        end
    with
        every p in src.is_at do
            emit dst.is_at => p;
        end
    with
        every src.mouse_enter do
            emit dst.mouse_enter;
        end
    with
        every src.mouse_leave do
            emit dst.mouse_leave;
        end
    with
        every (x, y) in src.mouse_move do
            emit dst.mouse_move => (x, y);
        end
    with
        every (x, y) in src.mouse_press do
            emit dst.mouse_press => (x, y);
        end
    with
        every (x, y) in src.mouse_release do
            emit dst.mouse_release => (x, y);
        end
    with
        every (x, y) in src.mouse_click do
            emit dst.mouse_click => (x, y);
        end
    with
        every src.mouse_double_click do
            emit dst.mouse_double_click;
        end
    with
        every (x, y) in src.mouse_secondary_press do
            emit dst.mouse_secondary_press => (x, y);
        end
    with
        every (x, y) in src.mouse_secondary_release do
            emit dst.mouse_secondary_release => (x, y);
        end
    with
        every (x, y) in src.mouse_secondary_click do
            emit dst.mouse_secondary_click => (x, y);
        end
    with
        every src.mouse_secondary_double_click do
            emit dst.mouse_secondary_double_click;
        end
    end
end

#endif
