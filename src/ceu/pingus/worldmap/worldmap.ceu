#ifndef WORLDMAP_CEU
#define WORLDMAP_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/gui/igui_component.ceu"
#include "../../engine/gui/surface_button.ceu"
#include "../../engine/screen/screen.ceu"
#include "../../engine/sound/sound.ceu"
#include "../../math/math.ceu"
#include "../../math/rect.ceu"
#include "../iworld.ceu"
#include "../global_interface.ceu"
#include "path_graph.ceu"
#include "sprite_drawable.ceu"
#include "iworldmap.ceu"
#include "pingus_worldmap.ceu"

native/pre do
    ##include "engine/display/display.hpp"
    ##include "engine/display/graphic_context_state.hpp"
    ##include "engine/gui/gui_manager.hpp"
    ##include "engine/gui/rect_component.hpp"
    ##include "engine/gui/surface_button.hpp"
    ##include "engine/screen/screen_manager.hpp"
    ##include "engine/sound/sound.hpp"
    ##include "pingus/fonts.hpp"
    ##include "pingus/game_time.hpp"
    ##include "pingus/gettext.h"
    ##include "pingus/globals.hpp"
    ##include "pingus/savegame_manager.hpp"
    ##include "pingus/screens/game_session.hpp"
    ##include "pingus/screens/result_screen.hpp"
    ##include "pingus/screens/story_screen.hpp"
    ##include "pingus/server.hpp"
    ##include "pingus/stat_manager.hpp"    
    ##include "pingus/string_format.hpp"
    ##include "pingus/worldmap/worldmap_screen.hpp"
    ##include "util/log.hpp"
    ##include "util/pathname.hpp"
    ##include "util/sexpr_file_writer.hpp"
    ##include "util/string_util.hpp"
    ##include <iostream>
    ##include <memory>
    ##include <vector>

    ##define new_GUI_Component() new GUI::Component()
    ##define ScreenManager__instance() ScreenManager::instance()
    ##define StatManager__instance() StatManager::instance()
    ##define std__make_shared_GameSession std::make_shared<GameSession>
    ##define std__make_shared_StoryScreen std::make_shared<StoryScreen>
    ##define Display__get_width() Display::get_width()
    ##define Display__get_height() Display::get_height()
    ##define SU2str(x) StringUtil::to_string(x)
    ##define Fonts__chalk_large Fonts::chalk_large
    ##define Fonts__chalk_normal Fonts::chalk_normal
    ##define Fonts__chalk_small Fonts::chalk_small
    ##define StringFormat__break_line StringFormat::break_line

    ##define new_SceneContextE() new SceneContext()
    ##define new_Pingus(x) new WorldmapNS::Pingus(x)

    ##define WorldmapNS__WorldmapScreen WorldmapNS::WorldmapScreen    

    ##define StatManager__instance() StatManager::instance()
    ##define new_PathGraph new WorldmapNS::PathGraph
    ##define DrawableFactory__create(x) WorldmapNS::DrawableFactory::create(x)
    ##define WorldmapNS__Edge_WorldmapNS__Path WorldmapNS::Edge<WorldmapNS::Path*>
    ##define WorldmapNS__Node_WorldmapNS__Drawable WorldmapNS::Node<void*>

    ##define std__vector_Drawable std::vector<void*>
    ##define new_Vector_Drawable new std::vector<void*>
    ##define new_GraphicContextState new GraphicContextState
end

native @pure _new_GUI_Component(), _ScreenManager__instance(), _StatManager__instance(), _std__make_shared_GameScreen(), _std__make_shared_StoryScreen(),
             _Display__get_width(), _Display__get_height(), _new_Pingus(),
             _SU2str(), _StringFormat__break_line(), _new_SceneContextE(), _StatManager__instance(),
             _new_PathGraph(), _addr(), _new_GraphicContextState(), _new_Vector_Drawable();

class Worldmap with
    interface IWorldmap;
    function @rec (void) => void set_starting_node;    
do
    var _GraphicContextState&? gc_state = _new_GraphicContextState();
    var _std__vector_Drawable&? drawables = _new_Vector_Drawable;

    finalize with
        _delete_obj(gc_state);
        _delete_obj(drawables);
    end

    var int mouse_x = 0;
    var int mouse_y = 0;
    var int default_node;
    var int final_node;
    
    var PathGraph path_graph with
        this.worldmap = outer;
        this.path_graph = _PTR2REF(_new_PathGraph());
    end;

    default_node = path_graph.path_graph.lookup_node(_deref(pingus_worldmap:get_default_node()));
    final_node   = path_graph.path_graph.lookup_node(_deref(pingus_worldmap:get_final_node()));

    var Pingus pingus with        
        this.name = _new_String("pingus");
        this.path_graph = path_graph;
    end;    
    call/rec set_starting_node();
    add_drawable(&pingus);
    gc_state.set_limit(_Rect(_Vector2i(0, 0), _Size(pingus_worldmap:get_width(), pingus_worldmap:get_height())));

    function (void) => IPingus* get_pingus do
        return &pingus;
    end

    function @rec (void) => void set_starting_node do   
    end

    function (Drawable* a) => void add_drawable do
    end

    function (void) => PingusWorldmap* get_worldmap do
        return pingus_worldmap;
    end

    function (void) => int get_width do    
        return 0;
    end

    function (void) => int get_height do
        return 0;
    end

    function @rec (int x, int y) => Dot* find_dot do        
        return call/rec path_graph.get_dot(
            gc_state.screen2world(_Vector2i(x, y)).x,
            gc_state.screen2world(_Vector2i(x, y)).y
        );
    end

    par/or do
        every startup do
        end
    with
        every gc in draw do
        end
    with
        every delta in update do
        end
    with
        every (x, y) in mouse_move do
        end
    with
        every (x, y) in mouse_press do
        end
    with
        every (x, y) in mouse_secondary_press do
        end
    with
        await delete;        
        emit path_graph.delete;
    end
end

#endif
