#ifndef WORLDMAP_SCREEN_CEU
#define WORLDMAP_SCREEN_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/gui/igui_component.ceu"
#include "../../engine/gui/surface_button.ceu"
#include "../../engine/screen/screen.ceu"
#include "../../engine/sound/sound.ceu"
#include "../../math/math.ceu"
#include "../../math/rect.ceu"
#include "../../util/file_reader.ceu"
#include "../iworld.ceu"
#include "../global_interface.ceu"
#include "worldmap.ceu"
#include "pingus_worldmap.ceu"

native/pre do
    ##include "engine/display/display.hpp"
    ##include "engine/display/graphic_context_state.hpp"
    ##include "engine/gui/gui_manager.hpp"
    ##include "engine/gui/rect_component.hpp"
    ##include "engine/gui/surface_button.hpp"
    ##include "engine/screen/screen_manager.hpp"
    ##include "engine/sound/sound.hpp"
    ##include "pingus/fonts.hpp"
    ##include "pingus/game_time.hpp"
    ##include "pingus/gettext.h"
    ##include "pingus/globals.hpp"
    ##include "pingus/savegame_manager.hpp"
    ##include "pingus/screens/game_session.hpp"
    ##include "pingus/screens/result_screen.hpp"
    ##include "pingus/screens/story_screen.hpp"
    ##include "pingus/server.hpp"
    ##include "pingus/string_format.hpp"
    ##include "pingus/worldmap/worldmap_screen.hpp"
    ##include "util/log.hpp"
    ##include "util/string_util.hpp"

    ##define new_GUI_Component() new GUI::Component()
    ##define ScreenManager__instance() ScreenManager::instance()
    ##define std__make_shared_GameSession std::make_shared<GameSession>
    ##define std__make_shared_StoryScreen std::make_shared<StoryScreen>
    ##define Display__get_width() Display::get_width()
    ##define Display__get_height() Display::get_height()
    ##define SU2str(x) StringUtil::to_string(x)
    ##define Fonts__chalk_large Fonts::chalk_large
    ##define Fonts__chalk_normal Fonts::chalk_normal
    ##define Fonts__chalk_small Fonts::chalk_small
    ##define StringFormat__break_line StringFormat::break_line

    ##define new_SceneContextE() new SceneContext()

    ##define WorldmapNS__WorldmapScreen WorldmapNS::WorldmapScreen    
end

native @pure _new_GUI_Component(), _ScreenManager__instance(), _std__make_shared_GameScreen(), _std__make_shared_StoryScreen(),
             _Display__get_width(), _Display__get_height(),
             _SU2str(), _StringFormat__break_line(), _new_SceneContextE();

input _WorldmapScreenLoadPackage* LOAD_WORLDMAP_SCREEN;
input _ScreenUpdatePackage* WORLDMAP_SCREEN_UPDATE;
input _GUIScreen* DELETE_WORLDMAP_SCREEN;

interface IWorldmapScreen with
    interface Screen;

    function (void) => void show_intro_story;
    function (void) => void show_end_story;    
    function (void) => Worldmap*? get_ceu_worldmap;
    function (void) => Rect get_trans_rect;    

    event _Pathname* load;
end

////////////////////////////////////////////////

class WorldmapScreenCreditsButton with
    interface IGUI_Component;
    var IWorldmapScreen& parent;

    function @rec (int x, int y) => void set_pos;
do
    var SurfaceButton sb with
        this.me = outer.me;
        this.pos.x = _Display__get_width() - 150;
        this.pos.y = 0;
    end;

    call/rec sb.load("core/worldmap/credits_button_normal",
                     "core/worldmap/credits_button_pressed",
                     "core/worldmap/credits_button_hover");

    var PrimaryButtonProxy p with this.gui = outer; end;
    var PointerProxy pp with this.gui = outer; end;
    var EventProxy ep with this.gui = outer; end;

    function @rec (int x, int y) => void set_pos do
        sb.set_pos(x, y);
    end

    par do
        every mouse_click do
            parent.show_end_story();
        end
    with
        every mouse_enter do
            _Sound__PingusSound__play_sound("tick");
        end
    with
        every gc in draw do
            gc:print_center(_Fonts__chalk_small, _Vector2i( _Display__get_width() - 83, 2), __("Show Ending?"));
        end
    end
end

////////////////////////////////////////////////

class WorldmapScreenCloseButton with
    interface IGUI_Component;
    var IWorldmapScreen& parent;

    function @rec (int x, int y) => void set_pos;
do
    var SurfaceButton sb with
        this.me = outer.me;
        this.pos.x = 0;
        this.pos.y = _Display__get_height() - 37;
    end;

    call/rec sb.load("core/worldmap/leave_button_normal",
                     "core/worldmap/leave_button_pressed",
                     "core/worldmap/leave_button_hover");

    var PrimaryButtonProxy p with this.gui = outer; end;
    var PointerProxy pp with this.gui = outer; end;
    var EventProxy ep with this.gui = outer; end;

    function @rec (int x, int y) => void set_pos do
        sb.set_pos(x, y);
    end

    par do
        every mouse_click do
            _ScreenManager__instance():pop_screen();
        end
    with
        every mouse_enter do
            _Sound__PingusSound__play_sound("tick");
        end
    with
        every gc in draw do
            gc:print_center(_Fonts__chalk_small, _Vector2i(44, _Display__get_height() - 25), __("Leave?"));
        end
    end
end

////////////////////////////////////////////////

class WorldmapScreenComponent with
    interface IGUI_Component;
    var IWorldmapScreen& parent;

    event void fast_forward_press;
    event void fast_forward_release;
do
    var _SceneContext&? scene_context = _new_SceneContextE();
    finalize with _delete_obj(scene_context); end

    var PrimaryButtonProxy p with this.gui = outer; end;
    var SecondaryButtonProxy sbp with this.gui = outer; end;
    var PointerProxy pp with this.gui = outer; end;
    var EventProxy ep with this.gui = outer; end;

    par do
        every package in is_at do
            package:result = true;
        end
    with
        loop do
            par/or do
                every delta in update do
                    emit parent.get_ceu_worldmap():update => delta;
                end
            with
                await fast_forward_press;
            end

            par/or do
                every delta in update do
                    loop i in _globals__fast_forward_time_scale do
                        emit parent.get_ceu_worldmap():update => delta;
                    end
                end
            with
                await fast_forward_release;
            end
        end
    with
        every gc in draw do
            var Rect cliprect = parent.get_trans_rect();
            scene_context.set_rect(_toRect(cliprect));
            scene_context.clear();

            scene_context.push_modelview();
            _printf("worldmap component draw?\n");
            emit parent.get_ceu_worldmap():draw => _addr(scene_context.color());
            _printf("worldmap component draw -- done\n");
            gc:draw(_new_SceneContextDrawingRequest(&scene_context, _Vector2i(0, 0), -1000));
            scene_context.pop_modelview();

            // Draw border
            if _toRect(cliprect) != _Rect(_Vector2i(0, 0), _Size(_Display__get_width(), _Display__get_height())) then
                // top
                gc:draw_fillrect(_Rect(0, 0, _Display__get_width(), cliprect.top), _Color(0, 0, 0));
                // bottom
                gc:draw_fillrect(_Rect(0, cliprect.bottom, _Display__get_width(), _Display__get_height()), _Color(0, 0, 0));
                // left
                gc:draw_fillrect(_Rect(0, cliprect.top, cliprect.left, cliprect.bottom), _Color(0, 0, 0));
                // right
                gc:draw_fillrect(_Rect(cliprect.right, cliprect.top, _Display__get_width(), cliprect.bottom), _Color(0, 0, 0));
            end
        end
    with
        every (x, y) in mouse_press do
            var Rect cliprect = parent.get_trans_rect();
            emit parent.get_ceu_worldmap():mouse_press => (x - cliprect.left, y - cliprect.top);
        end
    with
        every (x, y) in mouse_secondary_press do
            var Rect cliprect = parent.get_trans_rect();
            emit parent.get_ceu_worldmap():mouse_secondary_press => (x - cliprect.left, y - cliprect.top);
        end
    with
        every (x, y) in mouse_move do
            var Rect cliprect = parent.get_trans_rect();
            emit parent.get_ceu_worldmap():mouse_move => (x - cliprect.left, y - cliprect.top);
        end
    end
end

////////////////////////////////////////////////

class WorldmapScreen with
    interface IWorldmapScreen;
do
    var _GUIScreen&? worldmap_screen = _PTR2REF((_GUIScreen*)&me);
    var Worldmap*? worldmap = null;
    var bool exit_worldmap = false;

    var ScreenFramework sf with
        this.screen = outer;
    end;

    var WorldmapScreenComponent comp with
        this.me = _new_GUI_Component();
        this.parent = outer;
    end;

    var WorldmapScreenCloseButton close_button with
        this.me = _new_GUI_Component();
        this.parent = outer;
    end;

    var WorldmapScreenCreditsButton*? credits_button = null;

    worldmap_screen.gui_manager:add(&comp.me) finalize with end;
    worldmap_screen.gui_manager:add(&close_button.me) finalize with end;

    function (void) => void show_intro_story do
        _ScreenManager__instance():push_screen(_std__make_shared_StoryScreen(
            _deref(worldmap:get_worldmap():get_intro_story())
        ));
    end

    function (void) => void show_end_story do
        _ScreenManager__instance():push_screen(_std__make_shared_StoryScreen(
            _deref(worldmap:get_worldmap():get_end_story())
        ));
    end

    function (void) => Worldmap*? get_ceu_worldmap do
        return worldmap;
    end

    function (void) => Rect get_trans_rect do
        var Rect r;
        Rect_load_XYWH(
            r,
            _Math__max((_Display__get_width()  - worldmap:get_width())/2,  0),
            _Math__max((_Display__get_height() - worldmap:get_height())/2, 0),
            _Math__min(_Display__get_width(),  worldmap:get_width()),
            _Math__min(_Display__get_height(), worldmap:get_height())
        );
        return r;
    end

    par/or do
        every package in LOAD_WORLDMAP_SCREEN do
            if package:screen != &worldmap_screen then
                continue;
            end

            emit load => (_Pathname*)&package:filename;
        end
    with
        every filename in load do
            var PingusWorldmap*? pingus_worldmap = spawn PingusWorldmap;
            var _FileReader&? fr = _new_FileReader(_FileReader__parse(_deref(filename)));
            call/rec pingus_worldmap:parse_file(&fr);
            _delete_obj(fr);

            worldmap = spawn Worldmap with                
                this.pingus_worldmap = pingus_worldmap;
            end;

            var bool credits_unlocked = false;
            //originally commented out:
            //StatManager::instance()->get_bool(worldmap:me:get_short_name() + "-endstory-seen", credits_unlocked);
            if credits_unlocked then
                credits_button = spawn WorldmapScreenCreditsButton with
                    this.me = _new_GUI_Component();
                    this.parent = outer;
                end;
                worldmap_screen.gui_manager:add(&credits_button:me) finalize with end;
            end
        end
    with
        every screen in ON_STARTUP do
            if screen != &worldmap_screen then
                continue;
            end

            exit_worldmap = false;
            _Sound__PingusSound__stop_music();

            if worldmap then
                emit worldmap:startup;
            end
        end
    with
        every delta in update do
            //Exit the world
            if exit_worldmap then
                _ScreenManager__instance():pop_screen();
            end
        end
    with
        every screen in ON_ESCAPE_PRESS do
            if screen == &worldmap_screen then
                exit_worldmap = true;
            end
        end
    with
        every screen in ON_FAST_FORWARD_PRESS do
            if screen == &worldmap_screen then
                emit comp.fast_forward_press;
            end
        end
    with
        every screen in ON_FAST_FORWARD_RELEASE do
            if screen == &worldmap_screen then
                emit comp.fast_forward_release;
            end
        end
    with
        every package in SCREEN_RESIZE do
            if package:screen != &worldmap_screen then
                continue;
            end

            call/rec close_button.set_pos(0, worldmap_screen.size.height - 37);
            if credits_button then
                call/rec credits_button:set_pos(worldmap_screen.size.width - 150, 0);
            end
        end
    with
        var _GUIScreen* e = await DELETE_WORLDMAP_SCREEN until (e == &worldmap_screen);
        if worldmap then
            emit worldmap:delete;
        end
    end
end

#endif
