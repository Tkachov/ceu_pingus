#ifndef DRAWABLE_STORY_DOT_CEU
#define DRAWABLE_STORY_DOT_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../string.ceu"
#include "../../engine/display/sprite.ceu"
#include "dot.ceu"

native/pre do
    ##include "engine/display/drawing_context.hpp"
    ##include "engine/display/sprite.hpp"
    ##include "engine/screen/screen_manager.hpp"
    ##include "pingus/fonts.hpp"
    ##include "pingus/gettext.h"
    ##include "pingus/screens/story_screen.hpp"
    ##include "util/file_reader.hpp"
    ##include "util/log.hpp"
    ##include "util/pathname.hpp"
    ##include <string>

    ##define Fonts__pingus_small Fonts::pingus_small
    ##define ScreenManager__instance() ScreenManager::instance()
    ##define std__make_shared_StoryScreen std::make_shared<StoryScreen>
    ##define FileReader__parse(x) FileReader::parse(x)
    ##define Pathname__DATA_PATH Pathname::DATA_PATH            
end

native @pure _ScreenManager__instance(), _std__make_shared_StoryScreen(), _FileReader__parse();

class StoryDot with
    interface Dot;
    var _FileReader* reader;
do
    var _WorldmapNS__Drawable&? dot = _PTR2REF((_WorldmapNS__Drawable*)&me);

    var Sprite m_story_dot_highlight;
    var Sprite m_story_dot;
    call/rec m_story_dot_highlight.reload_by_name("core/worldmap/story_dot_highlight");
    call/rec m_story_dot.reload_by_name("core/worldmap/story_dot");

    var _std__string&? m_name = _new_String();
    var _std__string&? m_story = _new_String();
    var bool m_credits = false;
        
    reader:read_string("name", _deref(m_name));
    reader:read_string("story", _deref(m_story));
    reader:read_bool("credits", m_credits);
    
    finalize with
        _delete_obj(m_name);
        _delete_obj(m_story);
    end

    function (void) => _std__string get_name do
        return dot.get_name();
    end

    function (void) => _Vector3f get_pos do
        return _toVector3f(pos);
    end

    function (void) => bool finished do return true; end
    function (void) => bool accessible do return true; end
    function (void) => void unlock do end

    var DotProxy proxy with
        this.dot = outer;
    end;

    par/or do
        every gc in draw do
            gc:draw(_deref(m_story_dot.get()), _toVector3f(pos));
        end
    with
        every gc in draw_hover do
            gc:draw(_deref(m_story_dot_highlight.get()), _toVector3f(pos));
            gc:print_center(_Fonts__pingus_small, _Vector2i(pos.x, pos.y - 44), __(_deref(m_name)), 10000);
        end
    with
        every on_click do            
            //it throws std::exception, but I won't catch it and log_error() it - there is no `try`/`catch` in Ceu
            _ScreenManager__instance():push_screen(
                _std__make_shared_StoryScreen(
                    _FileReader__parse(_Pathname(_deref(m_story), _Pathname__DATA_PATH)),
                    m_credits
                )
            );
        end
    with
        await delete;
    end
end

#endif
