#ifndef DRAWABLE_STORY_DOT_CEU
#define DRAWABLE_STORY_DOT_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../string.ceu"
#include "../../engine/display/sprite.ceu"
#include "drawable.ceu"

native/pre do
    ##include "engine/display/drawing_context.hpp"
    ##include "engine/display/sprite.hpp"
    ##include "engine/screen/screen_manager.hpp"
    ##include "pingus/fonts.hpp"
    ##include "pingus/gettext.h"
    ##include "pingus/screens/story_screen.hpp"
    ##include "pingus/worldmap/dot.hpp"
    ##include "util/file_reader.hpp"
    ##include "util/log.hpp"
    ##include "util/pathname.hpp"
    ##include <string>

    ##define Fonts__pingus_small Fonts::pingus_small
    ##define ScreenManager__instance() ScreenManager::instance()
    ##define std__make_shared_StoryScreen std::make_shared<StoryScreen>
    ##define FileReader__parse(x) FileReader::parse(x)
    ##define Pathname__DATA_PATH Pathname::DATA_PATH            
end

native @pure _try_catch_log_error(), _ScreenManager__instance(), _std__make_shared_StoryScreen(), _FileReader__parse();

input _DrawableDrawPackage* DOT_DRAW_HOVER;
input _WorldmapNS__Dot* DOT_ON_CLICK;

class StoryDot with
    interface Drawable;
    var _FileReader* reader;
do
    var _WorldmapNS__Dot&? dot = _PTR2REF((_WorldmapNS__Dot*)&me);

    var Sprite m_story_dot_highlight;
    var Sprite m_story_dot;
    call/rec m_story_dot_highlight.reload_by_name("core/worldmap/story_dot_highlight");
    call/rec m_story_dot.reload_by_name("core/worldmap/story_dot");

    var _std__string&? m_name = _new_String();
    var _std__string&? m_story = _new_String();
    var bool m_credits = false;
        
    reader:read_string("name", _deref(m_name));
    reader:read_string("story", _deref(m_story));
    reader:read_bool("credits", m_credits);

    finalize with
        _delete_obj(m_name);
        _delete_obj(m_story);
    end

    var DrawableProxy proxy with
        this.drawable = outer;
    end;

    par/or do
        every gc in draw do
            gc:draw(_deref(m_story_dot.get()), dot.pos) finalize with end;
        end
    with
        every package in DOT_DRAW_HOVER do
            if package:drawable != &dot then
                continue;
            end

            package:gc.draw(_deref(m_story_dot_highlight.get()), dot.pos) finalize with end;
            package:gc.print_center(_Fonts__pingus_small, _Vector2i(dot.pos.x, dot.pos.y - 44) finalize with end, __(_deref(m_name)), 10000);
        end
    with
        every d in DOT_ON_CLICK do
            if d != &dot then
                continue;
            end
            
            //it throws std::exception, but I won't catch it and log_error() it - there is no `try`/`catch` in Ceu
            _ScreenManager__instance():push_screen(
                _std__make_shared_StoryScreen(
                    _FileReader__parse(_Pathname(_deref(m_story), _Pathname__DATA_PATH)),
                    m_credits
                )
            );
        end
    with
        await delete;
    end
end

#endif
