#ifndef DRAWABLE_PINGUS_CEU
#define DRAWABLE_PINGUS_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/sprite.ceu"
#include "ipingus.ceu"
#include "ipath_graph.ceu"

native/pre do
    ##define WorldmapNS__Pingus WorldmapNS::Pingus
    ##define WNS_NoNode WorldmapNS::NoNode
    ##define std__swap std::swap
    ##define addr(x) &x
    ##define WorldmapNS__Path WorldmapNS::Path
    ##define new_Path new WorldmapNS::Path
    ##define WorldmapNS__PathfinderResult WorldmapNS::PathfinderResult
    ##define new_PathfinderResult new WorldmapNS::PathfinderResult
    ##define std__vector_NodeId std::vector<int>
    ##define new_Vector_NodeId new std::vector<int>
end

native @pure _std__swap(), _addr(), _new_Path(), _new_PathfinderResult(), _new_Vector_NodeId();

class Pingus with
    interface IPingus;
    var IPathGraph& path_graph;
do
    var int current_node = _WNS_NoNode;
    var int source_node;
    var int target_node;
    var int final_target_node = _WNS_NoNode;
    var float edge_path_position;
    var Vector3f pos;
    var Vector3f last_pos;
    var _std__vector_NodeId&? node_path = _new_Vector_NodeId();
    var _WorldmapNS__Path&? edge_path = _new_Path();
    finalize with
        _delete_obj(name);
        _delete_obj(node_path);
        _delete_obj(edge_path);
    end

    var Sprite sprite_standing;    
    var Sprite sprite_right;
    var Sprite sprite_left;
    var Sprite arrow;
    call/rec sprite_standing.reload_by_name("core/worldmap/pingus_standing");
    call/rec sprite_right.reload_by_name("core/worldmap/pingus/right");
    call/rec sprite_left.reload_by_name("core/worldmap/pingus/left");
    call/rec arrow.reload_by_name("core/worldmap/arrow");

    function @rec (int node) => void set_position do
        _readVector3f(pos, path_graph.get_dot_by_id(node):get_pos());
        current_node = node;
    end

    function (void) => Vector3f get_pos do        
        return pos;
    end

    function (void) => int get_node do
        return current_node;
    end

    function @rec (float delta) => void update_walk do
        var float velocity = 70.0;

        // Update the edge_path_position
        edge_path_position = edge_path_position + velocity*delta;

        if edge_path_position > edge_path.length() then
            // target reached  
            if node_path.empty() then
                // final target reached    
                current_node = target_node;
                final_target_node = _WNS_NoNode;    
            else
                // edge is traveled, now go to the next node    
                call/rec update_edge_path();
            end
        end

        // Recalc pingu position on the screen
        last_pos = pos;

        if current_node != _WNS_NoNode then // pingu stands still
            _readVector3f(pos, ((Dot*)path_graph.path_graph.graph.resolve_node(current_node).data):get_pos());
        else // between two nodes  
            _readVector3f(pos, edge_path.at(edge_path_position));
        end
    end

    function (void) => bool is_walking do
        return current_node == _WNS_NoNode;
    end

    function @rec (int target) => bool walk_to_node do
        final_target_node = target;

        if current_node == target then  
            return true;  
        else/if current_node != _WNS_NoNode then // pingu stands still            
            if path_graph.path_graph.get_path(current_node, target).path.empty() then            
                // No path could be found
                return false;            
            else            
                node_path = _PTR2REF(path_graph.path_graph.get_path(current_node, target).path);

                // Simulate that we just reached current_node, then update the edge_path
                target_node = _PTR2REF(node_path.back()); // equal to current_node;
                node_path.pop_back();
                call/rec update_edge_path();

                current_node = _WNS_NoNode;
                return true;
            end
        else // pingu between two nodes  
            if target_node == target then            
                node_path.clear();
                return true;
            else/if source_node == target then
                // Reverse the pingu
                _std__swap(target_node, source_node);
                edge_path.reverse();
                edge_path_position = edge_path.length() - edge_path_position;
                node_path.clear();
                return true;            
            else                
                var _WorldmapNS__PathfinderResult&? node_path1 = _new_PathfinderResult(path_graph.path_graph.get_path(source_node, target));
                var _WorldmapNS__PathfinderResult&? node_path2 = _new_PathfinderResult(path_graph.path_graph.get_path(target_node, target));

                // Check that a path exist
                if node_path1.path.empty() then
                    if node_path2.path.empty() then
                        _delete_obj(node_path1);
                        _delete_obj(node_path2);
                        return false;                    
                    else
                        node_path = _PTR2REF(node_path2.path);
                    end
                else
                    // Select the shorter path
                    if node_path1.cost + edge_path_position <
                       node_path2.cost + (edge_path.length() - edge_path_position) then
                        // walk to source node, which means to reverse the pingu
                        node_path = _PTR2REF(node_path1.path);

                        // Reverse the pingu
                        _std__swap(target_node, source_node);
                        edge_path.reverse();
                        edge_path_position = edge_path.length() - edge_path_position;
                    else
                        // walk to target_node
                        node_path = _PTR2REF(node_path2.path);
                    end
                end

                // Pop the first element on the stack, since we are already targeting it
                node_path.pop_back();

                _delete_obj(node_path1);
                _delete_obj(node_path2);
                return true;              
            end
        end
    end

    function @rec (void) => void update_edge_path do    
        // Update source and target nodes
        source_node = target_node;
        target_node = node_path.back();
        node_path.pop_back(); // remove target node from list of nodes

        edge_path_position = 0.0;
        edge_path.clear();
        
        var _WorldmapNS__Path* partial_path = _PTR2REF(path_graph.path_graph.graph.resolve_edge(source_node, target_node).data);

        edge_path.push_back(((Dot*)path_graph.path_graph.graph.resolve_node(source_node).data):get_pos());
        // Why do we need to reverse this?!
        edge_path.reverse_insert(_PTR2REF(*partial_path));
        edge_path.push_back(((Dot*)path_graph.path_graph.graph.resolve_node(target_node).data):get_pos());
    end

    function (void) => float get_direction do
        return (_Math__atan2(last_pos.x - pos.x, -(last_pos.y - pos.y))*180.0/(float)_Math__pi) + 180.0;
    end

    par/or do
        every gc in draw do
            // Add 10 to z_pos so that the pingu gets drawn above the node it is
            // standing one
            if final_target_node != _WNS_NoNode and current_node == _WNS_NoNode then              
                gc:draw(_deref(arrow.get()), path_graph.get_dot_by_id(final_target_node):get_pos() + _Vector3f(0, 0, 10));
            end

            if not is_walking() then
                gc:draw(_deref(sprite_standing.get()), _toVector3f(pos));
            else  
                //original FIXME: Replace the sprite and add up/down here
                var float direction = get_direction();
      
                if direction >= 0 and direction < 180 then
                    gc:draw(_deref(sprite_right.get()), _toVector3f(pos) + _Vector3f(0, 0, 10));
                else
                    gc:draw(_deref(sprite_left.get()), _toVector3f(pos) + _Vector3f(0, 0, 10));
                end
            end
        end
    with
        every delta in update do
            var float direction = get_direction();
            if direction >= 0 and direction < 180 then
                sprite_right.update_delta(delta);
            else
                sprite_left.update_delta(delta);
            end
  
            if is_walking() then
                call/rec update_walk(delta);
            end
        end
    with        
        await delete;
    end
end

#endif
