#ifndef PATH_GRAPH_CEU
#define PATH_GRAPH_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/gui/igui_component.ceu"
#include "../../engine/gui/surface_button.ceu"
#include "../../engine/screen/screen.ceu"
#include "../../engine/sound/sound.ceu"
#include "../../math/math.ceu"
#include "../../math/rect.ceu"
#include "../iworld.ceu"
#include "../global_interface.ceu"
#include "ipath_graph.ceu"
#include "iworldmap.ceu"
#include "pingus.ceu"
#include "sprite_drawable.ceu"
#include "level_dot.ceu"
#include "story_dot.ceu"
#include "path_drawable.ceu"

native/pre do
    ##include "engine/display/display.hpp"
    ##include "engine/display/graphic_context_state.hpp"
    ##include "engine/gui/gui_manager.hpp"
    ##include "engine/gui/rect_component.hpp"
    ##include "engine/gui/surface_button.hpp"
    ##include "engine/screen/screen_manager.hpp"
    ##include "engine/sound/sound.hpp"
    ##include "math/vector3f.hpp"
    ##include "pingus/fonts.hpp"
    ##include "pingus/game_time.hpp"
    ##include "pingus/gettext.h"
    ##include "pingus/globals.hpp"
    ##include "pingus/savegame_manager.hpp"
    ##include "pingus/screens/game_session.hpp"
    ##include "pingus/screens/result_screen.hpp"
    ##include "pingus/screens/story_screen.hpp"
    ##include "pingus/server.hpp"
    ##include "pingus/stat_manager.hpp"    
    ##include "pingus/string_format.hpp"
    ##include "pingus/worldmap/graph.hpp"    
    ##include "pingus/worldmap/path.hpp"
    ##include "pingus/worldmap/path_graph.hpp"
    ##include "pingus/worldmap/pathfinder.hpp"
    ##include "pingus/worldmap/worldmap_screen.hpp"
    ##include "util/file_reader.hpp"
    ##include "util/log.hpp"
    ##include "util/pathname.hpp"
    ##include "util/raise_exception.hpp"
    ##include "util/sexpr_file_writer.hpp"
    ##include "util/string_util.hpp"
    ##include <iostream>
    ##include <map>
    ##include <memory>
    ##include <stdexcept>
    ##include <vector>

    ##define new_GUI_Component() new GUI::Component()
    ##define new_Worldmap(pn) new WorldmapNS::Worldmap(pn)
    ##define ScreenManager__instance() ScreenManager::instance()
    ##define std__make_shared_GameSession std::make_shared<GameSession>
    ##define std__make_shared_StoryScreen std::make_shared<StoryScreen>
    ##define Display__get_width() Display::get_width()
    ##define Display__get_height() Display::get_height()
    ##define SU2str(x) StringUtil::to_string(x)
    ##define Fonts__chalk_large Fonts::chalk_large
    ##define Fonts__chalk_normal Fonts::chalk_normal
    ##define Fonts__chalk_small Fonts::chalk_small
    ##define StringFormat__break_line StringFormat::break_line

    ##define new_SceneContextE() new SceneContext()
    ##define new_Pingus(x) new WorldmapNS::Pingus(x)

    ##define WorldmapNS__Worldmap WorldmapNS::Worldmap
    ##define WorldmapNS__WorldmapScreen WorldmapNS::WorldmapScreen    

    ##define StatManager__instance() StatManager::instance()
    ##define new_PathGraph new WorldmapNS::PathGraph
    ##define DrawableFactory__create(x) WorldmapNS::DrawableFactory::create(x)
    ##define addr(x) &x

    ##define WorldmapNS__PathGraph WorldmapNS::PathGraph
    ##define Vector_FileReader std::vector<FileReader>
    ##define new_Vector_FileReader new std::vector<FileReader>
    ##define WNS_NoNode WorldmapNS::NoNode

    ##define WorldmapNS__Path WorldmapNS::Path
    ##define new_Path new WorldmapNS::Path
end

native @pure _new_GUI_Component(), _ScreenManager__instance(), _std__make_shared_GameScreen(), _std__make_shared_StoryScreen(),
             _Display__get_width(), _Display__get_height(), _new_Worldmap(), _new_Pingus(),
             _SU2str(), _StringFormat__break_line(), _new_SceneContextE(), _StatManager__instance(), _new_PathGraph(), _addr(),
             _new_Vector_FileReader(), _new_Path();

class PathGraph with
    interface IPathGraph;
    pool LevelDot[] lds;
    pool StoryDot[] sds;
    pool PathDrawable[] pds;
do
    //parse_nodes:
    do
    var _Vector_FileReader&? childs = _new_Vector_FileReader(worldmap.pingus_worldmap:get_graph():read_section("nodes").get_sections());
    loop i in childs.size() do
        var Drawable*? dot = null;

        //DotFactory:
        if childs.at(i).get_name() == "storydot" then            
            spawn StoryDot in sds with
                dot = &this;
                this.reader = (_FileReader*)_addr(childs.at(i));

                _reader_read_Vector3f(childs.at(i).read_section("dot"), this.pos);
                this.name = _new_String();
                childs.at(i).read_section("dot").read_string("name", _deref(this.name));
                _assert(not this.name.empty());
            end;
        else/if childs.at(i).get_name() == "leveldot" then
            spawn LevelDot in lds with
                dot = &this;
                this.reader = (_FileReader*)_addr(childs.at(i));                
                
                _reader_read_Vector3f(childs.at(i).read_section("dot"), this.pos);
                this.name = _new_String();
                childs.at(i).read_section("dot").read_string("name", _deref(this.name));
                _assert(not this.name.empty());
            end;
        else
            _log_error("DotFactory: unknown tag: %1%", childs.at(i).get_name());
        end

        if dot then
            // add the dot to the pathfinding
            var int id = path_graph.graph.add_node(_PTR2REF(dot));

            //log_info("Adding to lookup table: " << dot->get_name());
            path_graph.node_lookup[_deref(dot:name)] = id;

            // add the dot to the list of drawables
            worldmap.add_drawable(_PTR2REF(dot));            

            //original FIXME: should be use this for freeing the stuff?
            path_graph.dots.push_back(_PTR2REF(dot));
        else
            _log_info("PathGraph: Couldn't create node");
        end
    end
    _delete_obj(childs);
    end
    ////////

    //parse_edges:   
    do
    var _Vector_FileReader&? childs = _new_Vector_FileReader(worldmap.pingus_worldmap:get_graph():read_section("edges").get_sections());

    var _std__string* name = _new_String();
    var _std__string* source = _new_String();
    var _std__string* destination = _new_String();
    loop i in childs.size() do
        if childs.at(i).get_name() == "edge" then            
            childs.at(i).read_string("name", _deref(name));
            childs.at(i).read_string("source", _deref(source));
            childs.at(i).read_string("destination", _deref(destination));
              
            //original FIXME: add path-data parsing here
            var _WorldmapNS__Path* path = _new_Path();
              
            var _Vector_FileReader&? childs2 = _new_Vector_FileReader(worldmap.pingus_worldmap:get_graph():read_section("edges").read_section("positions").get_sections());
              
            loop j in childs2.size() do
                if childs2.at(j).get_name() == "position" then                
                    var Vector3f pos;
                    childs2.at(j).read_float("x", pos.x);
                    childs2.at(j).read_float("y", pos.y);
                    childs2.at(j).read_float("z", pos.z);
                    path:push_back(_toVector3f(pos));
                end
            end

            var _WorldmapNS__Path&? full_path = _new_Path();
            full_path.push_back(((Dot*)path_graph.graph.resolve_node(path_graph.lookup_node(_deref(source))).data):get_pos());
            full_path.insert(*path) finalize with end;
            full_path.push_back(((Dot*)path_graph.graph.resolve_node(path_graph.lookup_node(_deref(destination))).data):get_pos());

            //original FIXME: merge this together with the Pingus::distance() stuff in a seperate Path class
            var float cost = full_path.length();

            if _globals__developer_mode then                
                spawn PathDrawable in pds with
                    this.name = _new_String();                    
                    worldmap.add_drawable(&this);
                    this.path = _PTR2REF(full_path); //delete inside
                end;
            end

            //original FIXME: No error checking,
            var int id1 = path_graph.graph.add_edge(_PTR2REF(path), //original FIXME: Memory leak!
                                      path_graph.lookup_node(_deref(destination)), path_graph.lookup_node(_deref(source)),
                                      cost);

            var _WorldmapNS__Path* path2 = _new_Path();
            path2:reverse_insert(*path) finalize with end;
            //EdgeId id2 =
            path_graph.graph.add_edge(_PTR2REF(path2), //original FIXME: Memory leak!
                         path_graph.lookup_node(_deref(source)), path_graph.lookup_node(_deref(destination)),
                         cost);

            //original FIXME: edge lookup is flawed, since we have different edges in both directions
            path_graph.edge_lookup[_deref(name)] = id1;
            
            ///_delete_obj(path);
            ///_delete_obj(path2);
            ///_delete_obj(full_path);
        else
            _log_error("PathGraph: unhandled: ");
        end
    end
    _delete_obj(name);
    _delete_obj(source);
    _delete_obj(destination);
    _delete_obj(childs);
    end
    ////////

    // Init the pathfinder cache
    path_graph.pathfinder_cache.resize(path_graph.graph.max_node_handler_value());
    path_graph.pathfinder_cache.assign(path_graph.pathfinder_cache.size(), 0);

    finalize with        
        _delete_obj(path_graph);
    end

    function @rec (float x_pos, float y_pos) => Dot* get_dot do
        loop/1000 i in path_graph.dots.size() do  
            var Dot* r = _PTR2REF((Dot*)path_graph.dots.at(i));
            var float x = x_pos - r:get_pos().x;
            var float y = y_pos - r:get_pos().y;

            if _Math__sqrt(x*x + y*y) < 30.0 then
                return r;
            end
        end

        return null;
    end

    function (int id) => Dot* get_dot_by_id do
        return (Dot*)path_graph.graph.resolve_node(id).data;
    end

    function @rec (Dot* dot) => int get_id do
        loop/1000 i in path_graph.dots.size() do 
            if path_graph.dots.at(i) == dot then
                return i;
            end
        end

        return _WNS_NoNode;
    end

    await delete;
    loop ld in lds do
        emit ld:delete;
    end
    loop sd in sds do
        emit sd:delete;
    end
    loop pd in pds do
        emit pd:delete;
    end
end

#endif
