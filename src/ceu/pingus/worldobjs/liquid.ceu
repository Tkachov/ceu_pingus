#ifndef LIQUID_CEU
#define LIQUID_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../pingu_holder_listener.ceu"

class Liquid with
    interface IWorldObj;
    var _Sprite&? sprite;
    var int width;
do
    call/rec global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end;

    function (void) => float get_z_pos do
        return pos.z;
    end

    function (Vector3f p) => void set_pos do
        pos = p;
    end

    function (void) => Vector3f get_pos do
        return pos;
    end

    finalize with
        _delete_obj(sprite);
    end

    //Cause to interpret the width in pixels instead of tiles
    var bool old_width_handling = false;
    if not old_width_handling then
        width = width * sprite.get_width();
    end

    par/or do
        every e_STARTUP do
            var _CollisionMask* mask = _new_CollisionMask("liquids/water_cmap");

            loop/100 i in width do
                _colmap_put(global:world:world:get_colmap(), mask, (int)(pos.x + (float)i), (int)pos.y, _GT_WATER);
            end

            _delete_obj(mask);
        end
    with
        every gc in e_DRAW do
            var int x = pos.x;
            loop/100 do
                if x >= (int)pos.x + width then
                    break;
                end;

                _gc_color_draw2(gc, &sprite, _Vector3f(x, pos.y));

                x = x + sprite.get_width();
            end
        end
    with
        every e_UPDATE do
            sprite.update(0.033);
        end
    with
        await e_DELETE;
    end
end

#endif
