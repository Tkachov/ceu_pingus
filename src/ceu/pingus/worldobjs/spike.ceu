#ifndef SPIKE_CEU
#define SPIKE_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/sprite3.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../global_interface.ceu"

class Spike with
    interface IWorldObj;
do
    call/rec global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end;
    function (void) => float get_z_pos do return pos.z; end
    function (Vector3f p) => void set_pos do pos = p; end
    function @rec (void) => Vector3f get_pos do return pos; end

    par/or do
        loop do
            //not killing
            loop do
                await global:world:update;

                var bool stop = false;
                loop pingu in global:world:get_pingus():all_pingus do            
                    if pingu:get_x() > pos.x+16-5 and pingu:get_x() < pos.x+16+5 and
                       pingu:get_y() > pos.y and pingu:get_y() < pos.y+32 then                  
                      stop = true;
                      break;
                    end            
                end
                
                if stop then break; end
            end

            //killing
            do
                var Sprite3 surface with
                    this.pos_giver = outer;
                end;
                surface.reload_by_name("traps/spike");

                loop do
                    await global:world:update;
                    
                    loop pingu in global:world:get_pingus():all_pingus do
                        if surface.get_current_frame() == 3 and
                           pingu:get_x() > pos.x+16-12 and pingu:get_x() < pos.x+16+12 and
                           pingu:get_y() > pos.y and pingu:get_y() < pos.y+32 then
                          emit pingu:e_CHANGE_ACTION => _A_DEAD;
                        end                
                    end

                    if surface.get_current_frame() == surface.get_frame_count()-1 then
                        break;
                    end
                end
            end
        end
    with
        await e_DELETE;
    end
end

#endif
