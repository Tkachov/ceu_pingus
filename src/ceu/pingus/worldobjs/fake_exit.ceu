#ifndef FAKE_EXIT_CEU
#define FAKE_EXIT_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../pingu_holder_listener.ceu"

native/pre do
    ##include "pingus/worldobjs/fake_exit.hpp"
    ##define WFakeExit WorldObjs::FakeExit
end

input _WFakeExit* DELETE_FAKE_EXIT;

class FakeExit with
    interface IWorldObj;
do
    var _WFakeExit&? fake_exit = _PTR2REF((_WFakeExit*)me);

    par/or do
        every package in WORLDOBJ_DRAW do
            if package:worldobj != &fake_exit then
                continue;
            end

            /*_gc_color_draw2(package:gc, &fake_exit.sprite_kill_left, fake_exit.pos);*/
        end
    with
        every w in WORLD_UPDATE do
            if w != fake_exit.world then
                continue;
            end

            loop pingu in global:world:get_pingus():all_pingus do
                if fake_exit.sprite.is_finished() then
                    fake_exit.smashing = false;
                end

                if pingu:me.get_x() > fake_exit.pos.x+31 and pingu:me.get_x() < fake_exit.pos.x+31+15 and
                   pingu:me.get_y() > fake_exit.pos.y+56 and pingu:me.get_y() < fake_exit.pos.y+56+56 then
                    if pingu:me.get_action() != _A_SPLASHED then
                        if not fake_exit.smashing then
                            fake_exit.sprite.restart();
                            fake_exit.smashing = true;
                        end

                        if fake_exit.sprite.get_current_frame() == 4 then
                            emit pingu:e_CHANGE_ACTION => _A_SPLASHED;
                        end
                    end
                end
            end

            if fake_exit.smashing then
                fake_exit.sprite.update();
            end
        end
    with
        var _WFakeExit* e = await DELETE_FAKE_EXIT until (e == &fake_exit);
    end
end

#endif
