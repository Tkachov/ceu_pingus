#ifndef FAKE_EXIT_CEU
#define FAKE_EXIT_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../pingu_holder_listener.ceu"

native/pre do
    ##include "pingus/components/smallmap.hpp"
end

class FakeExit with
    interface IWorldObj;
    var _Sprite&? sprite;
    var _Sprite&? smallmap_symbol;
    var bool smashing;
do
    var _WorldObj&? fake_exit = _PTR2REF((_WorldObj*)me);
    //delete fake_exit
    finalize with _delete_Sprite(sprite); end;
    finalize with _delete_Sprite(smallmap_symbol); end;

    par/or do
        every package in WORLDOBJ_DRAW do
            if package:worldobj != &fake_exit then
                continue;
            end

            _gc_color_draw2(package:gc, &sprite, fake_exit.pos);
        end
    with
        every package in WORLDOBJ_DRAW_SMALLMAP do
            if package:worldobj != &fake_exit then
                continue;
            end

            package:smallmap:draw_sprite(_deref(smallmap_symbol), _PTR2REF(fake_exit.pos + _Vector3f(0, 115)));
        end
    with
        every w in WORLD_UPDATE do
            if w != fake_exit.world then
                continue;
            end

            loop pingu in global:world:get_pingus():all_pingus do
                if sprite.is_finished() then
                    smashing = false;
                end

                if pingu:get_x() > fake_exit.pos.x+31 and pingu:get_x() < fake_exit.pos.x+31+15 and
                   pingu:get_y() > fake_exit.pos.y+56 and pingu:get_y() < fake_exit.pos.y+56+56 then
                    if pingu:get_current_action() != _A_SPLASHED and
                       pingu:get_current_action() != _A_DEAD and pingu:get_current_action() != _A_EXITED then
                        if not smashing then
                            sprite.restart();
                            smashing = true;
                        end

                        if sprite.get_current_frame() == 4 then
                            emit pingu:e_CHANGE_ACTION => _A_SPLASHED;
                        end
                    end
                end
            end

            if smashing then
                sprite.update();
            end
        end
    with
        var _WorldObj* e = await DELETE_WORLDOBJ until (e == &fake_exit);
    end
end

#endif
