#ifndef ENTRANCE_CEU
#define ENTRANCE_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../global_interface.ceu"

#define ED_LEFT 1
#define ED_RIGHT 2
#define ED_MISC 3

class Entrance with
    interface IWorldObj;
    var int direction;
    var int release_rate;
    var int owner_id;
do
    var Sprite smallmap_symbol;    
    call/rec smallmap_symbol.reload_by_name("core/misc/smallmap_entrance");

    call/rec global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end
    function (void) => float get_z_pos do return pos.z; end
    function (Vector3f p) => void set_pos do pos = p; end
    function @rec (void) => Vector3f get_pos do return pos; end

    var int last_release = 150 - release_rate;
    var bool go_left = true;

    if direction != ED_LEFT then
        go_left = false;
    end

    function @rec (void) => bool pingu_ready do
        if (last_release + release_rate) < global:world:get_time() then
            last_release = global:world:get_time();
            return true;
        end

        return false;
    end

    par/or do
        every smallmap in global:world:e_DRAW_SMALLMAP do
            call/rec smallmap:draw_sprite(smallmap_symbol.get(), _toVector3f(pos));
        end
    with
        every global:world:update do
            var bool pr = call/rec pingu_ready();
            if pr and not global:world:check_armageddon() then
                emit global:world:get_pingus().e_MAKE_PINGU => (&this, owner_id, go_left);

                if direction == ED_MISC then
                    go_left = not go_left;
                end
            end
        end
    with
        await e_DELETE;
    end
end

#endif
