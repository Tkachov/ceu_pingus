#ifndef ENTRANCE_CEU
#define ENTRANCE_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../pingu_holder_listener.ceu"

native/pre do
    ##include "pingus/components/smallmap.hpp"
end

#define ED_LEFT 1
#define ED_RIGHT 2
#define ED_MISC 3

class Entrance with
    interface IWorldObj;
    var int direction;
    var int release_rate;
    var int owner_id;

    var _Sprite&? smallmap_symbol;
    var _Sprite&? surface;
do
    call/rec global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end;

    function (void) => float get_z_pos do
        return pos.z;
    end

    function (Vector3f p) => void set_pos do
        pos = p;
    end

    function (void) => Vector3f get_pos do
        return pos;
    end

    finalize with
        _delete_obj(smallmap_symbol);
        _delete_obj(surface);
    end;

    var int last_release = 150 - release_rate;
    var bool go_left = true;

    if direction != ED_LEFT then
        go_left = false;
    end

    function (void) => bool pingu_ready do
        if (last_release + release_rate) < _WorldObj__get_world():get_time() then
            last_release = _PTR2REF(_WorldObj__get_world():get_time()); //that's not a pointer even
            return true;
        end

        return false;
    end

    par/or do
        every gc in e_DRAW do
            //original FIXME: Why do we still have these hardcoded offsets?!
            _gc_color_draw2(gc, &surface, _Vector3f(pos.x - 32, pos.y - 16));
        end
    with
        every smallmap in e_DRAW_SMALLMAP do
            smallmap:draw_sprite(_deref(smallmap_symbol), _toVector3f(pos));
        end
    with
        every e_UPDATE do
            if pingu_ready() and not _WorldObj__get_world():check_armageddon() then
                var _PHPackage* package = _new_PHPackage();
                package:entrance = &this;
                package:owner_id = owner_id;
                package:left = go_left;
                emit global:world:get_pingus():e_MAKE_PINGU => package;

                if direction == ED_MISC then
                    go_left = not go_left;
                end
            end
        end
    with
        await e_DELETE;
    end
end

#endif
