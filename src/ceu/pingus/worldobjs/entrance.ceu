#ifndef ENTRANCE_CEU
#define ENTRANCE_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../pingu_holder_listener.ceu"

native/pre do
    ##include "pingus/components/smallmap.hpp"
end

#define ED_LEFT 1
#define ED_RIGHT 2
#define ED_MISC 3

class Entrance with
    interface IWorldObj;
    var int direction;
    var int release_rate;
    var int owner_id;

    var _Sprite&? smallmap_symbol;
    var _Sprite&? surface;
do
    var _WorldObj&? entrance = _PTR2REF(me);
    global:world:add_object(&this);

    //delete entrance
    finalize with _delete_obj(smallmap_symbol); end;
    finalize with _delete_obj(surface); end;

    var int last_release = 150 - release_rate;
    var bool go_left = true;

    if direction != ED_LEFT then
        go_left = false;
    end

    function (void) => bool pingu_ready do
        if (last_release + release_rate) < entrance.world:get_time() then
            last_release = _PTR2REF(entrance.world:get_time()); //that's not a pointer even
            return true;
        end

        return false;
    end

    par/or do
        every gc in e_DRAW do
_printf("draw entrance");

            //original FIXME: Why do we still have these hardcoded offsets?!
            _gc_color_draw2(gc, &surface, _Vector3f(entrance.pos.x - 32, entrance.pos.y - 16));
        end
    with
        every package in WORLDOBJ_DRAW_SMALLMAP do
            if package:worldobj != &entrance then
                continue;
            end

            package:smallmap:draw_sprite(_deref(smallmap_symbol), _PTR2REF(entrance.pos));
        end
    with
        every e_UPDATE do
            if pingu_ready() and not entrance.world:check_armageddon() then
                var _PHPackage* package = _new_PHPackage();
                package:entrance = &entrance;
                package:owner_id = owner_id;
                package:left = go_left;
                emit global:world:get_pingus():e_MAKE_PINGU => package;

                if direction == ED_MISC then
                    go_left = not go_left;
                end
            end
        end
    with
        await e_DELETE;
        _printf("entrance DELETE\n");
    end
end

#endif
