#ifndef STARFIELD_BACKGROUND_STARS_CEU
#define STARFIELD_BACKGROUND_STARS_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../pingu_holder_listener.ceu"

native/pre do
    ##define globals__tile_size globals::tile_size
end

class StarfieldBackgroundStars with
    var _Sprite&? sprite;

    var float x_pos;
    var float y_pos;

    var float x_add;
    var float y_add;

    event _SceneContext* e_DRAW;
    event void e_UPDATE;
do
    finalize with _delete_obj(sprite); end

    x_pos = (float)(_rand()%_WorldObj__get_world():get_width());
    y_pos = (float)(_rand()%_WorldObj__get_world():get_height());

    x_add = (float)(_rand()%5)+1.0;
    y_add = 0.0;

    par do
        every gc in e_DRAW do
            _gc_color_draw2(gc, &sprite, _Vector3f(x_pos, y_pos));
            //if there are a lot of stars, it takes more than a second to render
            //and then there is a frameskip mechanism which probably resets
            //the drawing context as it suddenly becomes zero
            //it means you get a segfault during the DRAW events (there or somewhere else)
            //I don't know how to fix that, so I just recommend to create less stars
        end
    with
        every e_UPDATE do
            x_pos = x_pos + x_add;
            y_pos = y_pos + y_add;

            if x_pos > _WorldObj__get_world():get_width() then
                x_pos = (float)-_globals__tile_size;
                y_pos = (float)(_rand()%_WorldObj__get_world():get_height());
            end
        end
    end
end

#endif
