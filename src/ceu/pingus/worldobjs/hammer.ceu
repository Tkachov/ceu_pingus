#ifndef HAMMER_CEU
#define HAMMER_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../pingu_holder_listener.ceu"

class Hammer with
    interface IWorldObj;
    var _Sprite&? sprite;
do    
    call/rec global:world:add_object(&this);
    var int current_frame = 0;

    function (_FileReader* reader) => void construct do end;

    function (void) => float get_z_pos do
        return pos.z;
    end

    function (Vector3f p) => void set_pos do
        pos = p;
    end

    function (void) => Vector3f get_pos do
        return pos;
    end

    finalize with        
        _delete_obj(sprite);
    end;

    par/or do
        every gc in e_DRAW do
            _gc_color_draw2(gc, &sprite, _toVector3f(pos));
        end
    with
        loop do
            loop do
                await e_UPDATE;

                current_frame = current_frame + 1;
                sprite.set_frame(current_frame);

                if current_frame == sprite.get_frame_count()-1 then
                    loop pingu in global:world:get_pingus():all_pingus do
                        if pingu:get_current_action() == _A_SPLASHED or
                           pingu:get_current_action() == _A_DEAD or pingu:get_current_action() == _A_EXITED then
                            continue;
                        end

                        if pingu:get_x() <= pos.x+55 or pingu:get_x() >= pos.x+77 or
                           pingu:get_y() <= pos.y+146 or pingu:get_y() >= pos.y+185 then
                            continue;
                        end

                        emit pingu:e_CHANGE_ACTION => _A_SPLASHED;
                    end

                    break;
                end
            end

            //roll back
            loop do
                await e_UPDATE;

                current_frame = current_frame - 1;
                sprite.set_frame(current_frame);
                if current_frame == 0 then
                    break;
                end
            end
        end
    with
        await e_DELETE;
    end
end

#endif
