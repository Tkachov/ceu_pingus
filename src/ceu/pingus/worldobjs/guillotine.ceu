#ifndef GUILLOTINE_CEU
#define GUILLOTINE_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../pingu_holder_listener.ceu"

class Guillotine with
    interface IWorldObj;
    var _Sprite&? sprite_kill_right;
    var _Sprite&? sprite_kill_left;
    var _Sprite&? sprite_idle;

    var _Direction&? direction;
    var bool killing;
do
    var _WorldObj&? guillotine = _PTR2REF(me);
    global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end;

    finalize with
        _delete_obj(guillotine);
        _delete_obj(direction);
        _delete_obj(sprite_kill_left);
        _delete_obj(sprite_kill_right);
        _delete_obj(sprite_idle);
    end;

    par/or do
        every gc in e_DRAW do
            if killing then
                if direction.is_left() then
                    _gc_color_draw2(gc, &sprite_kill_left, guillotine.pos);
                else
                    _gc_color_draw2(gc, &sprite_kill_right, guillotine.pos);
                end
            else
                _gc_color_draw2(gc, &sprite_idle, guillotine.pos);
            end
        end
    with
        every e_UPDATE do
            // Only have to check one sprite because they update simultaneously
            if sprite_kill_left.is_finished() then
                killing = false;
            end

            if not killing then
                loop pingu in global:world:get_pingus():all_pingus do
                    if pingu:is_inside((int)(guillotine.pos.x + 38), (int)(guillotine.pos.y + 90), (int)(guillotine.pos.x + 42), (int)(guillotine.pos.y + 98)) then
                        killing = true;
                        direction = _PTR2REF(pingu:direction);
                        emit pingu:e_CHANGE_ACTION => _A_DEAD;
                        sprite_kill_left.restart();
                        sprite_kill_right.restart();
                        break;
                    end
                end
            end

            if killing then
                // Update both sprites so they finish at the same time.
                sprite_kill_left.update();
                sprite_kill_right.update();

                // original FIXME: Should be a different sound
                if sprite_kill_left.get_current_frame() == 7 then
                    _WorldObj__get_world_play_sound("splash", guillotine.pos);
                end
            else
                sprite_idle.update();
            end
        end
    with
        await e_DELETE;
    end
end

#endif
