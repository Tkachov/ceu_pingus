#ifndef GUILLOTINE_CEU
#define GUILLOTINE_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/sprite3.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../global_interface.ceu"

class Guillotine with
    interface IWorldObj;
do    
    var _Direction&? direction = _new_Direction();
    finalize with _delete_obj(direction); end;

    call/rec global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end;

    function (void) => float get_z_pos do return pos.z; end
    function (Vector3f p) => void set_pos do pos = p; end
    function (void) => Vector3f get_pos do return pos; end

    par/or do
        loop do
            //not killing
            do                
                var Sprite3 sprite_idle with
                    this.pos_giver = outer;
                end;
                sprite_idle.reload_by_name("traps/guillotineidle");
                sprite_idle.set_play_loop(true);
                
                every e_UPDATE do
                    var bool stop = false;

                    loop pingu in global:world:get_pingus():all_pingus do
                        if pingu:is_inside((int)(pos.x + 38), (int)(pos.y + 90), (int)(pos.x + 42), (int)(pos.y + 98)) then
                            stop = true;
                            direction = _PTR2REF(pingu:direction);
                            emit pingu:e_CHANGE_ACTION => _A_DEAD;
                            break;
                        end
                    end

                    if stop then
                        break;
                    end
                end
            end

            //killing
            do
                var Sprite3 sprite_kill with
                    this.pos_giver = outer;
                end;
                if direction.is_left() then
                    sprite_kill.reload_by_name("traps/guillotinekill/left");    
                else
                    sprite_kill.reload_by_name("traps/guillotinekill/right");
                end
                sprite_kill.set_play_loop(false);

                par/or do
                    every global:update do
                        // original FIXME: Should be a different sound
                        if sprite_kill.get_current_frame() == 7 then
                            global:world:play_sound("splash", pos, 0.5);
                        end
                    end
                with
                    await sprite_kill.finished;
                end
            end
        end
    with
        await e_DELETE;
    end
end

#endif
