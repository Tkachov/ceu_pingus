#ifndef GUILLOTINE_CEU
#define GUILLOTINE_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../pingu_holder_listener.ceu"

class Guillotine with
    interface IWorldObj;

    var bool killing = false;
do
    var Sprite2 sprite_kill_right;
    var Sprite2 sprite_kill_left;
    var Sprite2 sprite_idle;
    sprite_kill_right.reload_by_name("traps/guillotinekill/right");
    sprite_kill_left.reload_by_name("traps/guillotinekill/left");
    sprite_idle.reload_by_name("traps/guillotineidle");
    sprite_kill_right.set_play_loop(false);
    sprite_kill_left.set_play_loop(false);
    sprite_idle.set_play_loop(true);

    var _Direction&? direction = _new_Direction();
    finalize with _delete_obj(direction); end;

    call/rec global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end;

    function (void) => float get_z_pos do return pos.z; end
    function (Vector3f p) => void set_pos do pos = p; end
    function (void) => Vector3f get_pos do return pos; end

    par/or do
        every gc in e_DRAW do
            if killing then
                if direction.is_left() then
                    sprite_kill_left.draw2(gc, pos);
                else
                    sprite_kill_right.draw2(gc, pos);
                end
            else
                sprite_idle.draw2(gc, pos);
            end
        end
    with
        every e_UPDATE do
            // Only have to check one sprite because they update simultaneously
            if sprite_kill_left.is_finished() then
                killing = false;
            end

            if not killing then
                loop pingu in global:world:get_pingus():all_pingus do
                    if pingu:is_inside((int)(pos.x + 38), (int)(pos.y + 90), (int)(pos.x + 42), (int)(pos.y + 98)) then
                        killing = true;
                        direction = _PTR2REF(pingu:direction);
                        emit pingu:e_CHANGE_ACTION => _A_DEAD;
                        sprite_kill_left.restart();
                        sprite_kill_right.restart();
                        break;
                    end
                end
            end

            if killing then
                // Update both sprites so they finish at the same time.
                emit sprite_kill_left.default_update;
                emit sprite_kill_right.default_update;

                // original FIXME: Should be a different sound
                if sprite_kill_left.get_current_frame() == 7 then
                    global:world:play_sound("splash", pos, 0.5);
                end
            else
                emit sprite_idle.default_update;
            end
        end
    with
        await e_DELETE;
    end
end

#endif
