#ifndef SURFACE_BACKGROUND_CEU
#define SURFACE_BACKGROUND_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../global_interface.ceu"

native/pre do
    ##define globals__static_graphics globals::static_graphics
end

class SurfaceBackground with
    interface IWorldObj;
    var float para_x;
    var float para_y;

    //The amount of pixel the background is scrolled each frame in x direction.
    var float scroll_x;

    /* The amount of pixel the background is scrolled each frame in x
      direction. */
    var float scroll_y;

    /* fill_rect() components
      An fill_rect() can be drawn over the background, the following
      for components are passed to the fill_rect() call. */
    var _Color&? color;

    /* Stretch the background to the full screen size in x direction */
    var bool stretch_x;

    /* Stretch the background to the full screen size in x direction */
    var bool stretch_y;

    /* If streched in x or y direction keep the aspect ratio */
    var bool keep_aspect;

    /* Background image */
    var _Sprite&? sprite;

    /* The horizontal scrolling speed in pixels per tick */
    var float scroll_ox;

    /* The vertical scrolling speed in pixels per tick */
    var float scroll_oy;
do
    call/rec global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end;

    function (void) => float get_z_pos do
        return pos.z;
    end

    function (Vector3f p) => void set_pos do
        pos = p;
    end

    function (void) => Vector3f get_pos do
        return pos;
    end

    finalize with
        _delete_obj(sprite);
        _delete_obj(color);
    end;

    par/or do
        every gc in global:draw do
            if not sprite then
                continue;
            end

            var int offset_x = gc:color().world_to_screen(_Vector2i(0,0)).x - gc:color().get_rect().left;
            var int offset_y = gc:color().world_to_screen(_Vector2i(0,0)).y - gc:color().get_rect().top;

            var int start_x = (float)offset_x*para_x + scroll_ox;
            var int start_y = (float)offset_y*para_y + scroll_oy;

            if start_x > 0 then
                start_x = (start_x % sprite.get_width()) - sprite.get_width();
            end

            if start_y > 0 then
                start_y = (start_y % sprite.get_height()) - sprite.get_height();
            end

            var int y = start_y;
            loop/1000 do
                if y >= global:world:get_height() then
                    break;
                end

                var int x = start_x;
                loop/1000 do
                    if x >= global:world:get_width() then
                        break;
                    end

                    _gc_color_draw2(gc, &sprite, _Vector3f(x-offset_x, y-offset_y, pos.z));

                    x = x + sprite.get_width();
                end

                y = y + sprite.get_height();
            end
        end
    with
        every e_UPDATE do
            sprite.update();

            if not sprite or _globals__static_graphics then
                continue;
            end

            if scroll_x then
                scroll_ox = scroll_ox + scroll_x;

                if scroll_ox > sprite.get_width() then
                    scroll_ox = scroll_ox - sprite.get_width();
                else/if -scroll_ox > sprite.get_width() then
                    scroll_ox = scroll_ox + sprite.get_width();
                end
            end

            if scroll_y then
                scroll_oy = scroll_oy + scroll_y;

                if scroll_oy > sprite.get_height() then
                    scroll_oy = scroll_oy - sprite.get_height();
                else/if -scroll_oy > sprite.get_height() then
                    scroll_oy = scroll_oy + sprite.get_height();
                end
            end
        end
    with
        await e_DELETE;
    end
end

#endif
