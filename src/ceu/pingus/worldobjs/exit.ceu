#ifndef EXIT_CEU
#define EXIT_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../pingu_holder_listener.ceu"

native/pre do
    ##include "pingus/components/smallmap.hpp"
    ##include "pingus/res_descriptor.hpp"
    ##define new_ResDescriptor() new ResDescriptor()
    ##define colmap_remove(cm, desc, x, y) { CollisionMask __mask(*desc); cm->remove(__mask, x, y); }
end

native @pure _new_ResDescriptor(), _colmap_remove();

class Exit with
    interface IWorldObj;
    var _ResDescriptor&? desc;
    var int owner_id;

    var _Sprite&? sprite;
    var _Sprite&? flag;
    var _Sprite&? smallmap_symbol;
do
    var _WorldObj&? exit = _PTR2REF(me);
    global:world:add_object(&this);
    //finalize with _delete_obj(me); end
    finalize with _delete_obj(desc); end
    finalize with _delete_obj(sprite); end;
    finalize with _delete_obj(flag); end;
    finalize with _delete_obj(smallmap_symbol); end;

    par/or do
        every gc in e_DRAW do
_printf("draw exit");

            _gc_color_draw2(gc, &sprite, exit.pos);
            _gc_color_draw2(gc, &flag, exit.pos + _Vector3f(40, 0));
        end
    with
        every e_STARTUP do
            _colmap_remove(exit.world:get_colmap(), desc, (int)exit.pos.x - sprite.get_width()/2, (int)exit.pos.y - sprite.get_height());
        end
    with
        every package in WORLDOBJ_DRAW_SMALLMAP do
            if package:worldobj != &exit then
                continue;
            end

            package:smallmap:draw_sprite(_deref(smallmap_symbol), _PTR2REF(exit.pos));
        end
    with
        every w in WORLD_UPDATE do
            if w != exit.world then
                continue;
            end

            sprite.update();

            loop pingu in global:world:get_pingus():all_pingus do
                // Make sure this particular exit is allowed for this pingu
                if pingu:get_owner() != owner_id then
                    continue;
                end

                // Now, make sure the pingu is within range
                if pingu:get_x() <= exit.pos.x-1 or pingu:get_x() >= exit.pos.x+1 or
                   pingu:get_y() <= exit.pos.y-5 or pingu:get_y() >= exit.pos.y+5 then
                    continue;
                end

                // Now, make sure the pingu isn't already exiting, gone, or dead [or is dying because of apocalypse/bomber action]
                if pingu:get_current_action() != _A_EXITER and pingu:get_current_action() != _A_BOMBER and
                   pingu:get_current_action() != _A_DEAD and pingu:get_current_action() != _A_EXITED then
                    // Pingu actually exits
                    emit pingu:e_CHANGE_ACTION => _A_EXITER;
                end
            end
        end
    with
        await e_DELETE;
        _printf("exit DELETE\n");
    end
end

#endif
