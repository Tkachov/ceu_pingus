#ifndef CONVEYOR_BELT_CEU
#define CONVEYOR_BELT_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../math/vector3f.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../pingu_holder_listener.ceu"

native/pre do
    ##include "math/vector3f.hpp"
    ##include "pingus/worldobj.hpp"
    ##include "engine/display/scene_context.hpp"
    ##include "pingus/pingu_holder.hpp"
    ##include "pingus/world.hpp"
end

class ConveyorBelt with
    interface IWorldObj;
    var _Sprite&? left_sur;
    var _Sprite&? right_sur;
    var _Sprite&? middle_sur;

    var int width;
    var float speed;
    var float counter;
do
    var _WorldObj&? conveyor_belt = _PTR2REF(me);
    global:world:add_object(&this);

    finalize with
        _delete_obj(conveyor_belt);
        _delete_obj(left_sur);
        _delete_obj(right_sur);
        _delete_obj(middle_sur);
    end;

    par/or do
        every gc in e_DRAW do
            _gc_color_draw2(gc, &left_sur, conveyor_belt.pos);

            loop/100 i in width do
                _gc_color_draw2(gc, &middle_sur,
                    _Vector3f(
                        (float)(conveyor_belt.pos.x + (float)(left_sur.get_width() + i*middle_sur.get_width())),
                        (float)conveyor_belt.pos.y
                    ));
            end

            _gc_color_draw2(gc, &right_sur,
                _Vector3f(
                    (float)(conveyor_belt.pos.x + (float)(left_sur.get_width() + width*middle_sur.get_width())),
                    (float)conveyor_belt.pos.y
                ));
        end
    with
        every e_STARTUP do
            var _CollisionMask* mask = _new_CollisionMask("worldobjs/conveyorbelt_cmap");

            loop/100 i in width+2 do
                _world_put(conveyor_belt.world, mask, (int)conveyor_belt.pos.x + 15*i, (int)conveyor_belt.pos.y, _GT_SOLID);
            end

            _delete_obj(mask);
        end
    with
        every e_UPDATE do
            left_sur.update();
            middle_sur.update();
            right_sur.update();

            loop pingu in global:world:get_pingus():all_pingus do
                if pingu:get_x() > conveyor_belt.pos.x and pingu:get_x() < conveyor_belt.pos.x + 15*(float)(width+2) and
                   pingu:get_y() > conveyor_belt.pos.y-2 and pingu:get_y() < conveyor_belt.pos.y+10 then
                    var Vector3f pos;
                    pos.x = pingu:get_pos().x - speed*0.025;
                    pos.y = pingu:get_pos().y;
                    pos.z = pingu:get_pos().z;
                    pingu:set_pos(_toVector3f(pos));
                end
            end
        end
    with
        await e_DELETE;
    end
end

#endif
