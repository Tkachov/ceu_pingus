#ifndef TELEPORTER_CEU
#define TELEPORTER_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../math/vector3f.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../pingu_holder_listener.ceu"
#include "iteleporter_target.ceu"

class Teleporter with
    interface IWorldObj;
    var _Sprite&? sprite;
    var _String&? target_id;
do
    var _WorldObj&? teleporter = _PTR2REF(me);
    global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end;

    finalize with
        _delete_obj(teleporter);
        _delete_obj(sprite);
        _delete_obj(target_id);
    end;

    var ITeleporterTarget* target = null;

    par/or do
         every e_STARTUP do
            if target_id.empty() then
                _log_error("target-id is empty");
            else
                //original FIXME: find the target
                target = _PTR2REF(global:world:get_teleporter_target(target_id.c_str()));
                if target == null then
                    _log_error("Teleporter: Couldn't find matching target-id or object isn't a TeleporterTarget");
                end
            end
        end
    with
        every gc in e_DRAW do
            _gc_color_draw2(gc, &sprite, teleporter.pos);
        end
    with
        every e_UPDATE do
            sprite.update();

            if target != null then
                loop pingu in global:world:get_pingus():all_pingus do
                    if pingu:get_x() > teleporter.pos.x-3 and pingu:get_x() < teleporter.pos.x+3 and
                       pingu:get_y() > teleporter.pos.y-52 and pingu:get_y() < teleporter.pos.y then
                        pingu:set_posf(target:me:get_pos().x, target:me:get_pos().y);
                        target:teleporter_used();
                        sprite.restart();
                    end
                end
            end
        end
    with
        await e_DELETE;
    end
end

#endif
