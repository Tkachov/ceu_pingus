#ifndef TELEPORTER_CEU
#define TELEPORTER_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/sprite3.ceu"
#include "../../math/vector3f.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../pingu_holder_listener.ceu"
#include "iteleporter_target.ceu"

class Teleporter with
    interface IWorldObj;
    var _std__string&? target_id;
do
    var Sprite3 sprite with
        this.pos_giver = outer;
    end;
    sprite.reload_by_name("worldobjs/teleporter");

    call/rec global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end;

    function (void) => float get_z_pos do return pos.z; end
    function (Vector3f p) => void set_pos do pos = p; end
    function (void) => Vector3f get_pos do return pos; end

    finalize with _delete_obj(target_id); end;

    var ITeleporterTarget* target = null;

    par/or do
         every e_STARTUP do
            if target_id.empty() then
                _log_error("target-id is empty");
            else
                //original FIXME: find the target
                target = _PTR2REF(global:world:get_teleporter_target(target_id.c_str()));
                if target == null then
                    _log_error("Teleporter: Couldn't find matching target-id or object isn't a TeleporterTarget");
                end
            end
        end
    with
        every e_UPDATE do
            if target != null then
                loop pingu in global:world:get_pingus():all_pingus do
                    if pingu:get_x() > pos.x-3 and pingu:get_x() < pos.x+3 and
                       pingu:get_y() > pos.y-52 and pingu:get_y() < pos.y then
                        pingu:set_posf(target:get_pos().x, target:get_pos().y);
                        target:teleporter_used();
                        sprite.restart();
                    end
                end
            end
        end
    with
        await e_DELETE;
    end
end

#endif
