#ifndef TELEPORTER_CEU
#define TELEPORTER_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../math/vector3f.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../pingu_holder_listener.ceu"

native/pre do
    ##include "pingus/worldobjs/teleporter_target.hpp"
    ##define WTeleporterTarget WorldObjs::TeleporterTarget
    ##define dynamic_cast_TeleporterTarget(x) dynamic_cast<WorldObjs::TeleporterTarget*>(x)
end

native @pure _dynamic_cast_TeleporterTarget();

class Teleporter with
    interface IWorldObj;
    var _Sprite&? sprite;
    var _String&? target_id;
do
    var _WorldObj&? teleporter = _PTR2REF(me);

    //delete teleporter
    finalize with _delete_obj(sprite); end;
    finalize with _delete_obj(target_id); end;

    var _WTeleporterTarget* target = null;

    par/or do
         every wo in WORLDOBJ_STARTUP do
            if wo != &teleporter then
                continue;
            end

            if target_id.empty() then
                _log_error("target-id is empty");
            else
                //original FIXME: find the target
                target = _dynamic_cast_TeleporterTarget(teleporter.world:get_worldobj(target_id.c_str()));
                if not target then
                    _log_error("Teleporter: Couldn't find matching target-id or object isn't a TeleporterTarget");
                end
            end
        end
    with
        every package in WORLDOBJ_DRAW do
            if package:worldobj != &teleporter then
                continue;
            end

            _gc_color_draw2(package:gc, &sprite, teleporter.pos);
        end
    with
        every w in WORLD_UPDATE do
            if w != teleporter.world then
                continue;
            end

            sprite.update();

            if target then
                loop pingu in global:world:get_pingus():all_pingus do
                    if pingu:get_x() > teleporter.pos.x-3 and pingu:get_x() < teleporter.pos.x+3 and
                       pingu:get_y() > teleporter.pos.y-52 and pingu:get_y() < teleporter.pos.y then
                        pingu:set_posf(target:get_pos().x, target:get_pos().y);
                        target:teleporter_used();
                        sprite.restart();
                    end
                end
            end
        end
    with
        var _WorldObj* e = await DELETE_WORLDOBJ until (e == &teleporter);
    end
end

#endif
