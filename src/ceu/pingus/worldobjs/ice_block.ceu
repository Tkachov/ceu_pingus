#ifndef ICE_BLOCK_CEU
#define ICE_BLOCK_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../math/vector3f.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../pingu_holder_listener.ceu"

class IceBlock with
    interface IWorldObj;
    var int width;

    var _Sprite&? block_sur;
    var _CollisionMask&? block_sur_cmap;
do
    call/rec global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end;

    function (void) => float get_z_pos do
        return pos.z;
    end

    function (Vector3f p) => void set_pos do
        pos = p;
    end

    function (void) => Vector3f get_pos do
        return pos;
    end

    finalize with
        _delete_obj(block_sur);
        _delete_obj(block_sur_cmap);
    end

    var float thickness = 1.0;
    var bool is_finished = false;
    var int last_contact = 0;

    par/or do
        every e_STARTUP do
            global:world:put(&block_sur_cmap, pos.x, pos.y, _GT_GROUND);
        end
    with
        every gc in e_DRAW do
            if not is_finished then
                _gc_color_draw2(gc, &block_sur, _toVector3f(pos));
            end
        end
    with
        every e_UPDATE do
            if is_finished then
                continue;
            end

            loop pingu in global:world:get_pingus():all_pingus do
                if pingu:get_x() > pos.x and pingu:get_x() < pos.x+(float)block_sur.get_width() and
                   pingu:get_y() > pos.y-4 and pingu:get_y() < pos.y+(float)block_sur.get_height() then
                    last_contact = global:world:get_time();
                end
            end

            if last_contact and last_contact+1000 > global:world:get_time() then
                thickness = thickness - 0.01;

                if thickness<0 then
                    is_finished = true;
                    thickness = 0;
                    global:world:remove(&block_sur_cmap, pos.x, pos.y);
                end
            end
        end
    with
        await e_DELETE;
    end
end

#endif
