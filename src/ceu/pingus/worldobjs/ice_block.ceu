#ifndef ICE_BLOCK_CEU
#define ICE_BLOCK_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/sprite3.ceu"
#include "../../math/vector3f.ceu"
#include "../iworld.ceu"
#include "../worldobj.ceu"
#include "../ipingu_holder.ceu"
#include "../global_interface.ceu"

class IceBlock with
    interface IWorldObj;
    var int width;
do
    var _CollisionMask&? block_sur_cmap = _new_CollisionMask("worldobjs/iceblock_cmap");
    finalize with _delete_obj(block_sur_cmap); end

    call/rec global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end;
    function (void) => float get_z_pos do return pos.z; end
    function (Vector3f p) => void set_pos do pos = p; end
    function @rec (void) => Vector3f get_pos do return pos; end

    var float thickness = 1.0;
    var int last_contact = 0;

    par/or do
        every e_STARTUP do
            global:world:put(&block_sur_cmap, pos.x, pos.y, _GT_GROUND);
        end
    with
        //not finished
        do
            var Sprite3 block_sur with
                this.pos_giver = outer;
            end;
            block_sur.reload_by_name("worldobjs/iceblock");

            loop do
                await global:world:update;
                
                loop pingu in global:world:get_pingus().all_pingus do
                    if pingu:get_x() > pos.x and pingu:get_x() < pos.x+(float)block_sur.get_width() and
                       pingu:get_y() > pos.y-4 and pingu:get_y() < pos.y+(float)block_sur.get_height() then
                        last_contact = global:world:get_time();
                    end
                end

                if last_contact and last_contact+1000 > global:world:get_time() then
                    thickness = thickness - 0.01;

                    if thickness<0 then
                        break;                        
                    end
                end
            end
        end

        //finished
        global:world:remove(&block_sur_cmap, pos.x, pos.y);
        await FOREVER;
    with
        await e_DELETE;
    end
end

#endif
