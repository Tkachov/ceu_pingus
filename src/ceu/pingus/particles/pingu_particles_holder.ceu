#ifndef PINGU_PARTICLES_HOLDER_CEU
#define PINGU_PARTICLES_HOLDER_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../pingu_holder_listener.ceu"
#include "../worldobj.ceu"
#include "ipingu_particles_holder.ceu"

native/pre do
    ##include "pingus/particles/pingu_particles_holder.hpp"

    ##define Vector_PinguParticle std::vector<PinguParticle>
    ##define new_Vector_PinguParticle() new std::vector<PinguParticle>()

    ##define PPH_add_particle(a, b, c) Particles::PinguParticleHolder_add_particle(a, b, c)
    ##define PPH_update(a, b) Particles::PinguParticleHolder_update(a, b)
    ##define PPH_draw(a, b, c) Particles::PinguParticleHolder_draw(a, b, c)
end

native @pure _new_Vector_PinguParticle(),
             _PPH_add_particle(),
             _PPH_update(),
             _PPH_draw();

class PinguParticlesHolder with
    interface IPinguParticlesHolder;

    var _Sprite&? sprite;
    var _Vector_PinguParticle&? particles;
do    
    call/rec global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end;

    function (void) => float get_z_pos do return 1000; end
    function (Vector3f p) => void set_pos do end
    function (void) => Vector3f get_pos do return pos; end

    finalize with
        _delete_obj(sprite);
        _delete_obj(particles);
    end

    function (int x, int y) => void add_particle do
        _PPH_add_particle(particles, x, y);
    end

    par/or do
        every gc in e_DRAW do
           _PPH_draw(particles, gc, sprite);
        end
    with
        every e_UPDATE do
            _PPH_update(particles, _WorldObj__get_world());
        end
    with
        await e_DELETE;
    end
end

#endif
