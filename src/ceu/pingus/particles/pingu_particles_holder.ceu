#ifndef PINGU_PARTICLES_HOLDER_CEU
#define PINGU_PARTICLES_HOLDER_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../global_interface.ceu"
#include "../worldobj.ceu"
#include "particles.ceu"

class PinguParticlesHolder with
    interface IPinguParticlesHolder;
do
    var _Vector_PinguParticle&? particles = _PTR2REF(_new_Vector_PinguParticle());
    var Sprite sprite;
    call/rec sprite.reload_by_name("particles/pingu_explo");
    finalize with _delete_obj(particles); end

    call/rec global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end
    function (void) => float get_z_pos do return 1000; end
    function (Vector3f p) => void set_pos do end
    function @rec (void) => Vector3f get_pos do return pos; end

    function @rec (int x, int y) => void add_particle do
        var int i = 0;

        // fill gaps from dead entries
        loop j in particles.size() do
            var _PinguParticle&? it = _get_particle(particles, j);

            if not it.livetime then
                it = _makePinguParticle(x, y);
                i = i + 1;
            end
        end

        // allocate space for all remaining particles at once
        particles.reserve(particles.size()+50-i);

        // create remaining entries
        loop/51 do
            if i >= 50 then
                break;
            end

            particles.push_back(_makePinguParticle(x, y));
            i = i + 1;
        end
    end

    par/or do
        every gc in global:draw do
           loop i in particles.size() do
                var _PinguParticle&? it = _get_particle(particles, i);

                // skip dead particles
                if not it.livetime then
                    continue;
                end

                gc:color().draw(_deref(sprite.get()), it.pos) finalize with end;
            end
        end
    with
        every global:world:update do
            var float x_collision_decrease = 0.3;
            var float y_collision_decrease = 0.6;

            // update all contained particles
            loop i in particles.size() do
                var _PinguParticle&? it = _get_particle(particles, i);

                // skip dead particles
                if not it.livetime then
                    continue;
                end

                var float tmp_x_add = 0.0;
                var float tmp_y_add = 0.0;

                // Simulated gravity
                it.velocity.y = it.velocity.y + global:world:get_gravity();

                if it.velocity.y > 0 then
                    tmp_y_add = it.velocity.y;

                    loop/1000 do
                        if tmp_y_add < 1.0 then
                            break;
                        end

                        if global:world:get_colmap():getpixel(it.pos.x, it.pos.y) finalize with end then
                            it.velocity.y = it.velocity.y * (-y_collision_decrease);
                            tmp_y_add = -tmp_y_add;
                            it.pos.y = it.pos.y - 1;
                            break;
                        end

                        it.pos.y = it.pos.y + 1;
                        tmp_y_add = tmp_y_add - 1;
                    end

                    it.pos.y = it.pos.y + tmp_y_add;
                else
                    tmp_y_add = it.velocity.y;

                    loop/1000 do
                        if tmp_y_add > -1.0 then
                            break;
                        end

                        if global:world:get_colmap():getpixel(it.pos.x, it.pos.y) finalize with end then
                            it.velocity.y = it.velocity.y * (-y_collision_decrease);
                            tmp_y_add = -tmp_y_add;
                            it.pos.y = it.pos.y + 1;
                            break;
                        end

                        it.pos.y = it.pos.y - 1;
                        tmp_y_add = tmp_y_add + 1;
                    end

                    it.pos.y = it.pos.y + tmp_y_add;
                end

                if it.velocity.x > 0 then
                    tmp_x_add = it.velocity.x;

                    loop/1000 do
                        if tmp_x_add < 1.0 then
                            break;
                        end

                        if global:world:get_colmap():getpixel(it.pos.x, it.pos.y) finalize with end then
                            it.velocity.x = it.velocity.x * (-x_collision_decrease);
                            tmp_x_add = -tmp_x_add;
                            it.pos.x = it.pos.x - 1;
                            break;
                        end

                        it.pos.x = it.pos.x + 1;
                        tmp_x_add = tmp_x_add - 1;
                    end

                    it.pos.x = it.pos.x + tmp_x_add;
                else
                    tmp_x_add = it.velocity.x;

                    loop/1000 do
                        if tmp_x_add > -1.0 then
                            break;
                        end

                        if global:world:get_colmap():getpixel(it.pos.x, it.pos.y) finalize with end then
                            it.velocity.x = it.velocity.x * (-x_collision_decrease);
                            tmp_x_add = -tmp_x_add;
                            it.pos.x = it.pos.x + 1;
                            break;
                        end

                        it.pos.x = it.pos.x - 1;
                        tmp_x_add = tmp_x_add + 1;
                    end

                    it.pos.x = it.pos.x + tmp_x_add;
                end


                it.livetime = it.livetime - 1;
            end
        end
    with
        await e_DELETE;
    end
end

#endif
