#ifndef SNOW_PARTICLES_HOLDER_CEU
#define SNOW_PARTICLES_HOLDER_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../pingu_holder_listener.ceu"
#include "../worldobj.ceu"
#include "particles.ceu"

class SnowParticlesHolder with
    interface ISnowParticlesHolder;
do
    var _Vector_SnowParticle&? particles = _PTR2REF(_new_Vector_SnowParticle());
    var _CollisionMask&? ground = _PTR2REF(_new_CollisionMask("particles/ground_snow"));
    var Sprite snow1;
    var Sprite snow2;
    var Sprite snow3;
    var Sprite snow4;
    var Sprite snow5;
    call/rec snow1.reload_by_name("particles/snow1");
    call/rec snow2.reload_by_name("particles/snow2");
    call/rec snow3.reload_by_name("particles/snow3");
    call/rec snow4.reload_by_name("particles/snow4");
    call/rec snow5.reload_by_name("particles/snow5");
    finalize with
        _delete_obj(particles);
        _delete_obj(ground);
    end

    call/rec global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end
    function (void) => float get_z_pos do return 1000; end
    function (Vector3f p) => void set_pos do end
    function (void) => Vector3f get_pos do return pos; end

    function @rec (int x, int y, bool c) => void add_particle do
        //default c == false
        // search for dead entry to replace
        loop j in particles.size() do
            var _SnowParticle&? it = _get_particle(particles, j);

            if not it.alive then
                it = _makeSnowParticle(x, y, c);
                return;
            end
        end

        // create new entry
        particles.push_back(_makeSnowParticle(x, y, c));
    end

    par/or do
        every gc in e_DRAW do
            loop j in particles.size() do
                var _SnowParticle&? it = _get_particle(particles, j);

                if not it.alive then
                    continue;
                end

                if it.type == _Snow1 then gc:color().draw(_deref(snow1.get()), it.pos) finalize with end;
                else/if it.type == _Snow2 then gc:color().draw(_deref(snow2.get()), it.pos) finalize with end;
                else/if it.type == _Snow3 then gc:color().draw(_deref(snow3.get()), it.pos) finalize with end;
                else/if it.type == _Snow4 then gc:color().draw(_deref(snow4.get()), it.pos) finalize with end;
                else/if it.type == _Snow5 then gc:color().draw(_deref(snow5.get()), it.pos) finalize with end;
                else _assert(not "Invalid Snow-Type"); end
            end
        end
    with
        every e_UPDATE do
            // update all contained particles
            loop j in particles.size() do
                var _SnowParticle&? it = _get_particle(particles, j);

                // skip dead particles
                if not it.alive then
                    continue;
                end

                it.pos.x = it.pos.x + it.velocity.x;
                it.pos.y = it.pos.y + it.velocity.y;

                if it.pos.y > global:world:get_height() then
                    it.alive = false;
                end

                if not it.alive then continue; end

                it.velocity.x = it.velocity.x + (_Math__frand() - 0.5)/10;

                if it.colliding then
                    var int pixel = global:world:world:get_colmap():getpixel(it.pos.x, it.pos.y) finalize with end;
                    if pixel != _GT_NOTHING and pixel != _GT_WATER and pixel != _GT_OUTOFSCREEN then
                        global:world:get_gfx_map():put(ground.get_surface(), it.pos.x-1, it.pos.y-1);
                        it.alive = false;
                    end
                end
            end
        end
    with
        await e_DELETE;
    end
end

#endif
