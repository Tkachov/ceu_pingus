#ifndef SMOKE_PARTICLES_HOLDER_CEU
#define SMOKE_PARTICLES_HOLDER_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../global_interface.ceu"
#include "../worldobj.ceu"
#include "particles.ceu"

class SmokeParticlesHolder with
    interface ISmokeParticlesHolder;
do
    var _Vector_SmokeParticle&? particles = _PTR2REF(_new_Vector_SmokeParticle());
    var Sprite surf1;
    var Sprite surf2;
    call/rec surf1.reload_by_name("particles/smoke");
    call/rec surf2.reload_by_name("particles/smoke2");
    finalize with _delete_obj(particles); end

    call/rec global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end
    function (void) => float get_z_pos do return 1000; end
    function (Vector3f p) => void set_pos do end
    function (void) => Vector3f get_pos do return pos; end

    function @rec (int x, int y, float vx, float vy) => void add_particle do
        // search for dead entry to replace
        loop j in particles.size() do
            var _SmokeParticle&? it = _get_particle(particles, j);

            if not it.livetime then
                it = _makeSmokeParticle(x, y, vx, vy);
                return;
            end
        end

        // create new entry
        particles.push_back(_makeSmokeParticle(x, y, vx, vy));
    end

    par/or do
        every gc in global:draw do
            loop j in particles.size() do
                var _SmokeParticle&? it = _get_particle(particles, j);

                if not it.livetime then
                    continue;
                end

                if not it.use_surf2 then
                    gc:color().draw(_deref(surf1.get()), it.pos) finalize with end;
                else
                    gc:color().draw(_deref(surf2.get()), it.pos) finalize with end;
                end
            end
        end
    with
        every e_UPDATE do
            // update all contained particles
            loop j in particles.size() do
                var _SmokeParticle&? it = _get_particle(particles, j);

                // skip dead particles
                if not it.livetime then
                    continue;
                end

                it.pos.x = it.pos.x + it.velocity.x;
                it.pos.y = it.pos.y + it.velocity.y;
                it.pos.z = 1000; //z pos

                it.livetime = it.livetime - 1;
            end
        end
    with
        await e_DELETE;
    end
end

#endif
