#ifndef SMOKE_PARTICLES_HOLDER_CEU
#define SMOKE_PARTICLES_HOLDER_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iworld.ceu"
#include "../pingu_holder_listener.ceu"
#include "../worldobj.ceu"
#include "ismoke_particles_holder.ceu"

native/pre do
    ##include "pingus/particles/smoke_particle_holder.hpp"

    ##define Vector_SmokeParticle std::vector<SmokeParticle>
    ##define new_Vector_SmokeParticle() new std::vector<SmokeParticle>()

    ##define SPH_add_particle(a, b, c, d, e) Particles::SmokeParticleHolder_add_particle(a, b, c, d, e)
    ##define SPH_update(a) Particles::SmokeParticleHolder_update(a)
    ##define SPH_draw(a, b, c, d) Particles::SmokeParticleHolder_draw(a, b, c, d)
end

native @pure _new_Vector_SmokeParticle(),
             _SPH_add_particle(),
             _SPH_update(),
             _SPH_draw();

class SmokeParticlesHolder with
    interface ISmokeParticlesHolder;

    var _Sprite&? surf1;
    var _Sprite&? surf2;
    var _Vector_SmokeParticle&? particles;
do
    var _WorldObj&? holder = _PTR2REF(me);
    emit global:world:get_list():e_INSERT => &this;
    //finalize with _delete_obj(me); end
    finalize with _delete_obj(surf1); end
    finalize with _delete_obj(surf2); end
    finalize with _delete_obj(particles); end

    function (int x, int y, float vx, float vy) => void add_particle do
        _SPH_add_particle(particles, x, y, vx, vy);
    end

    par/or do
        every gc in e_DRAW do
           _SPH_draw(particles, gc, surf1, surf2);
        end
    with
        every w in WORLD_UPDATE do
            if w != holder.world then
                continue;
            end

            _SPH_update(particles);
        end
    with
        var _WorldObj* e = await DELETE_WORLDOBJ until (e == &holder);
    end
end

#endif
