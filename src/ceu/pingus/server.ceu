#ifndef SERVER_CEU
#define SERVER_CEU

#include "../c.ceu"
#include "../sdl.ceu"
#include "world.ceu"
#include "ipingu_holder.ceu"
#include "goal_manager.ceu"
#include "pingu_holder_listener.ceu"

native/pre do
    ##include "pingus/server.hpp"
    ##include "pingus/server_event.hpp"
    ##include "pingus/action_name.hpp"
    ##define ServerEvent__make_pingu_action_event ServerEvent::make_pingu_action_event
    ##define ServerEvent__make_armageddon_event ServerEvent::make_armageddon_event
    ##define ServerEvent__make_finish_event ServerEvent::make_finish_event
    ##define to_AN(x) (ActionName::Enum)x
end

native @pure _init_WORLD();

input _Server* NEW_SERVER;
input _Server* SERVER_ARMAGEDDON;
input _Server* SERVER_FINISH_EVENT;
input _IsFinishedPackage* SERVER_IS_FINISHED;
input _GetTimePackage* SERVER_GET_TIME;
input _Server* SERVER_UPDATE;
input _Server* DELETE_SERVER;

class Server with
    var _Server* me;
    function @rec (IPingu* pingu, int action) => void send_pingu_action_event;
    event void e_ARMAGEDDON;
    event void e_UPDATE;
do
    var GoalManager goal_manager with
        this.server = me;
    end;
    var _Server&? server = _PTR2REF((_Server*)me);
    var Server* self = &this;
    server.ceu_server = (void*)self;

    var World world with
        this.pingus_level = _PTR2REF(&me:plf);
        global:world = &this;
    end;

    function @rec (IPingu* pingu, int action) => void send_pingu_action_event do
        server.record(
            _ServerEvent__make_pingu_action_event(
                server.get_time(),
                pingu:get_id(),
                pingu:get_pos(),
                _to_AN(action)
            )
        );

        if server.action_holder.pop_action(_to_AN(action)) then
            if not call/rec pingu:request_set_action(action) then
                server.action_holder.push_action(_to_AN(action));
            end
        end
    end

    par/or do
        every s in SERVER_ARMAGEDDON do
            if s != &server then
                continue;
            end

            //TODO: remove after GameSession is ported

            emit e_ARMAGEDDON;
        end
    with
        every e_ARMAGEDDON do
            server.record(
                _ServerEvent__make_armageddon_event(
                    server.get_time()
                )
            );

            emit world.e_ARMAGEDDON;
        end
    with
        every s in SERVER_FINISH_EVENT do
            if s != &server then
                continue;
            end

            server.record(
                _ServerEvent__make_finish_event(
                    server.get_time()
                )
            );
            goal_manager.set_abort_goal();
        end
    with
        every package in SERVER_IS_FINISHED do
            if package:server != &server then
                continue;
            end

            package:is_finished = goal_manager.is_finished();
        end
    with
        every package in SERVER_GET_TIME do
            if package:server != &server then
                continue;
            end

            package:time = global:world:get_time();
        end
    with
        every e_UPDATE do
            _printf("Ceu e_UPDATE\n");
            emit world.e_UPDATE;
            emit goal_manager.e_UPDATE;
        end
    with
        //TODO: remove (used because `update()` is also called from C++ DemoSession which is not ported yet)
        every s in SERVER_UPDATE do
            _printf("C++ update()\n");
            if s != &server then
                continue;
            end

            emit world.e_UPDATE;
            emit goal_manager.e_UPDATE;
        end
    with
        var _Server* e = await DELETE_SERVER until (e == &server);
        //emit world.e_DELETE;
    end
end

#endif
