#ifndef SERVER_CEU
#define SERVER_CEU

#include "../c.ceu"
#include "../sdl.ceu"
#include "world.ceu"
#include "ipingu_holder.ceu"
#include "iserver.ceu"
#include "goal_manager.ceu"
#include "global_interface.ceu"

native/pre do
    ##include "pingus/server.hpp"
    ##include "pingus/server_event.hpp"
    ##include "pingus/action_name.hpp"
    ##define ServerEvent__make_pingu_action_event ServerEvent::make_pingu_action_event
    ##define ServerEvent__make_armageddon_event ServerEvent::make_armageddon_event
    ##define ServerEvent__make_finish_event ServerEvent::make_finish_event
    ##define to_AN(x) (ActionName::Enum)x

    ##include "pingus/screens/demo_session.hpp"
    ##define ESPackage DemoSession::EventSendPackage

    ##define SE_ARMAGEDDON_EVENT ServerEvent::ARMAGEDDON_EVENT
    ##define SE_FINISH_EVENT ServerEvent::FINISH_EVENT
    ##define SE_END_EVENT ServerEvent::END_EVENT
    ##define SE_PINGU_ACTION_EVENT ServerEvent::PINGU_ACTION_EVENT

    ##define std__endl std::endl
    ##define stream_print(s, v) *s << v
end

native @pure _stream_print();

input _Server* SERVER_UPDATE;

class Server with
    interface IServer;    
    function @rec (void) => bool is_finished;    
    event _ServerEvent* e_EVENT_SEND;    
    event void e_FINISH_EVENT;
    event void e_UPDATE;
    event void e_DELETE;    
do
    var GoalManager goal_manager with
        this.server = outer;
    end;
    var _Server&? server = _PTR2REF((_Server*)me);    

    var World world with
        this.pingus_level = _PTR2REF(&me:plf);
        global:world = &this;
    end;

    emit world.e_CREATE;

    function (_ServerEvent e) => void record do
        if server.demostream.get() then
            e.write(_deref(server.demostream));
        end
    end

    function @rec (void) => bool is_finished do
        return call/rec goal_manager.is_finished();
    end

    function @rec (void) => int get_time do
        return global:world:get_time();
    end

    function (void) => _PingusLevel get_plf do
        return server.plf;
    end

    par/or do
        every (server_event, p) in do_pingu_action_event do
            if p then
                if _Math__abs(server_event:pos.x - (call/rec p:get_pos()).x)>1 or _Math__abs(server_event:pos.y - (call/rec p:get_pos()).y)>1 then
                //if server_event:pos.x != (call/rec p:get_pos()).x or server_event:pos.y != (call/rec p:get_pos()).y then
                    //_log_error("DemoFile inconsistent with world, pingu %1% is at the wrong position", server_event:pingu_id);
                    _printf("DIFF: %f %f\n", server_event:pos.x - (call/rec p:get_pos()).x, server_event:pos.y - (call/rec p:get_pos()).y);
                    _printf("wanted (%f %f)\n", server_event:pos.x, server_event:pos.y);
                end

                emit send_pingu_action_event => (p, server_event:pingu_action);
            else
                _log_error("DemoFile inconsistent with world, pingu %1% missing", server_event:pingu_id);
            end
        end
    with
        every (pingu, action) in send_pingu_action_event do
            _printf("%d: pingu #%d action %d\n", call/rec get_time(), pingu:get_id(), action);
            record(
                _ServerEvent__make_pingu_action_event(
                    call/rec get_time(),
                    pingu:get_id(),
                    _toVector3f(call/rec pingu:get_pos()),
                    _to_AN(action)
                )
            );

            if server.action_holder.pop_action(_to_AN(action)) then
                var _SetActionPackage package;
                package.action = action;            
                emit pingu:request_set_action => &package;
                if not package.result then 
                    server.action_holder.push_action(_to_AN(action));
                end
            end
        end
    with
        every server_event in e_EVENT_SEND do
            if server_event:type == _SE_ARMAGEDDON_EVENT then
                emit e_ARMAGEDDON;
            else/if server_event:type == _SE_FINISH_EVENT then
                emit e_FINISH_EVENT;
            else/if server_event:type == _SE_END_EVENT then
                // do nothing
            else/if server_event:type == _SE_PINGU_ACTION_EVENT then
                emit do_pingu_action_event => (server_event, call/rec global:world:get_pingus():get_pingu(server_event:pingu_id));
            else
                _assert(not "Unknown type");
            end
        end
    with
        every e_ARMAGEDDON do
            record(
                _ServerEvent__make_armageddon_event(
                    call/rec get_time()
                )
            );

            emit world.e_ARMAGEDDON;
        end
    with
        every e_FINISH_EVENT do
            record(
                _ServerEvent__make_finish_event(
                    call/rec get_time()
                )
            );
            goal_manager.set_abort_goal();
        end
    with
        every e_UPDATE do
            ////_printf("Ceu e_UPDATE\n");
            emit world.e_UPDATE;
            emit goal_manager.e_UPDATE;
        end
    with
        //TODO: remove (used because `update()` is also called from C++ DemoSession which is not ported yet)
        every s in SERVER_UPDATE do
            ////_printf("C++ update()\n");
            if s != &server then
                continue;
            end

            emit world.e_UPDATE;
            emit goal_manager.e_UPDATE;
        end
    with
        await e_DELETE;

        //original FIXME: Any better place to put this? 
        if server.demostream.get() then
            //(*demostream) << "(end (time " << get_time() << "))" << std::endl;  
            _stream_print(server.demostream, "(end (time ");
            _stream_print(server.demostream, call/rec get_time());
            _stream_print(server.demostream, "))");
            _stream_print(server.demostream, _std__endl);
        end

        emit world.e_DELETE;
    end
end

#endif
