#ifndef PINGU_CEU
#define PINGU_CEU

#include "../c.ceu"
#include "../sdl.ceu"
#include "actions/basheraction.ceu"
#include "actions/bomberaction.ceu"
#include "actions/diggeraction.ceu"
#include "actions/exiteraction.ceu"
#include "actions/falleraction.ceu"
#include "actions/floateraction.ceu"
#include "actions/jumperaction.ceu"
#include "actions/splashedaction.ceu"
#include "actions/walkeraction.ceu"
#include "iaction.ceu"
#include "ipingu.ceu"

native/pre do
    ##include "pingus/pingu.hpp"
    ##define A_Enum(x) (ActionName::Enum)(x)
    ##define std__shared_ptr_PinguAction std::shared_ptr<PinguAction>
    ##define pingu_set_action(p, a) p->set_action(a)
end

native @pure _std__shared_ptr_PinguAction(),
             _pingu_set_action();

input _PinguAction* PINGU_SET_ACTION;
input _Pingu* PINGU_UPDATE;

class Pingu with
    interface IPingu;
    event _PinguAction* e_CHANGE_ACTION;
do
    var _Pingu&? me_ = _PTR2REF((_Pingu*)&this.me);
    var _PinguAction* current_action = null;

    par/or do
        //pass update() call
        every p in PINGU_UPDATE do
            if p == &me_ then
                emit e_UPDATE_CALLED;
            end
        end
    with
        every e_UPDATE_CALLED do
            if me_.status == _PS_DEAD then
                continue;
            end

            // original FIXME: Out of screen check is ugly
            // The Pingu has hit the edge of the screen, a good time to let him die.
            if me_.rel_getpixel(0, -1) == _GT_OUTOFSCREEN then
                //Sound::PingusSound::play_sound("die");
                me_.status = _PS_DEAD;
                continue;
            end

            me_.action:update();
        end
    with
        //notify about set_action() call
        every a_ in PINGU_SET_ACTION do
            var _PinguAction&? a = _PTR2REF(a_);
            if a.pingu == &me_ then
                emit e_CHANGE_ACTION => a_;
            end
        end
    with
        //wait for e_CHANGE_ACTION and create an instance
        loop do
            watching current_action in e_CHANGE_ACTION do
                var _PinguAction&? ref = _PTR2REF(current_action);
                if &ref == null then
                else/if ref.get_type() == _A_BASHER then
                    do BasherAction with
                        this.pingu = outer;
                        this.me = &ref;
                    end;
                else/if ref.get_type() == _A_BOMBER then
                    do BomberAction with
                        this.pingu = outer;
                        this.me = &ref;
                    end;
                else/if ref.get_type() == _A_DIGGER then
                    do DiggerAction with
                        this.pingu = outer;
                        this.me = &ref;
                    end;
                else/if ref.get_type() == _A_EXITER then
                    do ExiterAction with
                        this.pingu = outer;
                        this.me = &ref;
                    end;
                else/if ref.get_type() == _A_FALLER then
                    do FallerAction with
                        this.pingu = outer;
                        this.me = &ref;
                    end;
                else/if ref.get_type() == _A_FLOATER then
                    do FloaterAction with
                        this.pingu = outer;
                        this.me = &ref;
                    end;
                else/if ref.get_type() == _A_JUMPER then
                    do JumperAction with
                        this.pingu = outer;
                        this.me = &ref;
                    end;
                else/if ref.get_type() == _A_SPLASHED then
                    do SplashedAction with
                        this.pingu = outer;
                        this.me = &ref;
                    end;
                else/if ref.get_type() == _A_WALKER then
                    do WalkerAction with
                        this.pingu = outer;
                        this.me = &ref;
                    end;
                end;

                await FOREVER;
            end
        end
    with
        //wait for e_CALL_SET_ACTION and call C++'s set_action()
        every a in e_CALL_SET_ACTION do
            me_.set_action(_A_Enum(a));
        end
    with
        await SDL_QUIT;
    end
end

#endif
