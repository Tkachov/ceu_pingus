#ifndef PINGU_CEU
#define PINGU_CEU

#include "../c.ceu"
#include "../sdl.ceu"
#include "actions/walkeraction.ceu"
#include "iaction.ceu"
#include "ipingu.ceu"

native/pre do
    ##include "pingus/pingu.hpp"
    ##define A_Enum(x) (ActionName::Enum)(x)
    ##define A_WALKER ActionName::WALKER    
end

input _PinguAction* NEW_ACTION;
input _PinguAction* PINGU_SET_ACTION;
input _Pingu* PINGU_UPDATE;

class Pingu with
    interface IPingu;
do
    var _Pingu&? me_ = _PTR2REF((_Pingu*)&this.me);
    var int current_action = _A_WALKER;  // default action

    par/or do
        //pass update() call
        every p in PINGU_UPDATE do
            if p == &me_ then
                emit e_UPDATE_CALLED;
            end
        end
    with
        //notify about set_action() call
        every a_ in PINGU_SET_ACTION do
            var _PinguAction&? a = _PTR2REF(a_);
            if a.pingu == &me_ then                
                emit e_CHANGE_ACTION => a.get_type();
            end
        end
    with
        //wait for e_CHANGE_ACTION and create an instance
        loop do
            par/or do
                current_action = await e_CHANGE_ACTION;
            with
                if current_action == _A_WALKER then
                    do WalkerAction with this.pingu = outer; end;
                end;

                await FOREVER;
            end
        end
    with
        //wait for e_CALL_SET_ACTION and call C++'s set_action()
        every a in e_CALL_SET_ACTION do
            me_.set_action(_A_Enum(a));
        end        
    with
        await SDL_QUIT;
    end    
end

#endif
