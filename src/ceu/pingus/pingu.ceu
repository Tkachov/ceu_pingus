#ifndef PINGU_CEU
#define PINGU_CEU

#include "../c.ceu"
#include "../sdl.ceu"
#include "actions/basheraction.ceu"
#include "actions/bomberaction.ceu"
#include "actions/blockeraction.ceu"
#include "actions/bridgeraction.ceu"
#include "actions/climberaction.ceu"
#include "actions/diggeraction.ceu"
#include "actions/drownaction.ceu"
#include "actions/exiteraction.ceu"
#include "actions/falleraction.ceu"
#include "actions/floateraction.ceu"
#include "actions/jumperaction.ceu"
#include "actions/mineraction.ceu"
#include "actions/splashedaction.ceu"
#include "actions/waiteraction.ceu"
#include "actions/walkeraction.ceu"
#include "iaction.ceu"
#include "ipingu.ceu"

native/pre do
    ##include "pingus/pingu.hpp"
    ##define A_Enum(x) (ActionName::Enum)(x)
    ##define call_draw(a, gc) a->draw(*gc)
end

native @pure _call_draw();

input _PinguAction* PINGU_SET_ACTION;
input void PINGU_UPDATE_ALL;
input _SceneContext* PINGU_DRAW_WALKER;
input _SceneContext* PINGU_DRAW_OTHERS;

class Pingu with
    interface IPingu;
    event int e_CHANGE_ACTION;
do
    function (int a) => _PinguAction* set_ptr do
        action = _PTR2REF(me.create_action2((ActionName_Enum)a));
        me.replace_action(action); //delete in there
        return action;
    end

    var _Pingu&? me_ = _PTR2REF((_Pingu*)&this.me);
    var int current_action = _A_FALLER;
    set_ptr(_A_FALLER);

    par/or do
        //pass update() call
        every PINGU_UPDATE_ALL do
            if me_.status == _PS_DEAD then
                continue;
            end

            // original FIXME: Out of screen check is ugly
            // The Pingu has hit the edge of the screen, a good time to let him die.
            if me_.rel_getpixel(0, -1) == _GT_OUTOFSCREEN then
                //Sound::PingusSound::play_sound("die");
                me_.status = _PS_DEAD;
                continue;
            end

            //action:update();
            emit e_UPDATE_CALLED;
        end
    with
        every gc in PINGU_DRAW_WALKER do
            if me_.status != _PS_ALIVE then
                continue;
            end
            if current_action == _A_WALKER then
                emit e_DRAW_CALLED => gc;
                _call_draw(action, gc);
            end
        end
    with
        every gc in PINGU_DRAW_WALKER do
            if me_.status != _PS_ALIVE then
                continue;
            end
            if current_action != _A_WALKER then
                emit e_DRAW_CALLED => gc;
                _call_draw(action, gc);
            end
        end
    with
        //notify about set_action() call
        every a_ in PINGU_SET_ACTION do
            var _PinguAction&? a = _PTR2REF(a_);
            if a.pingu == &me_ then
                emit e_CHANGE_ACTION => a.get_type();
            end
        end
    with
        //wait for e_CHANGE_ACTION and create an instance
        loop do
            watching current_action in e_CHANGE_ACTION do
                if false then
                else/if current_action == _A_BASHER then
                    current_action = do BasherAction with
                        this.pingu = outer;
                    end;
                else/if current_action == _A_BOMBER then
                    current_action = do BomberAction with
                        this.pingu = outer;
                    end;
                else/if current_action == _A_BLOCKER then
                    current_action = do BlockerAction with
                        this.pingu = outer;
                    end;
                else/if current_action == _A_BRIDGER then
                    current_action = do BridgerAction with
                        this.pingu = outer;
                    end;
                else/if current_action == _A_CLIMBER then
                    current_action = do ClimberAction with
                        this.pingu = outer;
                    end;
                else/if current_action == _A_DIGGER then
                    current_action = do DiggerAction with
                        this.pingu = outer;
                    end;
                else/if current_action == _A_DROWN then
                    current_action = do DrownAction with
                        this.pingu = outer;
                    end;
                else/if current_action == _A_EXITER then
                    current_action = do ExiterAction with
                        this.pingu = outer;
                    end;
                else/if current_action == _A_FALLER then
                    current_action = do FallerAction with
                        this.pingu = outer;
                    end;
                else/if current_action == _A_FLOATER then
                    current_action = do FloaterAction with
                        this.pingu = outer;
                    end;
                else/if current_action == _A_JUMPER then
                    current_action = do JumperAction with
                        this.pingu = outer;
                    end;
                else/if current_action == _A_MINER then
                    current_action = do MinerAction with
                        this.pingu = outer;
                    end;
                else/if current_action == _A_SPLASHED then
                    current_action = do SplashedAction with
                        this.pingu = outer;
                    end;
                else/if current_action == _A_WAITER then
                    current_action = do WaiterAction with
                        this.pingu = outer;
                    end;
                else/if current_action == _A_WALKER then
                    current_action = do WalkerAction with
                        this.pingu = outer;
                    end;
                else
                    await FOREVER;
                end

                await PINGU_UPDATE_ALL; //hack
            end
        end
    with
        await SDL_QUIT;
    end
end

#endif
