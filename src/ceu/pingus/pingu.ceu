#ifndef PINGU_CEU
#define PINGU_CEU

#include "../c.ceu"
#include "../sdl.ceu"
#include "../math/math.ceu"
#include "actions/angelaction.ceu"
#include "actions/basheraction.ceu"
#include "actions/blockeraction.ceu"
#include "actions/boarderaction.ceu"
#include "actions/bomberaction.ceu"
#include "actions/bridgeraction.ceu"
#include "actions/climberaction.ceu"
#include "actions/diggeraction.ceu"
#include "actions/drownaction.ceu"
#include "actions/exiteraction.ceu"
#include "actions/falleraction.ceu"
#include "actions/floateraction.ceu"
#include "actions/jumperaction.ceu"
#include "actions/laserkillaction.ceu"
#include "actions/mineraction.ceu"
#include "actions/slideraction.ceu"
#include "actions/splashedaction.ceu"
#include "actions/supermanaction.ceu"
#include "actions/waiteraction.ceu"
#include "actions/walkeraction.ceu"
#include "iaction.ceu"
#include "ipingu.ceu"
#include "pingu_holder_listener.ceu"

native/pre do
    ##define A_Enum(x) (ActionName::Enum)(x)
    ##define PA_get_activation_mode(x) PinguAction::get_activation_mode(x)

    ##include "pingus/collision_map.hpp"

    #define StringUtil__to_string StringUtil::to_string
end

output _SceneContext* PINGU_DRAW_WALKER;
output _SceneContext* PINGU_DRAW_OTHERS;

native @pure _PA_get_activation_mode(), _StringUtil__to_string();

#define DO_ACTION(n, c) \
    else/if current_action == n then \
        current_action = do c with \
            this.pingu = outer; \
        end;

#define PA_INSTANT 0
#define PA_WALL_TRIGGERED 1
#define PA_FALL_TRIGGERED 2

class Pingu with
    interface IPingu;
    var Vector3f velocity;
    var float pos_x;
    var float pos_y;
    var int owner_id;
    var uint id;
do
    finalize with _delete_obj(&direction); end;

    velocity.x = 0;
    velocity.y = 0;
    velocity.z = 0;

    ceu_action = null;
    var int previous_action = _A_FALLER;
    var int current_action = _A_FALLER;

    var int instant_action;
    var bool instant_action_set = false;
    var int fall_action;
    var bool fall_action_set = false;
    var int wall_action;
    var bool wall_action_set = false;

    function (void) => int get_owner do
        return owner_id;
    end

    function (void) => _std__string get_owner_str do
        return _StringUtil__to_string(owner_id);
    end

    function (void) => uint get_id do
        return id;
    end

    function (void) => float get_x do
        return pos_x;
    end

    function (void) => float get_y do
        return pos_y;
    end

    function (void) => _Vector3f get_pos do
        return _Vector3f(pos_x, pos_y, 0);
    end

    function (void) => Vector3f get_ceu_pos do
        var Vector3f p;
        p.x = pos_x;
        p.y = pos_y;
        p.z = 0;
        return p;
    end

    function (float x) => void set_x do
        pos_x = x;
    end

    function (float y) => void set_y do
        pos_y = y;
    end

    function (float x, float y) => void set_posf do
        set_x(x);
        set_y(y);
    end

    function (_Vector3f arg) => void set_pos do
        set_x(arg.x);
        set_y(arg.y);
    end

    function @rec (int x, int y) => int rel_getpixel do
        return global:world:get_colmap():getpixel(
            get_x() + (float)(x * direction),
            get_y() - (float)y
        );
    end

    function @rec (int x, int y) => bool head_collision_on_walk do
        var int pixel = call/rec rel_getpixel(x, y + _pingu_height);

        if pixel != _GT_NOTHING and not (pixel & _GT_BRIDGE) then
            return true;
        end

        return false;
    end

    function @rec (int x, int y) => bool collision_on_walk do
        var bool collision = false;
        var int pixel = _GT_NOTHING;

        loop/100 pingu_y in _pingu_height+1 do
            pixel = call/rec rel_getpixel(x, y + pingu_y);

            if pixel != _GT_NOTHING and pixel != _GT_BRIDGE then
                collision = true;
                break;
            end
        end

        return collision;
    end

    function @rec (void) => Vector3f get_center_pos do
        return call/rec ceu_action:get_center_pos();
    end

    // Returns true if the given koordinates are above the pingu
    function @rec (int x, int y) => bool is_over do
        var Vector3f center = call/rec get_center_pos();
        return (center.x+16 > x and center.x-16 < x and center.y+16 > y and center.y-16 < y);
    end

    function (int x1, int y1, int x2, int y2) => bool is_inside do
        _assert(x1 < x2);
        _assert(y1 < y2);

        return (pos_x > x1 and pos_x < x2 and pos_y > y1 and pos_y < y2);
    end

    function (void) => IPingu& get_ref do
        return this;
    end

    // Returns the distance between the Pingu and a given coordinate
    function @rec (int x, int y) => float dist do
        var Vector3f p = call/rec get_center_pos();
        return _Math__sqrt( (p.x - (float)x)*(p.x - (float)x) + (p.y - (float)y)*(p.y - (float)y) );
    end

    function (void) => bool has_fall_action do
        return fall_action_set;
    end

    function (void) => bool has_wall_action do
        return wall_action_set;
    end

    function (void) => int get_fall_action do
        return fall_action;
    end

    function (void) => int get_wall_action do
        return wall_action;
    end

    function (void) => int get_previous_action do
        return previous_action;
    end

    function (void) => int get_current_action do
        return current_action;
    end

    function (int name) => int get_activation_mode do
        if name == _A_CLIMBER then
            return PA_WALL_TRIGGERED;
        else/if name == _A_FLOATER then
            return PA_FALL_TRIGGERED;
        end

        return PA_INSTANT;
    end

    function (void) => Vector3f get_velocity do
        return velocity;
    end

    function (Vector3f v) => void set_velocity do
        velocity = v;

        // crude terminal velocity
        velocity.x = _Math__clamp(-_terminal_velocity, velocity.x, _terminal_velocity);
        velocity.y = _Math__clamp(-_terminal_velocity, velocity.y, _terminal_velocity);
    end

    function (Vector3f arg_v) => void apply_force do
        velocity.x = velocity.x + arg_v.x;
        velocity.y = velocity.y + arg_v.y;
        velocity.z = velocity.z + arg_v.z;
        // Moving the pingu on pixel up, so that the force can take effect
        // original FIXME: this should be handled by a state-machine
        pos_y = pos_y - 1;
    end

    function @rec (int req_action) => bool request_set_action do
        var int mode = get_activation_mode(req_action);
        var bool result = false;

        if mode == PA_INSTANT then
            if req_action == current_action then
                _log_debug("Pingu: Already have action");
            else/if ceu_action:change_allowed(_PTR2REF(req_action)) then
                _log_debug("setting instant action");
                result = true;
                instant_action = req_action;
                instant_action_set = true;
            else
                _log_debug("change from action %1% not allowed", ceu_action:get_name());
            end
        else/if mode == PA_WALL_TRIGGERED then
            if wall_action_set and wall_action == req_action then
                _log_debug("Not using wall action, we have already");
            else
                _log_debug("Setting wall action");
                wall_action = _PTR2REF(req_action);
                wall_action_set = true;
                result = true;
            end
        else/if mode == PA_FALL_TRIGGERED then
            if fall_action_set and fall_action == req_action then
                _log_debug("Not using fall action, we have already");
            else
                _log_debug("Setting fall action");
                fall_action = _PTR2REF(req_action);
                fall_action_set = true;
                result = true;
            end
        else
            _log_debug("unknown action activation_mode");
            _assert(0);
        end

        return result;
    end

    par do
        //pass update() call
        every global:e_PINGU_UPDATE_ALL do
            if instant_action_set then
                instant_action_set = false;
                emit e_CHANGE_ACTION => instant_action;
            end

            // original FIXME: Out of screen check is ugly
            // The Pingu has hit the edge of the screen, a good time to let him die.
            if (call/rec rel_getpixel(0, -1)) == _GT_OUTOFSCREEN then
                //Sound::PingusSound::play_sound("die");
                emit e_CHANGE_ACTION => _A_DEAD;
            end
        end
    with
        every gc in global:e_PINGU_DRAW_WALKER do
            if current_action == _A_WALKER then
                emit e_DRAW_CALLED => gc;
            end
        end
    with
        every gc in global:e_PINGU_DRAW_OTHERS do
            if current_action != _A_WALKER then
                emit e_DRAW_CALLED => gc;
            end
        end
    with
        //wait for e_CHANGE_ACTION and create an instance
        var int last_action = current_action;
        loop do
            previous_action = last_action;
            last_action = current_action;
            watching current_action in e_CHANGE_ACTION do
                if false then
                    //this looks strange, but that macro is just an else/if block
                    DO_ACTION(_A_ANGEL, AngelAction)
                    DO_ACTION(_A_BASHER, BasherAction)
                    DO_ACTION(_A_BLOCKER, BlockerAction)
                    DO_ACTION(_A_BOARDER, BoarderAction)
                    DO_ACTION(_A_BOMBER, BomberAction)
                    DO_ACTION(_A_BRIDGER, BridgerAction)
                    DO_ACTION(_A_CLIMBER, ClimberAction)
                    DO_ACTION(_A_DIGGER, DiggerAction)
                    DO_ACTION(_A_DROWN, DrownAction)
                    DO_ACTION(_A_EXITER, ExiterAction)
                    DO_ACTION(_A_FALLER, FallerAction)
                    DO_ACTION(_A_FLOATER, FloaterAction)
                    DO_ACTION(_A_JUMPER, JumperAction)
                    DO_ACTION(_A_LASERKILL, LaserKillAction)
                    DO_ACTION(_A_MINER, MinerAction)
                    DO_ACTION(_A_SLIDER, SliderAction)
                    DO_ACTION(_A_SPLASHED, SplashedAction)
                    DO_ACTION(_A_SUPERMAN, SupermanAction)
                    DO_ACTION(_A_WAITER, WaiterAction)
                    DO_ACTION(_A_WALKER, WalkerAction)
                else/if current_action == _A_DEAD then
                    emit global:e_PINGU_DIED;
                    escape 1;
                else/if current_action == _A_EXITED then
                    emit global:e_PINGU_EXITED;
                    escape 2;
                else
                    await FOREVER;
                end

                await global:e_PINGU_UPDATE_ALL; //hack
            end
        end
    end
end

#endif
