#ifndef PINGU_HOLDER_CEU
#define PINGU_HOLDER_CEU

#include "../c.ceu"
#include "../sdl.ceu"
#include "ipingu_holder.ceu"
#include "pingu.ceu"
#include "pingu_holder_listener.ceu"

native/pre do
    ##include "pingus/pingu_holder.hpp"
    ##define new_Direction() new Direction()
end

input _PinguHolder* DELETE_PINGU_HOLDER;

native @pure _new_Direction();

class PinguHolder with
    interface IPinguHolder;
    var _PinguHolder& holder;
do
    call/rec global:world:add_object(&this);

    function (_FileReader* reader) => void construct do end;

    function (void) => float get_z_pos do return 50; end
    function (Vector3f p) => void set_pos do end
    function (void) => Vector3f get_pos do return pos; end

    var _PinguHolder&? pingu_holder = _PTR2REF((_PinguHolder*)&holder);
    var int pingus_emitted = 0;
    var int pingus_exited = 0;
    var int pingus_dead = 0;

    function @rec (int id) => IPingu* get_pingu do
        var IPingu* result = null;

        if id < pingus_emitted then
            loop pingu in all_pingus do
                if pingu:get_id() == id then
                    result = pingu;
                end
            end
        end

        return result;
    end

    par/or do
        await e_DELETE;
    with
        every gc in e_DRAW do
            emit global:e_PINGU_DRAW_WALKER => gc;
            emit global:e_PINGU_DRAW_OTHERS => gc;
        end
    with
        every e_UPDATE do
            emit global:e_PINGU_UPDATE_ALL;
        end
    with
        every (entrance, owner_id, turn_left) in e_MAKE_PINGU do
            if pingu_holder.number_of_allowed > pingus_emitted then
                // We use all_pingus.size() as pingu_id, so that id == array index
                spawn Pingu in all_pingus with
                    this.pos_x = entrance:pos.x;
                    this.pos_y = entrance:pos.y;
                    this.owner_id = owner_id;
                    this.id = pingus_emitted;

                    this.direction = _PTR2REF(_new_Direction());

                    if turn_left then
                        this.direction.left();
                    else
                        this.direction.right();
                    end
                end;

                // FIXME: Find the "oing" sound
                //world->play_sound("oing", pos);

                pingus_emitted = pingus_emitted + 1;
                pingu_holder.released = pingus_emitted;
            end
        end
    with
        every global:e_PINGU_DIED do
            pingus_dead = pingus_dead + 1;
            pingu_holder.dead = pingus_dead;
        end
    with
        every global:e_PINGU_EXITED do
            pingus_exited = pingus_exited + 1;
            pingu_holder.exited = pingus_exited;
        end
    end
end

#endif
