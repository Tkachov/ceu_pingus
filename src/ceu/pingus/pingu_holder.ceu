#ifndef PINGU_HOLDER_CEU
#define PINGU_HOLDER_CEU

#include "../c.ceu"
#include "../sdl.ceu"
#include "ipingu_holder.ceu"
#include "pingu.ceu"
#include "pingu_holder_listener.ceu"

native/pre do
    ##include "pingus/pingu_holder.hpp"
    ##define new_Direction() new Direction()
end

input _PinguHolder* DELETE_PINGU_HOLDER;

native @pure _new_Direction();

class PinguHolder with
    interface IPinguHolder;
    var _PinguHolder& me;
do
    var _PinguHolder&? me_ = _PTR2REF((_PinguHolder*)&this.me);
    var int pingus_emitted = 0;
    var int pingus_exited = 0;
    var int pingus_dead = 0;

    function @rec (int id) => IPingu* get_pingu do
        var IPingu* result = null;

        if id < pingus_emitted then
            loop pingu in all_pingus do
                if pingu:get_id() == id then
                    result = pingu;
                end
            end
        end

        return result;
    end

    par do
        every package in e_MAKE_PINGU do
            if me_.number_of_allowed > pingus_emitted then
                // We use all_pingus.size() as pingu_id, so that id == array index
                spawn Pingu in all_pingus with                
                    this.pos_x = package:entrance:pos.x;
                    this.pos_y = package:entrance:pos.y;
                    this.owner_id = package:entrance:owner_id;
                    this.id = pingus_emitted;

                    this.direction = _PTR2REF(_new_Direction());    

                    if package:left then
                        this.direction.left();
                    else
                        this.direction.right();
                    end
                end;

                // FIXME: Find the "oing" sound
                //world->play_sound("oing", pos);

                pingus_emitted = pingus_emitted + 1;
                me_.released = pingus_emitted;                
            end
        end
    with
        every global:e_PINGU_DIED do
            pingus_dead = pingus_dead + 1;
            me_.dead = pingus_dead;            
        end
    with
        every global:e_PINGU_EXITED do
            pingus_exited = pingus_exited + 1;
            me_.exited = pingus_exited;
        end
    end
end

#endif
