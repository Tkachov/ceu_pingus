#ifndef ARMAGEDDONBUTTON_CEU
#define ARMAGEDDONBUTTON_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/sprite.ceu"
#include "../../engine/gui/igui_component.ceu"
#include "../../proxies/eventproxy.ceu"
#include "../../proxies/primarybuttonproxy.ceu"
#include "../iserver.ceu"

native/pre do
    ##define gc_draw(gc, s, rect) gc->draw(*s, Vector2i(rect.left, rect.top))
end

native @pure _gc_draw();

class ArmageddonButton with
    interface IGUI_Component;
    var IServer& server;
do
    var Sprite sprite;
    var Sprite background;
    var Sprite backgroundhl;
    call/rec background.reload_by_name("core/buttons/hbuttonbgb");
    call/rec backgroundhl.reload_by_name("core/buttons/hbuttonbg");
    call/rec sprite.reload_by_name("core/buttons/armageddon_anim");

    var _GUI_RectComponent&? me_ = _PTR2REF((_GUI_RectComponent*)&this.me);

    //freed in GroupComponent
    //finalize with _delete_obj(me_); end

    RECT_IS_AT(me_);

    par do
        loop do
            await mouse_click;
            watching 1s do
                await mouse_click;
                emit mouse_double_click;
            end
        end
    with
        every mouse_double_click do
            emit server.e_ARMAGEDDON;
        end
    with
        every gc in draw do
            if global:world:check_armageddon() then
                _gc_draw(gc, backgroundhl.get(), me_.rect);
                _gc_draw(gc, sprite.get(), me_.rect);
            else
                _gc_draw(gc, background.get(), me_.rect);
                sprite.set_frame(7);
                _gc_draw(gc, sprite.get(), me_.rect);
            end
        end
    with
        every delta in update do
            sprite.update_delta(delta);
        end
    end
end

#endif
