#ifndef CHECK_BOX_CEU
#define CHECK_BOX_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/gui/igui_component.ceu"
#include "../../proxies/pointerproxy.ceu"
#include "../../math/vector2i.ceu"

native/pre do
    ##include "engine/sound/sound.hpp"
    ##include "pingus/screens/pingus_menu.hpp"
    ##include "engine/display/drawing_context.hpp"
    ##include "engine/sound/sound.hpp"
    ##include "math/vector2i.hpp"
    ##include "pingus/screens/pingus_menu.hpp"
    ##include "engine/display/font.hpp"
    ##include "engine/display/sprite.hpp"
    ##include "engine/gui/component.hpp"
end

class CheckBox with
    interface IGUI_Component;

    event bool changed;

    function (int x, int y) => void shift_pos;
    function (bool v) => void set_state;
do
    var _GUI_RectComponent&? rect = _PTR2REF((_GUI_RectComponent*)&me);
    var bool state = false;
    var Sprite m_checkbox_marked;
    var Sprite m_checkbox;
    call/rec m_checkbox_marked.reload_by_name("core/menu/checkbox_marked_small");
    call/rec m_checkbox.reload_by_name("core/menu/checkbox_small");

    var PrimaryButtonProxy p with this.gui = outer; end;
    var PointerProxy pp with this.gui = outer; end;
    var EventProxy ep with this.gui = outer; end;

    function (int x, int y) => void shift_pos do
        rect.set_rect(_Rect(_Vector2i(rect.rect.left + x, rect.rect.top + y), rect.rect.get_size()));        
    end

    function (bool v) => void set_state do
        state = v;
    end

    par do
        every gc in draw do
            if _globals__developer_mode then
                gc:draw_rect(_PTR2REF(rect.rect), _Color(0, 255, 255));
            end

            if state then
                gc:draw(_deref(m_checkbox_marked.get()), _Vector2i(rect.rect.left, rect.rect.top) finalize with end);
            else
                gc:draw(_deref(m_checkbox.get()), _Vector2i(rect.rect.left, rect.rect.top) finalize with end);
            end
        end
    with
        every mouse_press do
            state = not state;
            emit changed => state;
        end
    end
end

#endif
