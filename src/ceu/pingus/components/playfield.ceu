#ifndef PLAYFIELD_CEU
#define PLAYFIELD_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/gui/igui_component.ceu"
#include "../../math/vector2i.ceu"
#include "../../proxies/eventproxy.ceu"
#include "../../proxies/pointerproxy.ceu"
#include "../../proxies/primarybuttonproxy.ceu"
#include "../../proxies/secondarybuttonproxy.ceu"
#include "../screens/igame_session.ceu"
#include "../capture_rectangle.ceu"
#include "../global_interface.ceu"
#include "../iserver.ceu"
#include "iplayfield.ceu"

native/pre do
    ##include "engine/display/graphic_context_state.hpp"
    ##include "engine/gui/rect_component.hpp"
    ##include "engine/display/display.hpp"
    ##include "pingus/globals.hpp"

    ##define globals__developer_mode globals::developer_mode
    ##define const_Uint8 const Uint8
    ##define get_uint(u, v) u[v]
    ##define read_coords(vx, vy, fun) Vector2i __v = fun; vx = __v.x; vy = __v.y;
    ##define globals__drag_drop_scrolling globals::drag_drop_scrolling
    ##define globals__auto_scrolling globals::auto_scrolling
    ##define Display__is_fullscreen() Display::is_fullscreen()
    ##define Display__has_grab() Display::has_grab()
    ##define Display__get_width() Display::get_width()
    ##define Display__get_height() Display::get_height()
    ##define new_SceneContextDrawingRequest(a, b, c) new SceneContextDrawingRequest(a, b, c)
end

input _Vector2i* PLAYFIELD_CLICK;
input _GUI_RectComponent* RECT_COMPONENT_UPDATE_LAYOUT;

native @pure _get_uint(), _read_coords(), _new_SceneContextDrawingRequest();

class Playfield with
    interface IGUI_Component;
    interface IPlayfield;    
    var _SceneContext&? scene_context;
    var _GraphicContextState&? state;
    var IServer& server;
    var IGameSession* session;
do
    var _GUI_RectComponent&? playfield = _PTR2REF((_GUI_RectComponent*)&me);

    finalize with
        _delete_obj(scene_context);
        _delete_obj(state);
    end;

    RECT_IS_AT(&playfield);

    state.set_limit(
        _Rect(
            _Vector2i(0, 0),
            _Size(global:world:get_width(), global:world:get_height())
        )
    );

    //original FIXME: Temporary workaround till start-pos is integrated a bit more properly
    state.set_pos(global:world:get_start_pos(0));

    var CaptureRectangle capture_rectangle with
        this.session = session;
    end;

    var IPingu* current_pingu = null;
    var bool mouse_scrolling = false;
    var Vector2i scroll_center;
    var Vector2i mouse_pos;
    var Vector2i old_state_pos;

    function @rec (int mx, int my) => IPingu* current_pingu_find do
        var float min_dist = 500.0;
        var float dist;
        var IPingu* c_pingu = null;

        loop pingu in global:world:get_pingus():all_pingus do
            if call/rec pingu:is_over(mx, my) then
                dist = call/rec pingu:dist(mx, my);

                if dist < min_dist then
                    min_dist = dist;
                    c_pingu = pingu;
                end
            end
        end

        return c_pingu;
    end

    function @rec (void) => IPingu* current_pingu_find_mouse do
        var Vector2i m;
        _readVector2i(m, state.screen2world(_toVector2i(mouse_pos)));
        return call/rec current_pingu_find(m.x, m.y);
    end

    function (void) => IPingu* get_current_pingu do
        return current_pingu;
    end

    function (void) => Vector2i get_pos do
        var Vector2i v;
        v.x = state.get_pos().x;
        v.y = state.get_pos().y;
        return v;
    end

    function (int x, int y) => void set_viewpoint do
        state.set_pos(_Vector2i(x, y));
    end

    function (int x, int y) => void scroll do
        state.set_pos(state.get_pos() + _Vector2i(x, y));
    end

    par do
        every gc in draw do
            scene_context.clear();
            state.push(_deref(scene_context));

            current_pingu = _PTR2REF(call/rec current_pingu_find_mouse());
            call/rec capture_rectangle.set_pingu(current_pingu);
            //call/rec capture_rectangle.set_pingu(get_current_pingu()); //another no-"access across `await`"-hack
            emit capture_rectangle.draw => &scene_context;

            if global:world != null then
                emit global:world:e_DRAW => &scene_context;
            end

            state.pop(_deref(scene_context));

            gc:draw(_new_SceneContextDrawingRequest(&scene_context, _Vector2i(0,0), -10000));

            gc:push_modelview();
            gc:translate(playfield.rect.left, playfield.rect.top) finalize with end;
            // Draw the scrolling band
            if mouse_scrolling and not _globals__drag_drop_scrolling then
                gc:draw_line(_toVector2i(mouse_pos), _toVector2i(scroll_center) - _Vector2i(0, 15), _Color(0, 255, 0));
                gc:draw_line(_toVector2i(mouse_pos), _toVector2i(scroll_center) + _Vector2i(0, 15), _Color(0, 0, 255));
                gc:draw_line(_toVector2i(mouse_pos), _toVector2i(scroll_center) + _Vector2i(15, 0), _Color(0, 255, 255));
                gc:draw_line(_toVector2i(mouse_pos), _toVector2i(scroll_center) - _Vector2i(15, 0), _Color(255, 255, 0));
                gc:draw_line(_toVector2i(mouse_pos), _toVector2i(scroll_center), _Color(255, 0, 0));
            end
            gc:pop_modelview();
        end
    with
        every (x, y) in mouse_move do
            x = x - playfield.rect.left;
            y = y - playfield.rect.top;

            //original FIXME: useless stuff, but currently the controller doesn't have a state
            mouse_pos.x = x;
            mouse_pos.y = y;

            if _globals__developer_mode then
                // Some fun stuff that lets you draw directly on the level
                var _const_Uint8&? keystate;
                finalize keystate = _SDL_GetKeyboardState(null); with end;

                var int px;
                var int py;
                _read_coords(px, py, state.screen2world(_toVector2i(mouse_pos)));

                if _get_uint(keystate, _SDL_SCANCODE_DELETE) then
                    var _CollisionMask* mask = _new_CollisionMask("other/bash_radius_gfx");
                    global:world:remove(mask, px - mask:get_width()/2, py - mask:get_height()/2);
                    _delete_obj(mask);
                else/if _get_uint(keystate, _SDL_SCANCODE_INSERT) then
                    var _CollisionMask* mask = _new_CollisionMask("other/bash_radius_gfx");
                    global:world:put(mask, px - mask:get_width()/2, py - mask:get_height()/2, _GT_GROUND);
                    _delete_obj(mask);
                else/if _get_uint(keystate, _SDL_SCANCODE_HOME) then
                    var _CollisionMask* mask = _new_CollisionMask("other/bash_radius_gfx");
                    global:world:put(mask, px - mask:get_width()/2, py - mask:get_height()/2, _GT_BRIDGE);
                    _delete_obj(mask);
                end
            end
        end
    with
        every (x, y) in mouse_press do
            x = x - playfield.rect.left;
            y = y - playfield.rect.top;

            if session then
                var Vector2i pos;
                _readVector2i(pos, state.screen2world(_Vector2i(x, y)));
                current_pingu = _PTR2REF(call/rec current_pingu_find(pos.x, pos.y));

                if current_pingu then                    
                    emit server.send_pingu_action_event => (current_pingu, session:get_action_name());
                end
            end
        end
    with
        every (x, y) in mouse_secondary_press do
            x = x - playfield.rect.left;
            y = y - playfield.rect.top;

            mouse_scrolling = true;
            scroll_center.x = x;
            scroll_center.y = y;

            _readVector2i(old_state_pos, state.get_pos());
        end
    with
        every (x, y) in mouse_secondary_release do
            x = x - playfield.rect.left;
            y = y - playfield.rect.top;

            mouse_scrolling = false;
        end
    with
        every component in RECT_COMPONENT_UPDATE_LAYOUT do
            if component != &playfield then
                continue;
            end

            state.set_size(playfield.rect.get_width(), playfield.rect.get_height());
            scene_context.set_rect(playfield.rect) finalize with end;
        end
    with
        every delta in update do
            //original FIXME: This should be delta dependant
            if not mouse_scrolling then
                //find a current pingu & pass it to capture rectangle
                //current_pingu = _PTR2REF(call/rec current_pingu_find_mouse());
                //call/rec capture_rectangle.set_pingu(current_pingu);
            else
                if _globals__drag_drop_scrolling then
                    state.set_pos(_toVector2i(old_state_pos) + (_toVector2i(scroll_center) - _toVector2i(mouse_pos)));
                else
                    state.set_pos(_Vector2i(state.get_pos().x - (int)((float)(scroll_center.x - mouse_pos.x)*0.2),
                                                      state.get_pos().y - (int)((float)(scroll_center.y - mouse_pos.y)*0.2)));
                end

                //current_pingu = null;
            end

            if _globals__auto_scrolling and (_Display__is_fullscreen() or _Display__has_grab()) then
                var int scroll_speed = 800*delta;

                if mouse_pos.x < 10 then
                    state.set_pos(state.get_pos() - _Vector2i(scroll_speed, 0));
                else/if mouse_pos.x > _Display__get_width() - 10 then
                    state.set_pos(state.get_pos() + _Vector2i(scroll_speed, 0));
                end

                if mouse_pos.y < 10 then
                    state.set_pos(state.get_pos() - _Vector2i(0, scroll_speed));
                else/if mouse_pos.y > _Display__get_height() - 10 then
                    state.set_pos(state.get_pos() + _Vector2i(0, scroll_speed));
                end
            end
        end
    end
end

#endif
