#ifndef GAME_SESSION_CEU
#define GAME_SESSION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../math/math.ceu"
#include "../iworld.ceu"
#include "../pingu_holder_listener.ceu"
#include "../components/armageddonbutton.ceu"
#include "../components/forwardbutton.ceu"
#include "../components/pausebutton.ceu"
#include "../components/pingus_counter.ceu"
#include "../components/playfield.ceu"
#include "../components/smallmap.ceu"

native/pre do
    ##include "engine/screen/screen_manager.hpp"
    ##include "engine/display/display.hpp"
    ##include "engine/gui/gui_manager.hpp"
    ##include "pingus/globals.hpp"
    ##include "pingus/savegame_manager.hpp"
    ##include "pingus/screens/game_session.hpp"
    ##include "pingus/screens/result_screen.hpp"

    ##include "engine/screen/screen_manager.hpp"
    ##include "pingus/server.hpp"
    ##include "engine/sound/sound.hpp"
    ##include "pingus/components/button_panel.hpp"
    ##include "pingus/components/playfield.hpp"
    ##include "pingus/components/time_display.hpp"

    ##define new_GUI_Component() new GUI::Component()
    ##define new_RectComponent(r) new GUI::RectComponent(r)
    ##define new_Playfield(a) new Playfield(a)
    ##define new_TimeDisplay(s) new TimeDisplay(s)
    ##define new_Result() new Result()
    ##define new_Savegame new Savegame
    ##define SavegameManager__instance() SavegameManager::instance()
    ##define ScreenManager__instance() ScreenManager::instance()
    ##define std__make_shared_ResultScreen std::make_shared<ResultScreen>
    ##define Savegame__ACCESSIBLE Savegame::ACCESSIBLE
    ##define Savegame__FINISHED Savegame::FINISHED
    ##define globals__game_speed globals::game_speed
    ##define globals__fast_forward_time_scale globals::fast_forward_time_scale
    ##define toSStatus(x) (Savegame::S_Status)x
    ##define Display__get_width() Display::get_width()
    ##define Display__get_height() Display::get_height()
    ##define Input__ScrollEvent Input::ScrollEvent
end

native @pure _new_PingusCounter(), _new_GUI_Component(), _new_RectComponent(), _new_Playfield(), _new_TimeDisplay(),
             _new_Result(), _new_Savegame(),
             _SavegameManager__instance(), _ScreenManager__instance(),
             _std__make_shared_ResultScreen(), _toSStatus(), _Display__get_width(), _Display__get_height();

input _ComponentUpdatePackage* GAME_SESSION_UPDATE_SERVER;
input _GameSession* DELETE_GAME_SESSION;
input _Input__ScrollEvent* GAME_SESSION_SCROLLER_EVENT_TYPE;

class GameSession with
    var _GameSession* me;
do
    var _GameSession&? game_session = _PTR2REF((_GameSession*)me);
    var PingusCounter pcounter with
        this.me = _new_GUI_Component();
        this.server = _PTR2REF(game_session.get_server());
        game_session.pcounter = &this.me;
    end;

    var Playfield playfield with
        game_session.playfield = _new_Playfield(
            _Rect(
                _Vector2i(
                    _Math__max((_Display__get_width() - global:world:get_width())/2, 0),
                    _Math__max((_Display__get_height() - global:world:get_height())/2, 0)
                ),
                _Size(
                    _Math__min(_Display__get_width(), global:world:get_width()),
                    _Math__min(_Display__get_height(), global:world:get_height())
                )
            )
        );
        this.me = _PTR2REF(game_session.playfield);
        this.server = _PTR2REF(game_session.get_server());
        this.session = &game_session;
    end;

    var SmallMap small_map with
        this.rect = _PTR2REF(_new_RectComponent(_Rect(_Vector2i(5, game_session.size.height - 105), _Size(175, 100))));
        this.me = _PTR2REF(this.rect);
        this.server = _PTR2REF(game_session.get_server());
        this.playfield = playfield;
        game_session.small_map = &this.rect;
    end;

    var ArmageddonButton armageddon_button with
        this.me = _PTR2REF(_new_RectComponent(_Rect(_Vector2i(_Display__get_width() - 40, _Display__get_height()-62), _Size(38, 60))));
        this.server = _PTR2REF((Server*)game_session.get_server():ceu());
        game_session.armageddon_button = (_GUI_RectComponent*)&this.me;
    end;

    var ForwardButton forward_button with
        this.me = _PTR2REF(_new_RectComponent(_Rect(_Vector2i(_Display__get_width() - 40*2, _Display__get_height()-62), _Size(38, 60))));
        this.session = _PTR2REF(&game_session);
        game_session.forward_button = (_GUI_RectComponent*)&this.me;
    end;

    var PauseButton pause_button with
        this.me = _PTR2REF(_new_RectComponent(_Rect(_Vector2i(_Display__get_width() - 40*3, _Display__get_height()-62), _Size(38, 60))));
        this.session = _PTR2REF(&game_session);
        game_session.pause_button = (_GUI_RectComponent*)&this.me;
    end;

    game_session.time_display = _new_TimeDisplay(game_session.get_server());

    game_session.gui_manager:add(game_session.playfield) finalize with end;
    game_session.gui_manager:add(game_session.button_panel) finalize with end;
    game_session.gui_manager:add(game_session.pcounter) finalize with end;
    game_session.gui_manager:add(game_session.small_map) finalize with end;
    game_session.gui_manager:add(game_session.time_display) finalize with end;
    game_session.gui_manager:add(game_session.armageddon_button) finalize with end;
    game_session.gui_manager:add(game_session.forward_button) finalize with end;
    game_session.gui_manager:add(game_session.pause_button) finalize with end;

    var int world_delay = 0;

    par/or do
        every package in GAME_SESSION_UPDATE_SERVER do
            if (_GameSession*)package:component != &game_session then
                continue;
            end

            if ((Server*)game_session.server:ceu()):is_finished() then
                var IPinguHolder* pingu_holder = _PTR2REF(global:world:get_pingus());
                var _Result&? result = _new_Result();

                finalize result.plf    = game_session.server:get_plf(); with end

                result.saved  = pingu_holder:get_number_of_exited();
                result.killed = pingu_holder:get_number_of_killed();
                finalize result.total  = game_session.server:get_plf().get_number_of_pingus(); with end

                finalize result.needed = game_session.server:get_plf().get_number_to_save(); with end

                finalize result.max_time  = game_session.server:get_plf().get_time(); with end
                result.used_time = call/rec ((Server*)game_session.server:ceu()):get_time();

                var int rs = _Savegame__ACCESSIBLE;
                if result.saved >= result.needed then
                    rs = _Savegame__FINISHED;
                end

                // Write the savegame
                var _Savegame&? savegame = _new_Savegame(result.plf.get_resname(),
                                                         _toSStatus(rs),
                                                         result.used_time,
                                                         result.saved);
                _SavegameManager__instance():store(_deref(savegame));

                if game_session.show_result_screen then
                    _ScreenManager__instance():replace_screen(_std__make_shared_ResultScreen(_deref(result)));
                else
                    _ScreenManager__instance():pop_screen();
                end

                _delete_obj(result);
            else

                // how much time we have to account for while doing world updates
                var int time_passed = (int)(package:delta * 1000) + world_delay;
                // how much time each world update represents
                var int update_time = _globals__game_speed;

                // update the world (and the objects in it) in constant steps to account
                // for the time the previous frame took

                // invariant: world_updates - the number of times the world
                // has been updated during this frame
                var int world_updates = 0;
                loop do
                    if (world_updates+1)*update_time > time_passed then
                        break;
                    end

                    if not game_session.pause or game_session.single_step then
                        game_session.single_step = false;

                        if game_session.fast_forward then
                            _printf("fast_forward: %d\n", (int)_globals__fast_forward_time_scale);
                            loop i in _globals__fast_forward_time_scale do
                                //TODO: figure out why it doesn't work with Ceu-style update
                                //UPD: it works now, but slows down EXTREMELY fast
                                game_session.server:update();
                                //emit ((Server*)game_session.server:ceu()):e_UPDATE;
                            end
                        else
                            //game_session.server:update();
                            emit ((Server*)game_session.server:ceu()):e_UPDATE;
                        end
                    end

                    world_updates = world_updates + 1;
                end
                // save how far behind is the world compared to the actual time
                // so that we can account for that while updating in the next frame
                world_delay = time_passed - (world_updates*update_time);

            end
        end
    with
        every ev in GAME_SESSION_SCROLLER_EVENT_TYPE do
            playfield.scroll(-ev:x_delta, -ev:y_delta);
        end
    with
        var _GameSession* e = await DELETE_GAME_SESSION until (e == &game_session);
    end
end

#endif
