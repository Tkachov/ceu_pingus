#ifndef GAME_SESSION_CEU
#define GAME_SESSION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/screen/screen.ceu"
#include "../../math/math.ceu"
#include "../iworld.ceu"
#include "../global_interface.ceu"
#include "../components/armageddonbutton.ceu"
#include "../components/forwardbutton.ceu"
#include "../components/pausebutton.ceu"
#include "../components/pingus_counter.ceu"
#include "../components/playfield.ceu"
#include "../components/smallmap.ceu"
#include "../server.ceu"
#include "igame_session.ceu"

native/pre do
    ##include "engine/screen/screen_manager.hpp"
    ##include "engine/display/display.hpp"
    ##include "engine/gui/gui_manager.hpp"
    ##include "pingus/globals.hpp"
    ##include "pingus/savegame_manager.hpp"
    ##include "pingus/screens/game_session.hpp"
    ##include "pingus/screens/result_screen.hpp"

    ##include "engine/screen/screen_manager.hpp"
    ##include "pingus/server.hpp"
    ##include "engine/sound/sound.hpp"
    ##include "pingus/components/button_panel.hpp"    
    ##include "pingus/components/time_display.hpp"

    ##include "engine/display/graphic_context_state.hpp"
    ##include "engine/gui/rect_component.hpp"
    ##include "util/log.hpp"

    ##define new_GUI_Component() new GUI::Component()
    ##define new_RectComponent(r) new GUI::RectComponent(r)
    ##define new_Rect(v, s) new Rect(v, s)
    ##define new_SceneContext(rect) new SceneContext(rect)
    ##define new_GraphicContextState(w, h) new GraphicContextState(w, h)
    ##define new_Server(a, b) new Server(a, b)
    ##define new_ButtonPanel(a, b) new ButtonPanel(a, b)    
    ##define new_TimeDisplay(s) new TimeDisplay(s)
    ##define new_Result() new Result()
    ##define new_Savegame new Savegame
    ##define SavegameManager__instance() SavegameManager::instance()
    ##define ScreenManager__instance() ScreenManager::instance()
    ##define std__make_shared_ResultScreen std::make_shared<ResultScreen>
    ##define Savegame__ACCESSIBLE Savegame::ACCESSIBLE
    ##define Savegame__FINISHED Savegame::FINISHED
    ##define globals__game_speed globals::game_speed
    ##define globals__fast_forward_time_scale globals::fast_forward_time_scale
    ##define toSStatus(x) (Savegame::S_Status)x
    ##define Display__get_width() Display::get_width()
    ##define Display__get_height() Display::get_height()
    ##define Input__ScrollEvent Input::ScrollEvent

    ##define Input__BUTTON_EVENT_TYPE Input::BUTTON_EVENT_TYPE
    ##define Input__BUTTON_PRESSED Input::BUTTON_PRESSED
    ##define Input__ACTION_1_BUTTON Input::ACTION_1_BUTTON
    ##define Input__ACTION_10_BUTTON Input::ACTION_10_BUTTON
    ##define Input__ACTION_DOWN_BUTTON Input::ACTION_DOWN_BUTTON
    ##define Input__ACTION_UP_BUTTON Input::ACTION_UP_BUTTON
    ##define Input__SCROLLER_EVENT_TYPE Input::SCROLLER_EVENT_TYPE
    ##define Input__POINTER_EVENT_TYPE Input::POINTER_EVENT_TYPE
    ##define Input__AXIS_EVENT_TYPE Input::AXIS_EVENT_TYPE
    ##define Input__KEYBOARD_EVENT_TYPE Input::KEYBOARD_EVENT_TYPE
    ##define Input__TEXT_INPUT_EVENT_TYPE Input::TEXT_INPUT_EVENT_TYPE
end

native @pure _new_PingusCounter(), _new_GUI_Component(), _new_RectComponent(), _new_Server(), _new_ButtonPanel(),
             _new_Rect(), _new_SceneContext(), _new_GraphicContextState(), _new_TimeDisplay(), _new_Result(), _new_Savegame(),
             _SavegameManager__instance(), _ScreenManager__instance(),
             _std__make_shared_ResultScreen(), _toSStatus(), _Display__get_width(), _Display__get_height();

input _ScreenUpdatePackage* GAME_SESSION_UPDATE;
input _GameSession* DELETE_GAME_SESSION;

class GameSession with
    interface IGameSession;
    var _GameSession* me;
do
    var _GameSession&? game_session = _PTR2REF((_GameSession*)me);

    var Server server with
        this.me = _new_Server(game_session.plf, true);        
    end;

    var _ButtonPanel* button_panel = _new_ButtonPanel(server.me, _Vector2i(0, (game_session.size.height - 150)/2));

    var PingusCounter pcounter with
        this.me = _new_GUI_Component();
        this.server = _PTR2REF(server.me);        
    end;

    var Playfield playfield with
        var _Rect&? rect = _new_Rect(
                                _Vector2i(
                                    _Math__max((_Display__get_width() - global:world:get_width())/2, 0),
                                    _Math__max((_Display__get_height() - global:world:get_height())/2, 0)
                                ),
                                _Size(
                                    _Math__min(_Display__get_width(), global:world:get_width()),
                                    _Math__min(_Display__get_height(), global:world:get_height())
                                )
                            );
        
        this.me = _PTR2REF(_new_RectComponent(_deref(rect)));
        this.scene_context = _new_SceneContext(_deref(rect));
        this.state = _new_GraphicContextState(rect.get_width(), rect.get_height());
        this.server = _PTR2REF(server.me);
        this.session = &outer;

        _delete_obj(rect);
    end;

    var SmallMap small_map with
        this.rect = _PTR2REF(_new_RectComponent(_Rect(_Vector2i(5, game_session.size.height - 105), _Size(175, 100))));
        this.me = _PTR2REF(this.rect);
        this.server = _PTR2REF(server.me);
        this.playfield = playfield;
    end;

    var ArmageddonButton armageddon_button with
        this.me = _PTR2REF(_new_RectComponent(_Rect(_Vector2i(_Display__get_width() - 40, _Display__get_height()-62), _Size(38, 60))));
        this.server = _PTR2REF((Server*)&server);
    end;

    var ForwardButton forward_button with
        this.me = _PTR2REF(_new_RectComponent(_Rect(_Vector2i(_Display__get_width() - 40*2, _Display__get_height()-62), _Size(38, 60))));
        this.session = outer;
    end;

    var PauseButton pause_button with
        this.me = _PTR2REF(_new_RectComponent(_Rect(_Vector2i(_Display__get_width() - 40*3, _Display__get_height()-62), _Size(38, 60))));
        this.session = outer;
    end;

    var _TimeDisplay* time_display = _new_TimeDisplay(server.me);

    game_session.gui_manager:add(&playfield.me) finalize with end;
    game_session.gui_manager:add(button_panel) finalize with end;
    game_session.gui_manager:add(&pcounter.me) finalize with end;
    game_session.gui_manager:add(&small_map.rect) finalize with end;
    game_session.gui_manager:add(time_display) finalize with end;
    game_session.gui_manager:add(&armageddon_button.me) finalize with end;
    game_session.gui_manager:add(&forward_button.me) finalize with end;
    game_session.gui_manager:add(&pause_button.me) finalize with end;

    var int world_delay = 0;

    var bool pause = false;
    var bool fast_forward = false;
    var bool single_step = false;

    function (bool value) => void set_fast_forward do    
        fast_forward = value;
        if fast_forward then        
            pause = false;
        end
    end
    
    function (bool value) => void set_pause do
        pause = value;
        if pause then
            fast_forward = false;
        end
    end

    function (void) => int get_action_name do
        return button_panel:get_action_name();
    end

    function (void) => bool get_fast_forward do    
        return fast_forward;
    end

    function (void) => bool get_pause do
        return pause;
    end

    par/or do
        every package in GAME_SESSION_UPDATE do
            if package:screen != &game_session then
                continue;
            end

            if server.is_finished() then
                var IPinguHolder* pingu_holder = _PTR2REF(global:world:get_pingus());
                var _Result&? result = _new_Result();

                finalize result.plf    = server.me:get_plf(); with end

                result.saved  = pingu_holder:get_number_of_exited();
                result.killed = pingu_holder:get_number_of_killed();
                finalize result.total  = server.me:get_plf().get_number_of_pingus(); with end

                finalize result.needed = server.me:get_plf().get_number_to_save(); with end

                finalize result.max_time  = server.me:get_plf().get_time(); with end
                result.used_time = call/rec server.get_time();

                var int rs = _Savegame__ACCESSIBLE;
                if result.saved >= result.needed then
                    rs = _Savegame__FINISHED;
                end

                // Write the savegame
                var _Savegame&? savegame = _new_Savegame(result.plf.get_resname(),
                                                         _toSStatus(rs),
                                                         result.used_time,
                                                         result.saved);
                _SavegameManager__instance():store(_deref(savegame));

                if game_session.show_result_screen then
                    _ScreenManager__instance():replace_screen(_std__make_shared_ResultScreen(_deref(result)));
                else
                    _ScreenManager__instance():pop_screen();
                end

                _delete_obj(result);
            else

                // how much time we have to account for while doing world updates
                var int time_passed = (int)(package:delta * 1000) + world_delay;
                // how much time each world update represents
                var int update_time = _globals__game_speed;

                // update the world (and the objects in it) in constant steps to account
                // for the time the previous frame took

                // invariant: world_updates - the number of times the world
                // has been updated during this frame
                var int world_updates = 0;
                loop do
                    if (world_updates+1)*update_time > time_passed then
                        break;
                    end

                    if not pause or single_step then
                        single_step = false;

                        if fast_forward then
                            _printf("fast_forward: %d\n", (int)_globals__fast_forward_time_scale);
                            loop i in _globals__fast_forward_time_scale do
                                //TODO: figure out why it doesn't work with Ceu-style update
                                //UPD: it works now, but slows down EXTREMELY fast
                                server.me:update();
                                //emit server.e_UPDATE;
                            end
                        else
                            //server.me:update();
                            emit server.e_UPDATE;
                        end
                    end

                    world_updates = world_updates + 1;
                end
                // save how far behind is the world compared to the actual time
                // so that we can account for that while updating in the next frame
                world_delay = time_passed - (world_updates*update_time);
            end
            
            game_session.gui_manager:update(package:delta) finalize with end;
        end
    with
        every package in SCREEN_UPDATE_EVENT do
            //log_info("Events: " << event.get_type ());

            if package:event.type == _Input__BUTTON_EVENT_TYPE then
                if package:event.button.state == _Input__BUTTON_PRESSED then              
                    if  package:event.button.name >= _Input__ACTION_1_BUTTON
                    and package:event.button.name <= _Input__ACTION_10_BUTTON then
                        button_panel:set_button(package:event.button.name - _Input__ACTION_1_BUTTON);                    
                    else/if package:event.button.name == _Input__ACTION_DOWN_BUTTON then                    
                        button_panel:next_action();                    
                    else/if package:event.button.name == _Input__ACTION_UP_BUTTON then                    
                        button_panel:previous_action();
                    end
                end
            else/if package:event.type == _Input__SCROLLER_EVENT_TYPE then
                playfield.scroll(-package:event.scroll.x_delta, -package:event.scroll.y_delta);
            else/if package:event.type == _Input__POINTER_EVENT_TYPE then // Ignore, is handled in GUIScreen
            else/if package:event.type == _Input__AXIS_EVENT_TYPE then
                // ???
                //process_axis_event (event.axis);
            else/if package:event.type == _Input__KEYBOARD_EVENT_TYPE then
            else/if package:event.type == _Input__TEXT_INPUT_EVENT_TYPE then
            else
                // unhandled event
                _log_info("unhandled event: %1%", package:event.type) finalize with end;
            end
        end        
    with
        every screen in ON_STARTUP do
            if screen != &game_session then
                continue;
            end

            if _globals__developer_mode then
                _log_info("Starting Music: %1%", server.me:get_plf().get_music());
            end

            if server.me:get_plf().get_music() == "none" or server.me:get_plf().get_music().empty() then
                _Sound__PingusSound__stop_music();
            else
                _Sound__PingusSound__play_music(server.me:get_plf().get_music());
            end
        end
    with
        every screen in ON_ESCAPE_PRESS do
            if screen == &game_session then
                emit server.e_FINISH_EVENT;
            end
        end
    with
        every screen in ON_ARMAGEDDON_PRESS do
            if screen == &game_session then
                emit server.e_ARMAGEDDON;
            end
        end
    with
        every screen in ON_PAUSE_PRESS do
            if screen == &game_session then
                set_pause(not get_pause());
            end
        end
    with
        every screen in ON_SINGLE_STEP_PRESS do
            if screen != &game_session then
                continue;
            end

            set_pause(true);
            single_step = true;
        end    
    with
        every screen in ON_FAST_FORWARD_PRESS do
            if screen != &game_session then
                continue;
            end

            if get_pause() then
                set_pause(false);
            else
                set_fast_forward(true);
            end
        end
    with
        every screen in ON_FAST_FORWARD_RELEASE do
            if screen != &game_session then
                continue;
            end

            set_fast_forward(false);
        end
    with
        every package in SCREEN_DRAW_BACKGROUND do
            var _GUI_RectComponent* rect = (_GUI_RectComponent*)&playfield.me;

            if package:screen != &game_session then
                continue;
            end

            if rect:get_rect() != _Rect(_Vector2i(0,0), _Size(_Display__get_width(), _Display__get_height())) then
                // Draw a black border around the playfield when the playfield is smaller then the screen                
                // top
                package:gc.draw_fillrect(_Rect(0, 0, _Display__get_width(), rect:get_rect().top), _Color(0, 0, 0));
                // bottom
                package:gc.draw_fillrect(_Rect(0, rect:get_rect().bottom, _Display__get_width(), _Display__get_height()), _Color(0, 0, 0));
                // left
                package:gc.draw_fillrect(_Rect(0, rect:get_rect().top, rect:get_rect().left, rect:get_rect().bottom), _Color(0, 0, 0));
                // right
                package:gc.draw_fillrect(_Rect(rect:get_rect().right, rect:get_rect().top, _Display__get_width(), rect:get_rect().bottom), _Color(0, 0, 0));
            end
        end
    with
        every package in SCREEN_RESIZE do
            if package:screen != &game_session then
                continue;
            end

            ((_GUI_RectComponent*)&playfield.me):set_rect(
                _Rect(
                    _Vector2i(
                        _Math__max((game_session.size.width - global:world:get_width())/2,  0),
                        _Math__max((game_session.size.height - global:world:get_height())/2, 0)
                    ),
                    _Size(
                        _Math__min(game_session.size.width, global:world:get_width()),
                        _Math__min(game_session.size.height, global:world:get_height())
                    )
                )
            );

            ((_GUI_RectComponent*)&armageddon_button.me):set_rect(_Rect(_Vector2i(game_session.size.width - 40, game_session.size.height - 62), _Size(38, 60)));
            ((_GUI_RectComponent*)&forward_button.me):set_rect(_Rect(_Vector2i(game_session.size.width - 40*2, game_session.size.height - 62), _Size(38, 60)));
            ((_GUI_RectComponent*)&pause_button.me):set_rect(_Rect(_Vector2i(game_session.size.width - 40*3, game_session.size.height - 62), _Size(38, 60)));
            small_map.rect.set_rect(_Rect(_Vector2i(5, game_session.size.height - 105), _Size(175, 100)));
            button_panel:set_pos(_Vector2i(0, (game_session.size.height - 150)/2));
        end
    with
        every package in ON_ACTION_AXIS_MOVE do
            if package:screen != &game_session then
                continue;
            end

            if package:move > 0 then
                button_panel:next_action();
            else/if package:move < 0 then
                button_panel:previous_action();
            end
        end
    with
        var _GameSession* e = await DELETE_GAME_SESSION until (e == &game_session);
        emit server.e_DELETE;
    end
end

#endif
