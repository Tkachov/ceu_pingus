#ifndef OPTION_MENU_CEU
#define OPTION_MENU_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/gui/igui_component.ceu"
#include "../../engine/gui/surface_button.ceu"
#include "../../engine/screen/screen.ceu"
#include "../../engine/sound/sound.ceu"
#include "../../math/math.ceu"
#include "../iworld.ceu"
#include "../global_interface.ceu"
#include "../components/check_box.ceu"
#include "../components/slider_box.ceu"
#include "../components/choice_box.ceu"

native/pre do
    ##include "engine/display/display.hpp"
    ##include "engine/display/graphic_context_state.hpp"
    ##include "engine/display/sprite.hpp"
    ##include "engine/gui/gui_manager.hpp"
    ##include "engine/gui/rect_component.hpp"
    ##include "engine/gui/surface_button.hpp"
    ##include "engine/screen/gui_screen.hpp"
    ##include "engine/screen/screen_manager.hpp"
    ##include "engine/sound/sound.hpp"
    ##include "pingus/components/label.hpp"
    ##include "pingus/config_manager.hpp"
    ##include "pingus/fonts.hpp"
    ##include "pingus/game_time.hpp"
    ##include "pingus/gettext.h"
    ##include "pingus/globals.hpp"
    ##include "pingus/savegame_manager.hpp"
    ##include "pingus/screens/game_session.hpp"
    ##include "pingus/screens/option_menu.hpp"
    ##include "pingus/screens/result_screen.hpp"
    ##include "pingus/server.hpp"
    ##include "pingus/string_format.hpp"
    ##include "tinygettext/dictionary_manager.hpp"
    ##include "tinygettext/language.hpp"
    ##include "util/log.hpp"
    ##include "util/string_util.hpp"
    ##include "util/system.hpp"
    ##include <boost/signals2.hpp>
    ##include <map>
    ##include <sstream>
    ##include <vector>

    ##define new_GUI_Component() new GUI::Component()
    ##define ScreenManager__instance() ScreenManager::instance()
    ##define std__make_shared_GameSession std::make_shared<GameSession>
    ##define Display__get_width() Display::get_width()
    ##define Display__get_height() Display::get_height()
    ##define SU2str(x) StringUtil::to_string(x)
    ##define Fonts__chalk_large Fonts::chalk_large
    ##define Fonts__chalk_normal Fonts::chalk_normal
    ##define Fonts__chalk_small Fonts::chalk_small
    ##define StringFormat__break_line StringFormat::break_line

    ##define new_Pathname new Pathname

    ##define System__get_userdir() System::get_userdir()
    ##define Pathname__SYSTEM_PATH Pathname::SYSTEM_PATH

    ##define new_Label new Label

    extern tinygettext::DictionaryManager dictionary_manager;

    ##define std__vector_Option std::vector<Option>
    ##define new_Vector_Option new std::vector<Option>

    ##define resolution_string(s, w, h, rr) { std::ostringstream ostr; ostr << w << "x" << h << "@" << rr; s = ostr.str(); }

    ##define std__vector_SDL_DisplayMode std::vector<SDL_DisplayMode>
    ##define new_Display__get_fullscreen_video_modes() new std::vector<SDL_DisplayMode>(Display::get_fullscreen_video_modes());
    ##define new_Vector_Language new std::vector<tinygettext::Language>
    ##define copy_language_set(v) { std::set<tinygettext::Language> st = dictionary_manager.get_languages(); v->insert(v->begin(), st.begin(), st.end()); }
    ##define std__vector_Language std::vector<tinygettext::Language>
    ##define tinygettext__Language__from_name tinygettext::Language::from_name
end

native @pure _new_GUI_Component(), _ScreenManager__instance(), _std__make_shared_GameScreen(),
             _Display__get_width(), _Display__get_height(), _System__get_userdir(), _new_Pathname(),
             _SU2str(), _StringFormat__break_line(), _new_Label(), _new_Vector_Option(), _sscanf(), _copy_language_set(),
             _new_Display__get_fullscreen_video_modes(), _new_Vector_Language(), _tinygettext__Language__from_name();

interface IOptionMenu with
    function (void) => void close_screen;
end

////////////////////////////////////////////////

class SoftwareCursorSlot with
    interface BoolSlot;
do
    every v in signal do
        _config_manager.set_software_cursor(v);
    end
end

class FullscreenSlot with
    interface BoolSlot;
do
    every v in signal do
        _config_manager.set_fullscreen(v);
    end
end

class AutoscrollSlot with
    interface BoolSlot;
do
    every v in signal do
        _config_manager.set_auto_scrolling(v);
    end
end

class DragDropScrollingSlot with
    interface BoolSlot;
do
    every v in signal do
        _config_manager.set_drag_drop_scrolling(v);
    end
end

class MousegrabSlot with
    interface BoolSlot;
do
    every v in signal do
        _config_manager.set_mouse_grab(v);
    end
end

class PrintfpsSlot with
    interface BoolSlot;
do
    every v in signal do
        _config_manager.set_print_fps(v);
    end
end

class MasterVolumeSlot with
    interface IntSlot;
do
    every v in signal do        
        _config_manager.set_master_volume(v);
    end
end

class SoundVolumeSlot with
    interface IntSlot;
do
    every v in signal do
        _config_manager.set_sound_volume(v);
    end
end

class MusicVolumeSlot with
    interface IntSlot;
do
    every v in signal do
        _config_manager.set_music_volume(v);
    end
end

class ResolutionSlot with
    interface StringSlot;
do
    every v in signal do
        var Size size_;
        var int refresh_rate;
        if _sscanf(v, "%dx%d@%d", &size_.width, &size_.height, &refresh_rate) != 3 then
            _log_error("failed to parse: %1%", v);
        else
            /*
            #ifdef OLD_SDL1
                //original FIXME: ignoring refresh rate here
            #endif
            */

            _config_manager.set_fullscreen_resolution(_toSize(size_)); 
        end
    end
end

class RendererSlot with
    interface StringSlot;
do
    every v in signal do
        _config_manager.set_renderer(_framebuffer_type_from_string(_PTR2REF(v)));
    end
end

class LanguageSlot with
    interface StringSlot;
    var _OptionMenu&? option_menu;
do
    every v in signal do
        if option_menu.m_language_map.count(_PTR2REF(v)) then
            option_menu.m_language = _PTR2REF(option_menu.m_language_map.at(_PTR2REF(v)));
            _config_manager.set_language(_PTR2REF(option_menu.m_language));
        else  
            _log_error("unknown language: %1%", v);        
        end
    end
end

////////////////////////////////////////////////

class OptionMenuCloseButton with
    interface IGUI_Component;
    var IOptionMenu& parent;

    function @rec (int x, int y) => void set_pos;
do
    var SurfaceButton sb with
        this.me = outer.me;
        this.pos.x = _Display__get_width()/2 + 245;
        this.pos.y = _Display__get_height()/2 + 150;
    end;

    call/rec sb.load("core/start/ok", "core/start/ok_clicked", "core/start/ok_hover");

    var PrimaryButtonProxy p with this.gui = outer; end;
    var PointerProxy pp with this.gui = outer; end;
    var EventProxy ep with this.gui = outer; end;

    function @rec (int x, int y) => void set_pos do
        sb.set_pos(x, y);
    end

    par do
        every mouse_click do
            parent.close_screen();
            _Sound__PingusSound__play_sound("yipee");            
        end
    with
        every mouse_enter do
            _Sound__PingusSound__play_sound("tick");
        end
    end
end

////////////////////////////////////////////////

#define MakeCheckBox(varname, slotname) \
    var CheckBox varname with \
        this.me = _new_GUI__RectComponent(); \
        this.slot = slotname; \
    end;

#define MakeSliderBox(varname, slotname, steps) \
    var SliderBox varname with \
        this.me = _new_GUI__RectComponent(); \
        this.slot = slotname; \
        this.value = steps; \
        this.m_steps = steps; \
    end;

#define MakeChoiceBox(varname, slotname) \
    var ChoiceBox varname with \
        this.me = _new_GUI__RectComponent(); \
        this.slot = slotname; \
    end;

class OptionMenu with
    interface IOptionMenu;
    var _OptionMenu* me;
do
    var _OptionMenu&? option_menu = _PTR2REF((_OptionMenu*)me);

    var OptionMenuCloseButton ok_button with
        this.me = _new_GUI_Component();
        this.parent = outer;
    end;
    option_menu.gui_manager:add(&ok_button.me) finalize with end;

    var int x_pos = 0;
    var int y_pos = 0;

    var _std__vector_Option&? options = _new_Vector_Option();
    finalize with _delete_obj(options); end

    var ResolutionSlot resolution_slot;
    var RendererSlot renderer_slot;
    var LanguageSlot language_slot with
        this.option_menu = _PTR2REF(option_menu);
    end;

    MakeChoiceBox(resolution_box, resolution_slot);
    do
        var _std__vector_SDL_DisplayMode&? resolutions = _new_Display__get_fullscreen_video_modes();
        var Size fullscreen;
        _readSize(fullscreen, _config_manager.get_fullscreen_resolution());

        var int choice = resolutions.size()-1;
        var _std__string&? str = _new_String();
        loop i in resolutions.size() do        
            // add resolution to the box
            _resolution_string(_deref(str), resolutions.at(i).w, resolutions.at(i).h, resolutions.at(i).refresh_rate);
            resolution_box.add_choice(str.c_str());

            //original FIXME: ignoring refresh_rate
            if fullscreen.width == resolutions.at(i).w and fullscreen.height == resolutions.at(i).h then
                choice = i;
            end
        end

        resolution_box.set_current_choice(choice);
        _delete_obj(resolutions);
        _delete_obj(str);
    end

    MakeChoiceBox(renderer_box, renderer_slot);
    renderer_box.add_choice("sdl");
    renderer_box.add_choice("delta");
    renderer_box.add_choice("opengl");

    if _config_manager.get_renderer() == _SDL_FRAMEBUFFER then renderer_box.set_current_choice(0);
    else/if _config_manager.get_renderer() == _DELTA_FRAMEBUFFER then renderer_box.set_current_choice(1);
    else/if _config_manager.get_renderer() == _OPENGL_FRAMEBUFFER then renderer_box.set_current_choice(2);
    else _assert(not "unknown renderer type"); end

    option_menu.m_language = _PTR2REF(_dictionary_manager.get_language());  
    
    MakeChoiceBox(language_box, language_slot);
    do
        var _std__vector_Language&? langs = _new_Vector_Language();
        _copy_language_set(langs);

        // English is the default language, thus it's not in the list of
        // languages returned by tinygettext and we have to add it manually
        langs.push_back(_tinygettext__Language__from_name("en"));

        _std__sort(langs.begin(), langs.end(), _LanguageSorter());

        loop i in langs.size() do        
            finalize option_menu.m_language_map[langs.at(i).get_name()] = langs.at(i); with end;
            language_box.add_choice(langs.at(i).get_name().c_str());

            if option_menu.m_language == langs.at(i) then
                language_box.set_current_choice(i);
            end
        end

        _delete_obj(langs);
    end

    function (_const_char_string label, _GUI_RectComponent* control, int type) => void add_item do
        //type == 1 - CheckBox
        //type == 2, 3 - SliderBox, ChoiceBox

        var int x_offset = (_Display__get_width()  - 800)/2;
        var int y_offset = (_Display__get_height() - 600)/2;
        var Rect rect;
        Rect_load_XYWH(rect, 80 + x_offset + x_pos * 320, 140 + y_offset + y_pos * 32, 320, 32);

        var Rect left;
        var Rect right;
        Rect_load_LTRB(left, rect.left, rect.top, rect.right - 180, rect.bottom);
        Rect_load_LTRB(right, rect.left + 140, rect.top, rect.right, rect.bottom);

        var _Label&? label_component = _new_Label(__(label), _Rect());

        if type == 3 or type == 2 then
            label_component.set_rect(_toRect(left));
            control:set_rect(_toRect(right));
        else/if type == 1 then  
            control:set_rect(_Rect(_Vector2i(rect.left, rect.top), _Size(32, 32)));
            label_component.set_rect(_Rect(rect.left + 40, rect.top, rect.right, rect.bottom));
        else
            _assert(not "Unhandled control type");
        end

        option_menu.gui_manager:add(&label_component);
        option_menu.gui_manager:add(control);

        options.push_back(_Option(&label_component, control));

        y_pos = y_pos + 1;
    end

    var SoftwareCursorSlot software_cursor_slot;
    var FullscreenSlot fullscreen_slot;
    var AutoscrollSlot autoscroll_slot;
    var DragDropScrollingSlot dragdrop_scroll_slot;
    var MousegrabSlot mousegrab_slot;
    var PrintfpsSlot printfps_slot;

    var MasterVolumeSlot master_volume_slot;
    var SoundVolumeSlot sound_volume_slot;
    var MusicVolumeSlot music_volume_slot;

    MakeCheckBox(software_cursor_box, software_cursor_slot);   
    MakeCheckBox(fullscreen_box, fullscreen_slot);
    MakeCheckBox(autoscroll_box, autoscroll_slot);
    MakeCheckBox(dragdrop_scroll_box, dragdrop_scroll_slot);
    MakeCheckBox(mousegrab_box, mousegrab_slot);
    MakeCheckBox(printfps_box, printfps_slot);

    MakeSliderBox(master_volume_box, master_volume_slot, 25);
    MakeSliderBox(sound_volume_box, sound_volume_slot, 25);
    MakeSliderBox(music_volume_box, music_volume_slot, 25);

    master_volume_box.set_value(_config_manager.get_master_volume());
    sound_volume_box.set_value(_config_manager.get_sound_volume());
    music_volume_box.set_value(_config_manager.get_music_volume());

    x_pos = 0;
    y_pos = 0;
    add_item("Fullscreen", (_GUI_RectComponent*)&fullscreen_box.me, 1);
    add_item("Mouse Grab", (_GUI_RectComponent*)&mousegrab_box.me, 1);
    y_pos = y_pos + 1;
    add_item("Software Cursor", (_GUI_RectComponent*)&software_cursor_box.me, 1);
    add_item("Autoscrolling", (_GUI_RectComponent*)&autoscroll_box.me, 1);
    add_item("Drag&Drop Scrolling", (_GUI_RectComponent*)&dragdrop_scroll_box.me, 1);
    y_pos = y_pos + 1;
    add_item("Print FPS", (_GUI_RectComponent*)&printfps_box.me, 1);

    x_pos = 1;
    y_pos = 0;
    add_item("Resolution:",    (_GUI_RectComponent*)&resolution_box.me, 3);
    add_item("Renderer:",      (_GUI_RectComponent*)&renderer_box.me, 3);
    y_pos = y_pos + 1;
    add_item("Language:",        (_GUI_RectComponent*)&language_box.me, 3);
    y_pos = y_pos + 1;
    add_item("Master Volume:", (_GUI_RectComponent*)&master_volume_box.me, 2);
    add_item("Sound Volume:",  (_GUI_RectComponent*)&sound_volume_box.me, 2);
    add_item("Music Volume:",  (_GUI_RectComponent*)&music_volume_box.me, 2);
  
    mousegrab_box.set_state(_config_manager.get_mouse_grab());
    printfps_box.set_state(_config_manager.get_print_fps());
    fullscreen_box.set_state(_config_manager.get_fullscreen());
    software_cursor_box.set_state(_config_manager.get_software_cursor());
    autoscroll_box.set_state(_config_manager.get_auto_scrolling());
    dragdrop_scroll_box.set_state(_config_manager.get_drag_drop_scrolling());

    function (void) => void close_screen do
        _log_debug("OptionMenu: popping screen");
        _ScreenManager__instance():pop_screen();
        
        // save configuration
        var _Pathname&? cfg_filename = _new_Pathname(_scc2(_System__get_userdir(), "config"), _Pathname__SYSTEM_PATH);
        _log_info("saving configuration: %1%", _deref(cfg_filename));
        _config_manager.get_options().save(_deref(cfg_filename));
        _delete_obj(cfg_filename);
    end

    var Sprite background;
    var Sprite blackboard;
    call/rec background.reload_by_name("core/menu/wood");
    call/rec blackboard.reload_by_name("core/menu/blackboard");

    par do
        every package in SCREEN_DRAW_BACKGROUND do
            if package:screen != &option_menu then
                continue;
            end
            
            // Paint the background wood panel
            var int y = 0;
            loop do
                if y >= package:gc.get_height() then break; end
                var int x = 0;
                loop do
                    if x >= package:gc.get_width() then break; end
                    package:gc.draw(_deref(background.get()), _Vector2i(x, y));
                    x = x + background.get_width();
                end
                y = y + background.get_height();
            end

            package:gc.draw(_deref(blackboard.get()), _Vector2i(package:gc.get_width()/2, package:gc.get_height()/2));
    
            package:gc.print_center(_Fonts__chalk_large, _Vector2i(package:gc.get_width()/2, package:gc.get_height()/2 - 240), __("Option Menu"));

            package:gc.print_center(_Fonts__chalk_normal, _Vector2i(package:gc.get_width()/2 + 245 + 30, package:gc.get_height()/2 + 150 - 20), __("Close"));

            package:gc.print_left(_Fonts__chalk_normal, _Vector2i(package:gc.get_width()/2 - 320, package:gc.get_height()/2 + 200),
                        __("Some options require a restart of the game to take effect."));
        end
    with
        every screen in ON_ESCAPE_PRESS do
            if screen == &option_menu then
                close_screen();
            end
        end
    with
        every package in SCREEN_RESIZE do
            if package:screen != &option_menu then
                continue;
            end

            call/rec ok_button.set_pos(option_menu.size.width/2 + 245, option_menu.size.height/2 + 150);

            //original FIXME: this drifts due to rounding errors
            var int x_diff = (option_menu.size.width  - option_menu.old_size.width) / 2;
            var int y_diff = (option_menu.size.height - option_menu.old_size.height) / 2;

            var Rect rect;
            loop i in options.size() do
                if options.at(i).label then                    
                    _readRect(rect, options.at(i).label:get_rect());                    
                    options.at(i).label:set_rect(_Rect(_Vector2i(rect.left + x_diff, rect.top + y_diff), _Size(rect.right - rect.left, rect.bottom - rect.top)));
                end
                
                _readRect(rect, options.at(i).control:get_rect());
                options.at(i).control:set_rect(_Rect(_Vector2i(rect.left + x_diff, rect.top + y_diff), _Size(rect.right - rect.left, rect.bottom - rect.top)));
            end
        end
    end
end

#endif
