#ifndef STORY_SCREEN_CEU
#define STORY_SCREEN_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/gui/igui_component.ceu"
#include "../../engine/gui/surface_button.ceu"
#include "../../engine/screen/screen.ceu"
#include "../../engine/sound/sound.ceu"
#include "../../math/math.ceu"
#include "../iworld.ceu"
#include "../global_interface.ceu"

native/pre do
    ##include "engine/display/display.hpp"
    ##include "engine/gui/gui_manager.hpp"
    ##include "engine/gui/surface_button.hpp"
    ##include "engine/screen/screen_manager.hpp"
    ##include "engine/sound/sound.hpp"
    ##include "pingus/fonts.hpp"
    ##include "pingus/gettext.h"
    ##include "pingus/globals.hpp"
    ##include "pingus/screens/credits.hpp"
    ##include "pingus/screens/story_screen.hpp"
    ##include "util/utf8.hpp"

    ##define new_GUI_Component() new GUI::Component()
    ##define ScreenManager__instance() ScreenManager::instance()
    ##define Display__get_width() Display::get_width()
    ##define Display__get_height() Display::get_height()
    ##define Fonts__chalk_large Fonts::chalk_large
    ##define Fonts__chalk_normal Fonts::chalk_normal

    ##define WorldmapNS__WorldmapStory WorldmapNS::WorldmapStory
    ##define std__string__size_type std::string::size_type
    ##define UTF8__length UTF8::length
    ##define UTF8__substr UTF8::substr
    ##define std__vector_StoryPage std::vector<StoryPage>
    ##define new_Vector_StoryPage new std::vector<StoryPage>

    ##define std__make_shared_Credits std::make_shared<Credits>
    ##define new_StoryPage new StoryPage
end

native @pure _new_GUI_Component(), _ScreenManager__instance(), _std__make_shared_Credits(),
             _Display__get_width(), _Display__get_height(), _new_StoryPage(),
             _UTF8__length(), _UTF8__substr(), _new_Vector_StoryPage();

input _StoryScreen* DELETE_STORY_SCREEN;

interface IStoryScreenComponent with
    function @rec (void) => void next_text;
    function @rec (void) => void skip_story;
    function (void) => _WorldmapNS__WorldmapStory* get_story;
end

////////////////////////////////////////////////

class StoryScreenSkipButton with
    interface IGUI_Component;
    var IStoryScreenComponent* story_comp;

    function @rec (int x, int y) => void set_pos;
do
    var SurfaceButton sb with
        this.me = outer.me;
        this.pos.x = _Display__get_width() - 4;
        this.pos.y = _Display__get_height() - 26;
    end;

    var Relay r with
        this.src = outer;
        this.dst = sb;
    end;

    function @rec (Vector2i pos) => bool is_at_func do
        return (pos.x > sb.pos.x - ((int)_Fonts__chalk_small.get_width(__("skip")))
            and pos.x < sb.pos.x
            and pos.y > sb.pos.y
            and pos.y < sb.pos.y + ((int)_Fonts__chalk_small.get_height()));
    end

    ///call/rec sb.load("", "", ""), //original FIXME: Little fugly way to do a text button

    function @rec (int x, int y) => void set_pos do
        sb.set_pos(x, y);
    end

    par do
        every mouse_click do
            call/rec story_comp:skip_story();
        end
    with
        every mouse_enter do
            _Sound__PingusSound__play_sound("tick");
        end
    with
        every gc in draw do
            gc:print_right(_Fonts__chalk_small, _toVector2i(sb.pos), __("skip"));
        end
    end
end

////////////////////////////////////////////////

class StoryScreenContinueButton with
    interface IGUI_Component;
    var IStoryScreenComponent& story_comp;

    function @rec (int x, int y) => void set_pos;
do
    var SurfaceButton sb with
        this.me = outer.me;
        this.pos.x = _Display__get_width()/2 + 260;
        this.pos.y = _Display__get_height()/2 + 212;
    end;

    var Relay r with
        this.src = outer;
        this.dst = sb;
    end;

    function @rec (Vector2i pos) => bool is_at_func do
        return call/rec sb.is_at_func(pos);
    end

    call/rec sb.load("core/misc/next", "core/misc/next", "core/misc/next_hover");

    function @rec (int x, int y) => void set_pos do
        sb.set_pos(x, y);
    end

    par do
        every mouse_click do            
            call/rec story_comp.next_text();
        end
    with
        every mouse_enter do
            _Sound__PingusSound__play_sound("tick");
        end
    end
end

////////////////////////////////////////////////

class StoryScreenComponent with
    interface IStoryScreenComponent;
    interface IGUI_Component;
    var _WorldmapNS__WorldmapStory* story;
    var bool m_credits;
do
    RECT_IS_AT(&me);

    var Sprite background;
    var Sprite blackboard;
    call/rec background.reload_by_name("core/menu/wood");
    call/rec blackboard.reload_by_name("core/menu/blackboard");

    var _std__string&? display_text = _new_String();
    var float time_passed  = 0;
    var bool page_displayed_completly = false;
    var _std__vector_StoryPage&? pages = _new_Vector_StoryPage(story:get_pages());
    var _StoryPage&? current_page = _new_StoryPage(pages.back());
    var Sprite page_surface;
    call/rec page_surface.reload_by_desc(_addr(current_page.image));

    finalize with
        _delete_obj(display_text);
        _delete_obj(pages);
        _delete_obj(current_page);
    end  

    function @rec (void) => void next_text do
        if not page_displayed_completly then  
            page_displayed_completly = true;
            display_text = current_page.text;
        else  
            pages.pop_back();
            if not pages.empty() then            
                current_page = _PTR2REF(pages.back());
                call/rec page_surface.reload_by_desc(_addr(current_page.image));
                display_text = "";
                time_passed = 0;
                page_displayed_completly = false;
            else
                if m_credits then                    
                    _ScreenManager__instance():replace_screen(
                        _std__make_shared_Credits(_Pathname("credits/pingus.credits", _Pathname__DATA_PATH))
                    );
                else                    
                    _ScreenManager__instance():pop_screen();
                end
            end
        end
    end

    function @rec (void) => void skip_story do
        page_displayed_completly = true;
        loop do
            if pages.size() <= 1 then
                break;
            end
            pages.pop_back();
        end
        call/rec next_text();
    end

    function (void) => _WorldmapNS__WorldmapStory* get_story do
        return story;
    end

    par do
        every gc in draw do
            // Paint the background wood panel
            var int y = 0;
            loop do
                if y >= gc:get_height() then break; end
                var int x = 0;
                loop do
                    if x >= gc:get_width() then break; end
                    gc:draw(_deref(background.get()), _Vector2i(x, y));
                    x = x + background.get_width();
                end
                y = y + background.get_height();
            end

            gc:draw(_deref(blackboard.get()), _Vector2i(gc:get_width()/2, gc:get_height()/2));

            gc:print_center(_Fonts__chalk_large, _Vector2i(gc:get_width()/2, gc:get_height()/2 - 200), story:get_title());

            gc:draw(_deref(page_surface.get()), _Vector2i(gc:get_width()/2, gc:get_height()/2 - 65));

            gc:print_left(_Fonts__chalk_normal, _Vector2i(gc:get_width()/2  - 280, gc:get_height()/2 + 35), _deref(display_text));
        end
    with
        every delta in global:update do
            if not me.is_visible() then
                continue;
            end

            time_passed = time_passed + delta;

            if not page_displayed_completly then  
                var _std__string__size_type len = 20.0 * time_passed;
                var _std__string__size_type text_len = _UTF8__length(current_page.text);
      
                display_text = _UTF8__substr(current_page.text, 0, _Math__min(text_len, len));
       
                if text_len < len then
                    page_displayed_completly = true;
                end
            end
        end
    end
end

////////////////////////////////////////////////

class StoryScreen with
    interface Screen;
do    
    var GUIManager gui_manager with
        this.me = _new_GUI__RectComponent(_Rect(0, 0, _Display__get_width(), _Display__get_height()));
        this.drawing_context = _new_DrawingContext(_Rect(0, 0, _Display__get_width(), _Display__get_height()), false);
    end;
    var ScreenFramework sf with
        this.screen = outer;
        this.gui_manager = &gui_manager;
    end;

    var StoryScreenComponent story_comp with
        this.me = _new_GUI_Component();
        this.me.ceu = &this;

        var _StoryScreen&? story_screen = (_StoryScreen*)&me;
        this.story = _PTR2REF(story_screen.story.get());
        this.m_credits = story_screen.m_credits;
    end;

    var StoryScreenContinueButton continue_button with
        this.me = _new_GUI_Component();
        this.me.ceu = &this;
        this.story_comp = story_comp;
    end;

    gui_manager.add(&story_comp.me);
    gui_manager.add(&continue_button.me);

    var StoryScreenSkipButton*? skip_button = null;

    if _globals__developer_mode then
        skip_button = spawn StoryScreenSkipButton with
            this.me = _new_GUI_Component();
            this.me.ceu = &this;
            this.story_comp = &story_comp;
        end;
        gui_manager.add(&skip_button:me);
    end

    par/or do
        every on_startup do
            //original FIXME: Load the song from the WorldmapStory
            _Sound__PingusSound__play_music(story_comp.get_story():get_music(), 0.7);
        end
    with
        every on_escape_press do
            _ScreenManager__instance():pop_screen();
        end
    with
        every on_fast_forward_press do
            call/rec story_comp.next_text();
        end
    with
        every (width, height) in resize do
            call/rec continue_button.set_pos(width/2 + 260, height/2 + 212);
            if skip_button then
                call/rec skip_button:set_pos(width - 4, height - 26);
            end
        end
    with
        var _StoryScreen* e = await DELETE_STORY_SCREEN until (e == &me);
    end
end

#endif
