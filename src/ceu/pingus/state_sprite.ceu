#ifndef STATE_SPRITE_CEU
#define STATE_SPRITE_CEU

native/pre do
    ##include "engine/display/sprite.hpp"
    ##include "pingus/direction.hpp"
    ##include "pingus/state_sprite.hpp"
    ##define DIR_LEFT Direction::LEFT
    ##define DIR_RIGHT Direction::RIGHT
    ##define make_sprite(a, b, c) Sprite(a+b+c)
    ##define make_player_sprite(a, b) Sprite("pingus/player"+a+b)
    ##define concat(a, b) a "" b
    ##define concat2(a, b) std::string("pingus/player"+a+b).c_str()
    ##define const_char_string const char*

    ##define new_StateSprite() new StateSprite()
    ##define delete_StateSprite(s) delete s;
end

native @pure _new_StateSprite(),
             _delete_StateSprite(),
             _Sprite();

#define load_directions(sprite, suffix) sprite.load(_DIR_LEFT, _make_player_sprite(pingu.get_owner_str(), _concat(suffix, "left"))); \
                                                sprite.load(_DIR_RIGHT, _make_player_sprite(pingu.get_owner_str(), _concat(suffix, "right")));

#define load_file_directions(sprite, suffix) sprite.load_file(_DIR_LEFT, _concat2(pingu.get_owner_str(), _concat(suffix, "left"))); \
                                                     sprite.load_file(_DIR_RIGHT, _concat2(pingu.get_owner_str(), _concat(suffix, "right")));

class StateSprite with
    //function (int state, _Sprite&? sprite) => void load;
    function (int state, _const_char_string filename) => void load_file;
    function (void) => void update;
    function (float delta) => void update_delta;
    function (int state) => _Sprite* get;
do
    var _StateSprite&? ss = _PTR2REF(_new_StateSprite());
    finalize with _delete_StateSprite(ss); end;

    /*function (int state, char* ) => void load do
        ss.load(state, _REF(sprite));
    end*/

    function (int state, _const_char_string filename) => void load_file do
        ss.load(state, filename);
    end

    function (void) => void update do
        ss.update();
    end

    function (float delta) => void update_delta do
        ss.update(delta);
    end

    function (int state) => _Sprite* get do
        return _PTR2REF(&ss[state]);
    end

    await FOREVER;
end

#endif
