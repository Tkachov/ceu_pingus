native/pre do
    ##include <vector>
    ##define std__vector_void std::vector<void*>

    struct CreationPackage {
        FileReader* reader;
        std::vector<void*> result;
    };

    ##define new_CreationPackage() new CreationPackage()
    ##define vecget(v, i) v[i]
    ##define addr(x) &x
    ##define read_position(r, p) Vector3f __v; r->read_vector("position", __v); p.x = __v.x; p.y = __v.y; p.z = __v.z;
end

native @pure _new_CreationPackage(), _vecget(), _addr();

event _CreationPackage* create_group;
event _CreationPackage* create_prefab;
event _CreationPackage* create_object;
event _CreationPackage* create;

every package in create_group do    
    FileReader objects = reader.read_section("objects"); //
    std::vector<FileReader> sections = objects.get_sections(); //
    var _CreationPackage* new_package = _new_CreationPackage();
    loop i in sections.size() do
        new_package:reader = _addr(_vecget(sections, i));
        new_package:result.clear();
        emit create => new_package;       

        loop j in new_package:result.size() do 
            if _vecget(new_package:result, j) then
                package:result.push_back(_vecget(new_package:result, j));
            end
        end        
    end
    _delete_obj(new_package);
end

every package in create_prefab do
    _std__string name = _PTR2REF(_new_String());
    _string_read_string(name, package:reader, "name");

    var Vector3f pos;
    _read_position(package:reader, pos);

    PrefabFile prefab = PrefabFile::from_resource(name); //
    FileReader overrides; //
    package:reader:read_section("overrides", overrides); //
    
    const std::vector<FileReader>& objects = prefab.get_objects(); //
    var _CreationPackage* new_package = _new_CreationPackage();
    loop i in objects.size() do
        OverrideFileReader override_reader(_vecget(objects, i), overrides); //   
        new_package:reader = _addr(override_reader);
        new_package:result.clear();     
        emit create => new_package;

        loop j in new_package:result.size() do 
            if _vecget(new_package:result, j) then
                var IWorldObj* wobject = (IWorldObj*)_vecget(new_package:result, j);            
                wobject:pos.x = wobject:pos.x + pos.x;
                wobject:pos.y = wobject:pos.y + pos.y;
                wobject:pos.z = wobject:pos.z + pos.z;
                package:result.push_back(wobject);
            end
        end
    end
    _delete_obj(name);
    _delete_obj(new_package);
end

every package in create_object do
    if package:reader:get_name() == "liquid" then emit create_liquid => package;
    ///else/if ...
    else/if package:reader:get_name() == "groundpiece" then emit create_groundpiece => package;
    else _log_error("invalid id: '%1%'", package:reader:get_name()); end
end

every package in create do    
    if package:reader:get_name() == "group" then emit create_group => package;
    else/if package:reader:get_name() == "prefab" then emit create_prefab => package;
    else emit create_object => package; end
end