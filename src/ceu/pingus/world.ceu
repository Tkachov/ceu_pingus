#ifndef WORLD_CEU
#define WORLD_CEU

#include "../c.ceu"
#include "../sdl.ceu"
#include "iworld.ceu"
#include "pingu.ceu"
#include "pingu_holder.ceu"
#include "ground_map.ceu"
#include "particles/pingu_particles_holder.ceu"
#include "particles/rain_particles_holder.ceu"
#include "particles/smoke_particles_holder.ceu"
#include "particles/snow_particles_holder.ceu"
#include "worldobjs/conveyor_belt.ceu"
#include "worldobjs/entrance.ceu"
#include "worldobjs/exit.ceu"
#include "worldobjs/fake_exit.ceu"
#include "worldobjs/groundpiece.ceu"
#include "worldobjs/guillotine.ceu"
#include "worldobjs/hammer.ceu"
#include "worldobjs/hotspot.ceu"
#include "worldobjs/ice_block.ceu"
#include "worldobjs/laser_exit.ceu"
#include "worldobjs/liquid.ceu"
#include "worldobjs/rain_generator.ceu"
#include "worldobjs/smasher.ceu"
#include "worldobjs/snow_generator.ceu"
#include "worldobjs/solid_color_background.ceu"
#include "worldobjs/spike.ceu"
#include "worldobjs/starfield_background.ceu"
#include "worldobjs/surface_background.ceu"
#include "worldobjs/switch_door_door.ceu"
#include "worldobjs/switch_door_switch.ceu"
#include "worldobjs/teleporter.ceu"
#include "worldobjs/teleporter_target.ceu"

input _WOCPackage* NEW_CONVEYOR_BELT;
input _WOCPackage* NEW_ENTRANCE;
input _WOCPackage* NEW_EXIT;
input _WOCPackage* NEW_FAKE_EXIT;
input _WOCPackage* NEW_GROUNDPIECE;
input _WOCPackage* NEW_GUILLOTINE;
input _WOCPackage* NEW_HAMMER;
input _WOCPackage* NEW_HOTSPOT;
input _WOCPackage* NEW_ICE_BLOCK;
input _WOCPackage* NEW_LASER_EXIT;
input _WOCPackage* NEW_LIQUID;
input _WOCPackage* NEW_RAIN_GENERATOR;
input _WOCPackage* NEW_SMASHER;
input _WOCPackage* NEW_SNOW_GENERATOR;
input _WOCPackage* NEW_SOLID_COLOR_BACKGROUND;
input _WOCPackage* NEW_SPIKE;
input _WOCPackage* NEW_STARFIELD_BACKGROUND;
input _WOCPackage* NEW_SURFACE_BACKGROUND;
input _WOCPackage* NEW_SWITCH_DOOR_DOOR;
input _WOCPackage* NEW_SWITCH_DOOR_SWITCH;
input _WOCPackage* NEW_TELEPORTER;
input _WOCPackage* NEW_TELEPORTER_TARGET;

input _PrefabPackage* PREFAB_POS;
input _WorldGetSizePackage* WORLD_GET_SIZE;

native/pre do
    ##define reader_read_Groundtype(r, s, v) r->read_enum(s, v, &Groundtype::string_to_type);

    ##include "pingus/resource.hpp"
    ##define Resource__load_surface Resource::load_surface

    ##define opeq(x, y) *x = y
    ##define new_Surface() new Surface()

    ##include "util/container.h"
    ##define new_Container() new Container()

    ##define read_position(r, p) { Vector3f __v; r->read_vector("position", __v); p.x = __v.x; p.y = __v.y; p.z = __v.z; }
    ##define read_position2(r, p, res) Vector3f __v; res = r->read_vector("position", __v); p.x = __v.x; p.y = __v.y; p.z = __v.z;

    ##define new_Color new Color

    ##include <vector>
    ##include "pingus/prefab_file.hpp"
    ##include "util/log.hpp"
    ##include "util/overrride_file_reader.hpp"
    ##include "util/file_reader.hpp"
    ##define std__vector_void std::vector<void*>

    struct CreationPackage {
        FileReader* reader;
        std::vector<void*> result;
    };

    ##define new_CreationPackage() new CreationPackage()
    ##define vecget(v, i) v[i]
    ##define vecget_addr(v, i) &((*v)[i])
    ##define addr(x) &x
    
    ##define new_OverrideFileReader(v, i, b) new OverrideFileReader((*v)[i], b)
    ##define const_std__vector_FileReader const std::vector<FileReader>
    ##define std__vector_FileReader std::vector<FileReader>
    ##define new_FileReader() new FileReader()
    
    ##define new_std__vector_FileReader(package) new std::vector<FileReader>(package->reader->read_section("objects").get_sections())    
    ##define new_PrefabFile(x) new PrefabFile(PrefabFile::from_resource(x))    
end

native @pure _new_CreationPackage(), _vecget(), _vecget_addr(), _addr(), _new_OverrideFileReader(), _new_FileReader(),
             _new_std__vector_FileReader(), _new_PrefabFile(), _PrefabFile__from_resource();

native @pure _reader_read_Groundtype(), _Resource__load_surface(), _opeq(), _new_Surface(), _new_Container(), _new_Color(),
             _read_position(), _read_position2(), _log_error(), _log_warn();

input void STARTUP_WORLD;
input void DELETE_WORLD;

input IWorldObj* WORLD_STARTUP_OBJECT;
input IWorldObj* WORLD_DRAW_OBJECT;
input IWorldObj* WORLD_DRAW_SMALLMAP_OBJECT;
input IWorldObj* WORLD_UPDATE_OBJECT;
input IWorldObj* WORLD_DELETE_OBJECT;

class World with
    interface IWorld;
    pool Entrance[] entrances;
    pool ITeleporterTarget[] teleporter_targets;
    pool ISwitchDoorDoor[] switch_door_doors;
    var _PingusLevel&? pingus_level;

    event _CreationPackage* create_group;
    event _CreationPackage* create_prefab;
    event _CreationPackage* create_object;
    event _CreationPackage* create;
    
    event _CreationPackage* create_liquid;
    event _CreationPackage* create_hotspot;
    event _CreationPackage* create_entrance;
    event _CreationPackage* create_exit;
    event _CreationPackage* create_fake_exit;
    event _CreationPackage* create_guillotine;
    event _CreationPackage* create_hammer;
    event _CreationPackage* create_laser_exit;
    event _CreationPackage* create_smasher;
    event _CreationPackage* create_spike;
    event _CreationPackage* create_switchdoor_switch;
    event _CreationPackage* create_switchdoor_door;
    event _CreationPackage* create_iceblock;
    event _CreationPackage* create_conveyorbelt;
    event _CreationPackage* create_teleporter;
    event _CreationPackage* create_teleporter_target;
    event _CreationPackage* create_surface_background;
    event _CreationPackage* create_starfield_background;
    event _CreationPackage* create_solidcolor_background;
    event _CreationPackage* create_snow_generator;
    event _CreationPackage* create_rain_generator;
    event _CreationPackage* create_groundpiece;
do
    var _Container&? objs = _PTR2REF(_new_Container());
    finalize with _delete_obj(objs); end

    var bool do_armageddon = false;
    var int armageddon_count = 0;
    var int game_time = 0;
    var _Color&? ambient_light = _new_Color(pingus_level.get_ambient_light());
    finalize with _delete_obj(ambient_light); end

    var PinguHolder holder with
        this.number_of_allowed = pingus_level.get_number_of_pingus();
    end;

    var PinguParticlesHolder pingu_particles_holder;
    var RainParticlesHolder rain_particles_holder;
    var SmokeParticlesHolder smoke_particles_holder;
    var SnowParticlesHolder snow_particles_holder;

    var GroundMap gfx_map with
        this.gmap = _PTR2REF(_new_GroundMap(pingus_level.get_size().width, pingus_level.get_size().height));
    end;

    //////////// FUNCTIONS /////////////

    function (void) => bool check_armageddon do
        return do_armageddon;
    end

    function (int player_id) => _Vector2i get_start_pos do
        //original FIXME: Workaround for lack of start-pos
        var int num_entrances = 0;
        var int px = 0;
        var int py = 0;

        loop entrance in entrances do
            if entrance:owner_id == player_id then
                px = px + entrance:get_pos().x;
                py = py + entrance:get_pos().y;
                num_entrances = num_entrances + 1;
            end
        end

        if num_entrances>0 then
            px = px/num_entrances;
            py = py/num_entrances + 100;
        end

        return _Vector2i(px, py);
    end

    function (void) => int get_time do
        return game_time;
    end

    function (_const_char_string name, Vector3f pos, float volume) => void play_sound do
        //original FIXME: Stereo is for the moment disabled
        /*
        Vector3f center = view->get_center();
        float panning = pos.x - center.x;
        panning /= view->get_width()/2;

        if (panning > 1.0f)
            panning = 1.0f;

        if (panning < -1.0f)
            panning = -1.0f;
        */
        var float panning = 0;
        _Sound_PingusSound_play_sound(name, volume, panning);
    end

    function @rec (IWorldObj* o) => void add_object do
        objs.add((void*)o, o:get_z_pos());
        objs.sort();
    end

    function (IWorldObj* o) => void remove_object do
        objs.remove((void*)o);
    end

    function (void) => int get_width do
        return gfx_map.gmap.get_width();
    end

    function (void) => int get_height do
        return gfx_map.gmap.get_height();
    end

    function (void) => _GroundMap* get_gfx_map do
        return &gfx_map.gmap;
    end

    function (void) => _CollisionMap* get_colmap do
        return _PTR2REF(gfx_map.gmap.colmap.get());
    end

    function (void) => IPinguHolder* get_pingus do
        return holder;
    end

    function (void) => IPinguParticlesHolder* get_pingu_particles_holder do
        return pingu_particles_holder;
    end

    function (void) => IRainParticlesHolder* get_rain_particles_holder do
        return rain_particles_holder;
    end

    function (void) => ISmokeParticlesHolder* get_smoke_particles_holder do
        return smoke_particles_holder;
    end

    function (void) => ISnowParticlesHolder* get_snow_particles_holder do
        return snow_particles_holder;
    end

    function (void) => float get_gravity do
        return 0.2;
    end

    function (_const_char_string id) => ITeleporterTarget* get_teleporter_target do
        loop target in teleporter_targets do
            if target:id == id then
                return target;
            end
        end

        return null;
    end

    function (_const_char_string id) => ISwitchDoorDoor* get_switch_door_door do
        loop door in switch_door_doors do
            if door:id == id then
                return door;
            end
        end

        return null;
    end

    function (_CollisionMask* mask, int x, int y, int type) => void put do
        gfx_map.gmap.put(mask:get_surface(), x, y);
        gfx_map.gmap.colmap:put(_deref(mask), x, y, _to_GT(type));
    end

    function (_CollisionMask* mask, int x, int y) => void remove do
        gfx_map.gmap.remove(mask:get_surface(), x, y);
        gfx_map.gmap.colmap:remove(_deref(mask), x, y);
    end

    function (_const_char_string str, int x, int y, int t) => void put_str do
        var _CollisionMask* mask = _new_CollisionMask(str);
        put(mask, x, y, t);
        _delete_obj(mask);
    end

    function (_const_char_string str, int x, int y) => void remove_str do
        var _CollisionMask* mask = _new_CollisionMask(str);
        remove(mask, x, y);
        _delete_obj(mask);
    end

    //////////// EVENTS /////////////

    var bool draw_iterating = false;
    var _SceneContext* gc = null;

    par/or do
        every gspackage in WORLD_GET_SIZE do
            gspackage:width = get_width();
            gspackage:height = get_height();
        end
    with
        every e_CREATE do
            var _const_std__vector_FileReader* ov = _addr(pingus_level.get_objects());
            var _CreationPackage* pack = _new_CreationPackage();
            _printf("going to do %d emits\n----\n", ov:size());
            loop i in ov:size() do                
                pack:reader = _PTR2REF((_FileReader*)_vecget_addr(ov, i));
                pack:result.clear();
                _printf("create #%d\n", i+1);
                emit create => pack;

                _printf("created %d item(s)\n", pack:result.size());
                loop j in pack:result.size() do              
                    if _vecget(pack:result, j) then
                        _printf("\t pointer [%d] valid\n", j);
                        var IWorldObj* wobject = (IWorldObj*)_vecget(pack:result, j);            
                        emit wobject:e_STARTUP;
                    end                    
                end
                _printf("\n");
            end
            _delete_obj(pack); 
        end
    with
        every STARTUP_WORLD do
            objs.iterate(_CEU_IN_WORLD_STARTUP_OBJECT);
        end
    with
        every object in WORLD_STARTUP_OBJECT do
            emit object:e_STARTUP;
        end
    with
        every wgc in e_DRAW do
            wgc:light().fill_screen(_Color(_deref(ambient_light)));

            draw_iterating = true;
            gc = _PTR2REF(wgc);
            objs.iterate(_CEU_IN_WORLD_DRAW_OBJECT);
            draw_iterating = false;
            gc = null;
        end
    with
        every object in WORLD_DRAW_OBJECT do
            if draw_iterating and gc != null then
                emit object:e_DRAW => gc;
            end
        end
    with
        every e_UPDATE do
            game_time = game_time + 1;

            if do_armageddon and game_time%4 == 0 then
                loop pingu in holder.all_pingus do
                    if pingu:get_current_action() == _A_BOMBER or pingu:get_current_action() == _A_DROWN or
                       pingu:get_current_action() == _A_SPLASHED or pingu:get_current_action() == _A_LASERKILL or
                       pingu:get_current_action() == _A_DEAD or pingu:get_current_action() == _A_EXITED then
                        continue;
                    end

                    emit pingu:e_CHANGE_ACTION => _A_BOMBER;
                    break;
                end
            end

            objs.iterate(_CEU_IN_WORLD_UPDATE_OBJECT);
        end
    with
        every object in WORLD_UPDATE_OBJECT do
            emit object:e_UPDATE;
        end
    with
        every e_ARMAGEDDON do
            _Sound_PingusSound_play_sound("goodidea");
            do_armageddon = true;
            armageddon_count = 0;
        end
    with
        every package in create_group do
            _printf("\tcreate_group\n");        
            var _std__vector_FileReader&? sections = _new_std__vector_FileReader(package);                        
            var _CreationPackage* new_package = _new_CreationPackage();
            
            loop i in sections.size() do                      
                new_package:reader = _vecget_addr(sections, i);                
                new_package:result.clear();                
                emit create => new_package;       
                
                loop j in new_package:result.size() do                 
                    if _vecget(new_package:result, j) then
                        package:result.push_back(_vecget(new_package:result, j));
                    end
                end        
                
            end
            _delete_obj(sections);
            _delete_obj(new_package);
        end
    with
        every package in create_prefab do          
            _printf("\tcreate_prefab\n"); 
            var _std__string&? name = _PTR2REF(_new_String());
            _string_read_string(name, package:reader, "name");

            var Vector3f pos;
            _read_position(package:reader, pos);

            var _PrefabFile&? prefab = _new_PrefabFile(_deref(name));            
            var _FileReader&? overrides = _new_FileReader();
            package:reader:read_section("overrides", _deref(overrides));
            
            var _const_std__vector_FileReader* objects = _addr(prefab.get_objects());
            var _CreationPackage* new_package = _new_CreationPackage();
            
            loop i in objects:size() do
                var _OverrideFileReader&? override_reader = _new_OverrideFileReader(objects, i, _deref(overrides));
                new_package:reader = _PTR2REF(override_reader);
                new_package:result.clear(); 
                emit create => new_package;

                loop j in new_package:result.size() do                     
                    if _vecget(new_package:result, j) then
                        var IWorldObj* wobject = (IWorldObj*)_vecget(new_package:result, j);            
                        wobject:pos.x = wobject:pos.x + pos.x;
                        wobject:pos.y = wobject:pos.y + pos.y;
                        wobject:pos.z = wobject:pos.z + pos.z;
                        package:result.push_back(wobject) finalize with end;
                    end                    
                end                
            end            
            _delete_obj(name);
            _delete_obj(prefab);
            _delete_obj(overrides);
            _delete_obj(new_package);            
        end
    with
        every package in create_object do
            _printf("\tcreate_object (%s)\n", package:reader:get_name().c_str()); 
            if package:reader:get_name() == "liquid" then emit create_liquid => package;            
            else/if package:reader:get_name() == "hotspot" then emit create_hotspot => package;
            else/if package:reader:get_name() == "entrance" then emit create_entrance => package;
            else/if package:reader:get_name() == "exit" then emit create_exit => package;
            // traps
            else/if package:reader:get_name() == "fake_exit" then emit create_fake_exit => package;
            else/if package:reader:get_name() == "guillotine" then emit create_guillotine => package;
            else/if package:reader:get_name() == "hammer" then emit create_hammer => package;
            else/if package:reader:get_name() == "laser_exit" then emit create_laser_exit => package;
            else/if package:reader:get_name() == "smasher" then emit create_smasher => package;
            else/if package:reader:get_name() == "spike" then emit create_spike => package;
            // Special Objects
            else/if package:reader:get_name() == "switchdoor-switch" then emit create_switchdoor_switch => package;
            else/if package:reader:get_name() == "switchdoor-door" then emit create_switchdoor_door => package;
            else/if package:reader:get_name() == "iceblock" then emit create_iceblock => package;
            else/if package:reader:get_name() == "conveyorbelt" then emit create_conveyorbelt => package;
            else/if package:reader:get_name() == "teleporter" then emit create_teleporter => package;
            else/if package:reader:get_name() == "teleporter-target" then emit create_teleporter_target => package;
            // Backgrounds
            else/if package:reader:get_name() == "surface-background" then emit create_surface_background => package;
            else/if package:reader:get_name() == "starfield-background" then emit create_starfield_background => package;
            else/if package:reader:get_name() == "solidcolor-background" then emit create_solidcolor_background => package;
            // Weather
            else/if package:reader:get_name() == "snow-generator" then emit create_snow_generator => package;
            else/if package:reader:get_name() == "rain-generator" then emit create_rain_generator => package;
            // Weather-Backward compability
            else/if package:reader:get_name() == "snow" then emit create_snow_generator => package;
            else/if package:reader:get_name() == "rain" then emit create_rain_generator => package;
            // Groundpieces
            else/if package:reader:get_name() == "groundpiece" then emit create_groundpiece => package;            
            else _log_error("invalid id: '%1%'", package:reader:get_name()); end
        end
    with
        every package in create do
            if package:reader:get_name().compare("group") == 0 then emit create_group => package;
            else/if package:reader:get_name().compare("prefab") == 0 then emit create_prefab => package;
            else emit create_object => package; end
        end
    with
        every package in create_conveyorbelt do
            spawn ConveyorBelt with
                package:result.push_back(&this) finalize with end;

                _read_position(package:reader, this.pos);
                if not package:reader:read_int("repeat", _PTR2REF(this.width)) then
                    _log_warn("old 'width' tag used");
                    package:reader:read_int("width", _PTR2REF(this.width));
                end
                package:reader:read_float("speed", _PTR2REF(this.speed));
            end;
        end
    with
        every package in create_entrance do
            spawn Entrance in entrances with
                package:result.push_back(&this) finalize with end;

                this.direction = ED_MISC;
                this.release_rate = 150;
                this.owner_id = 0;

                package:reader:read_int("owner-id", _PTR2REF(this.owner_id));
                _read_position(package:reader, this.pos);
                package:reader:read_int("release-rate",  _PTR2REF(this.release_rate));

                // Set default owner ID to 0
                if this.owner_id<0 or this.owner_id>3 then
                    this.owner_id = 0;
                end

                var _std__string&? direction_str = _PTR2REF(_new_String());
                _string_read_string(direction_str, package:reader, "direction");

                if direction_str == "left" then
                    this.direction = ED_LEFT;
                else/if direction_str == "right" then
                    this.direction = ED_RIGHT;
                else/if direction_str == "misc" then
                    this.direction = ED_MISC;
                else
                    _log_error("unknown direction: '%1%'", direction_str);
                    this.direction = ED_MISC;
                end

                _delete_obj(direction_str);
            end;
        end;
    with
        every package in create_exit do
            spawn Exit with
                package:result.push_back(&this) finalize with end;

                this.desc = _PTR2REF(_new_ResDescriptor());

                _read_position(package:reader, this.pos);
                this.construct(package:reader); //can't put reference initiation there =(

                this.flag = _PTR2REF(_new_SpriteA(_scc2("core/misc/flag", _StringUtil__to_string(this.owner_id))));
            end;
        end
    with
        every package in create_fake_exit do
            spawn FakeExit with
                package:result.push_back(&this) finalize with end;
                _read_position(package:reader, this.pos);
            end;
        end
    with
        every package in create_groundpiece do
            spawn Groundpiece with
                package:result.push_back(&this) finalize with end;

                _read_position(package:reader, this.pos);
                this.desc = _PTR2REF(_new_ResDescriptor());
                package:reader:read_desc("surface", _deref(this.desc));
                this.gptype = _GT_GROUND;
                _reader_read_Groundtype(package:reader, "type", _PTR2REF(this.gptype));
            end;
        end
    with
        every package in create_guillotine do
            spawn Guillotine with
                package:result.push_back(&this) finalize with end;
                _read_position(package:reader, this.pos);
            end;
        end
    with
        every package in create_hammer do
            spawn Hammer with
                package:result.push_back(&this) finalize with end;
                _read_position(package:reader, this.pos);
            end;
        end
    with
        every package in create_hotspot do
            spawn Hotspot with
                package:result.push_back(&this) finalize with end;

                var _ResDescriptor&? desc = _PTR2REF(_new_ResDescriptor());

                _read_position(package:reader, this.pos);
                package:reader:read_desc  ("surface",  _deref(desc));
                package:reader:read_float ("parallax", _PTR2REF(this.para));

                this.sprite = _PTR2REF(_new_SpriteA(_deref(desc)));

                _delete_obj(desc);
            end;
        end
    with
        every package in create_iceblock do
            spawn IceBlock with
                package:result.push_back(&this) finalize with end;

                _read_position(package:reader, this.pos);
                if not package:reader:read_int("repeat", _PTR2REF(this.width)) then
                    _log_warn("old 'width' tag used");
                    package:reader:read_int("width", _PTR2REF(this.width));
                end
            end;
        end
    with
        every package in create_laser_exit do
            spawn LaserExit with
                package:result.push_back(&this) finalize with end;
                _read_position(package:reader, this.pos);
            end;
        end
    with
        every package in create_liquid do
            spawn Liquid with
                package:result.push_back(&this) finalize with end;

                this.width = 0;

                var _ResDescriptor&? desc = _PTR2REF(_new_ResDescriptor());

                _read_position(package:reader, this.pos);
                package:reader:read_desc  ("surface",  _deref(desc));
                package:reader:read_int   ("repeat",   _PTR2REF(this.width));

                this.sprite = _PTR2REF(_new_SpriteA(_deref(desc)));

                _delete_obj(desc);
            end;
        end
    with
        every package in create_rain_generator do
            spawn RainGenerator with
                package:result.push_back(&this) finalize with end;
            end;
        end
    with
        every package in create_smasher do
            spawn Smasher with
                package:result.push_back(&this) finalize with end;
                _read_position(package:reader, this.pos);
            end;
        end
    with
        every package in create_snow_generator do
            spawn SnowGenerator with
                package:result.push_back(&this) finalize with end;

                this.intensity = 1;
                package:reader:read_float("intensity", _PTR2REF(this.intensity));
            end;
        end
    with
        every package in create_solidcolor_background do
            spawn SolidColorBackground with
                package:result.push_back(&this) finalize with end;

                this.color = _PTR2REF(_new_Color());
                if not package:reader:read_colori("colori", _deref(this.color)) then
                    package:reader:read_colorf("color", _deref(this.color));
                end
            end;
        end
    with
        every package in create_spike do
            spawn Spike with
                package:result.push_back(&this) finalize with end;
                _read_position(package:reader, this.pos);
            end;
        end
    with
        every package in create_starfield_background do
            spawn StarfieldBackground with
                package:result.push_back(&this) finalize with end;

                this.small_stars_count = 100;
                this.middle_stars_count = 50;
                this.large_stars_count = 25;

                package:reader:read_int("small-stars", _PTR2REF(this.small_stars_count));
                package:reader:read_int("middle-stars", _PTR2REF(this.middle_stars_count));
                package:reader:read_int("large-stars", _PTR2REF(this.large_stars_count));
            end;
        end
    with
        every package in create_surface_background do
            spawn SurfaceBackground with
                package:result.push_back(&this) finalize with end;

                this.para_x = 0.5;
                this.para_y = 0.5;
                this.scroll_x = 0;
                this.scroll_y = 0;
                this.color = _PTR2REF(_new_Color(0, 0, 0, 0));
                this.stretch_x = false;
                this.stretch_y = false;
                this.keep_aspect = false;
                this.scroll_ox = 0;
                this.scroll_oy = 0;

                var bool res;
                _read_position2(package:reader, this.pos, res);
                if not res then
                    this.pos.x = 0;
                    this.pos.y = 0;
                    this.pos.z = -150;
                end

                var _ResDescriptor&? desc = _PTR2REF(_new_ResDescriptor());
                package:reader:read_desc("surface",  _deref(desc));

                if not package:reader:read_colori("colori", _deref(this.color)) then
                    package:reader:read_colorf("color", _deref(this.color));
                end

                package:reader:read_float("para-x", _PTR2REF(this.para_x));
                package:reader:read_float("para-y", _PTR2REF(this.para_y));

                package:reader:read_float("scroll-x", _PTR2REF(this.scroll_x));
                package:reader:read_float("scroll-y", _PTR2REF(this.scroll_y));

                package:reader:read_bool("stretch-x", _PTR2REF(this.stretch_x));
                package:reader:read_bool("stretch-y", _PTR2REF(this.stretch_y));

                package:reader:read_bool("keep-aspect", _PTR2REF(this.keep_aspect));

                if not this.stretch_x and not this.stretch_y and this.color.a == 0 then
                    //orignal FIXME: would be nice to allow surface manipulation with
                    // animated sprites, but it's not that easy to do
                    this.sprite = _PTR2REF(_new_SpriteA(_deref(desc)));
                else
                    var _Surface&? surface = _new_Surface();
                    _opeq(surface, _Resource__load_surface(_deref(desc)));

                    if this.color.a != 0 and surface.is_indexed() then
                        if surface.has_colorkey() then
                            _opeq(surface, surface.convert_to_rgba());
                        else
                            _opeq(surface, surface.convert_to_rgb());
                        end
                    end

                    surface.fill(_deref(this.color));

                    // Scaling Code
                    if this.stretch_x and this.stretch_y then
                        _opeq(surface, surface.scale(global:world:get_width(), global:world:get_height()));
                    else/if this.stretch_x and not this.stretch_y then
                        if this.keep_aspect then
                            var float aspect = (float)surface.get_height() / (float)surface.get_width();
                            _opeq(surface, surface.scale(global:world:get_width(), (int)((float)global:world:get_width()*aspect)));
                        else
                            _opeq(surface, surface.scale(global:world:get_width(), surface.get_height()));
                        end
                    else/if not this.stretch_x and this.stretch_y then
                        if this.keep_aspect then
                            var float aspect = (float)surface.get_width() / (float)surface.get_height();
                            _opeq(surface, surface.scale((int)((float)global:world:get_height()*aspect), global:world:get_height()));
                        else
                            _opeq(surface, surface.scale(surface.get_width(), global:world:get_height()));
                        end
                    end

                    this.sprite = _PTR2REF(_new_SpriteA(_deref(surface)));
                end

                _delete_obj(desc);
            end;
        end
    with
        every package in create_switchdoor_door do
            spawn SwitchDoorDoor in switch_door_doors with
                package:result.push_back(&this) finalize with end;

                this.id = _PTR2REF(_new_String());
                _string_read_string(this.id, package:reader, "id");

                _read_position(package:reader, this.pos);

                package:reader:read_int("height", _PTR2REF(this.door_height));
                this.current_door_height = this.door_height;
            end;
        end
    with
        every pack4ge in create_switchdoor_switch do
            spawn SwitchDoorSwitch with
                pack4ge:result.push_back(&this) finalize with end;

                this.m_target = _PTR2REF(_new_String());
                _string_read_string(this.m_target, pack4ge:reader, "target-id");
                _read_position(pack4ge:reader, this.pos);
            end;
        end
    with
        every packag3 in create_teleporter do
            spawn Teleporter with
                packag3:result.push_back(&this) finalize with end;

                _read_position(packag3:reader, this.pos);
                this.target_id = _PTR2REF(_new_String());
                _string_read_string(this.target_id, packag3:reader, "target-id");
            end;
        end
    with
        every package in create_teleporter_target do
            spawn TeleporterTarget in teleporter_targets with
                package:result.push_back(&this) finalize with end;

                this.id = _PTR2REF(_new_String());
                _string_read_string(this.id, package:reader, "id");
                _read_position(package:reader, this.pos);
            end;
        end
    with
        await DELETE_WORLD;
        objs.iterate(_CEU_IN_WORLD_DELETE_OBJECT);
        //loop i in objs.size() do
        //    emit ((IWorldObj*)objs.get(i)):e_DELETE;
        //end
    with
        every object in WORLD_DELETE_OBJECT do
            emit object:e_DELETE;
        end
    end
    global:world = null;
end

#endif
