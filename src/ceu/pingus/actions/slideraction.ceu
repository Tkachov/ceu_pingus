#ifndef SLIDERACTION_CEU
#define SLIDERACTION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/scene_context.ceu"
#include "../../math/vector3f.ceu"
#include "../iaction.ceu"
#include "../ipingu.ceu"
#include "../state_sprite.ceu"

class SliderAction with
    interface IAction;
    interface IPinguAction;
do
    var _PinguAction&? slider = _PTR2REF(pingu.set_ptr(_A_SLIDER));
    pingu.ceu_action = &this;

    function (int a) => bool change_allowed do
        return true;
    end

    catchable = true;

    function (void) => Vector3f get_center_pos do
        var Vector3f result;
        result.x = pingu.me.get_pos().x;
        result.y = pingu.me.get_pos().y - 16;
        result.z = pingu.me.get_pos().z;
        return result;
    end

    var StateSprite sprite;
    load_file_directions(sprite, slider, "/slider/");

    var float speed = 10;

    par do
        every gc in pingu.e_DRAW_CALLED do
            _gc_color_draw2(gc, sprite.get(slider.pingu:direction), slider.pingu:get_pos() + _Vector3f(0, -2));
        end
    with
        every pingu.e_UPDATE_CALLED do
            sprite.get(slider.pingu:direction):update();

            loop/100 i in speed do
                if pingu.rel_getpixel(1, 0) != _GT_NOTHING then
                    break;
                end

                slider.pingu:set_x(slider.pingu:get_x() + (float)slider.pingu:direction);

                if pingu.rel_getpixel(0, -1) == _GT_NOTHING then
                    if speed > 5 then
                        speed = 5;
                    end

                    var float x_speed = speed;
                    if not slider.pingu:direction.is_right() then
                        x_speed = -speed;
                    end

                    slider.pingu:set_velocity(slider.pingu:get_velocity() + _Vector3f(x_speed, 0));

                    escape _A_FALLER;
                end
            end

            speed = speed - 7*0.025;

            if speed < 1 then
                escape _A_WALKER;
            end
        end
    end
end

#endif
