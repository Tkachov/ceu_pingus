#ifndef SLIDERACTION_CEU
#define SLIDERACTION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/scene_context.ceu"
#include "../../math/vector3f.ceu"
#include "../iaction.ceu"
#include "../ipingu.ceu"
#include "../state_sprite.ceu"

class SliderAction with
    interface IAction;
    interface IPinguAction;
do    
    pingu.ceu_action = &this;

    function (int a) => bool change_allowed do
        return true;
    end

    catchable = true;

    function @rec (void) => Vector3f get_center_pos do
        var Vector3f result;
        result.x = pingu.get_pos().x;
        result.y = pingu.get_pos().y - 16;
        result.z = pingu.get_pos().z;
        return result;
    end

    function (void) => _const_char_string get_name do
        return _get_screenname(_A_SLIDER);
    end

    var StateSprite sprite;
    load_file_directions(sprite, "/slider/");

    var float speed = 10;

    par do
        every gc in pingu.e_DRAW_CALLED do
            _gc_color_draw2(gc, sprite.get(pingu.direction), pingu.get_pos() + _Vector3f(0, -2));
        end
    with
        every PINGU_UPDATE_ALL do
            sprite.get(pingu.direction):update();

            loop/100 i in speed do
                if pingu.rel_getpixel(1, 0) != _GT_NOTHING then
                    break;
                end

                pingu.set_x(pingu.get_x() + (float)pingu.direction);

                if pingu.rel_getpixel(0, -1) == _GT_NOTHING then
                    if speed > 5 then
                        speed = 5;
                    end

                    var float x_speed = speed;
                    if not pingu.direction.is_right() then
                        x_speed = -speed;
                    end

                    var Vector3f newvel = pingu.get_velocity();
                    newvel.x = newvel.x + x_speed;
                    pingu.set_velocity(newvel);

                    escape _A_FALLER;
                end
            end

            speed = speed - 7*0.025;

            if speed < 1 then
                escape _A_WALKER;
            end
        end
    end
end

#endif
