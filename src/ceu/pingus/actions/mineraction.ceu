#ifndef MINERACTION_CEU
#define MINERACTION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iaction.ceu"
#include "../ipingu.ceu"

native/pre do
    ##include "pingus/actions/miner.hpp"
    ##define AMiner Actions::Miner

    ##include "engine/sound/sound.hpp"
    ##define Sound_PingusSound_play_sound Sound::PingusSound::play_sound
end

class MinerAction with
    interface IAction;
do    
    var _AMiner&? miner = _PTR2REF((_AMiner*)pingu.set_ptr(_A_MINER));
    var int delay_count = 0;

    par/or do
        every pingu.e_UPDATE_CALLED do
            miner.sprite[miner.pingu:direction].update();
        end
    with
        loop do
            await pingu.e_UPDATE_CALLED;

            if miner.rel_getpixel(0, -1) == _GT_NOTHING then
                // stop mining when in the air
                miner.mine(true);
                emit pingu.e_CALL_SET_ACTION => _A_WALKER;
            else/if miner.rel_getpixel(0, -1) == _GT_SOLID or miner.rel_getpixel(0, _pingu_height) == _GT_SOLID then
                // stop mining when hitting solid ground
                if miner.rel_getpixel(0, -1) == _GT_SOLID then
                    _Sound_PingusSound_play_sound("chink");
                end

                miner.mine(true);

                // stop pingu from walking further into the solid.
                miner.pingu:direction.change();

                emit pingu.e_CALL_SET_ACTION => _A_WALKER;
            else
                // mine and walk forward
                miner.mine(false);
                miner.pingu:set_pos(
                    miner.pingu:get_xi() + miner.pingu:direction,
                    miner.pingu:get_yi() + 1
                );
            end

            //await 3 more frames
            loop i in 3 do
                await pingu.e_UPDATE_CALLED;
            end
        end
    end
end

#endif
