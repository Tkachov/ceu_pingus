#ifndef MINERACTION_CEU
#define MINERACTION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/scene_context.ceu"
#include "../../engine/sound/sound.ceu"
#include "../collision_mask.ceu"
#include "../iaction.ceu"
#include "../ipingu.ceu"
#include "../state_sprite.ceu"
#include "../worldobj.ceu"

class MinerAction with
    interface IAction;
    interface IPinguAction;
do
    pingu.ceu_action = &this;

    function (int a) => bool change_allowed do
        return true;
    end

    catchable = true;

    function @rec (void) => Vector3f get_center_pos do
        var Vector3f result;
        result.x = pingu.get_pos().x;
        result.y = pingu.get_pos().y - 16;
        result.z = pingu.get_pos().z;
        return result;
    end

    function (void) => _const_char_string get_name do
        return _get_screenname(_A_MINER);
    end

    var int delay_count = 0;

    var StateSprite sprite;
    load_file_directions(sprite, "/miner/");

    var _CollisionMask&? miner_radius = _new_CollisionMask("pingus/common/miner_radius_gfx", "pingus/common/miner_radius");
    finalize with _delete_obj(miner_radius); end;

    var _CollisionMask&? miner_radius_left = _new_CollisionMask("pingus/common/miner_radius_left_gfx", "pingus/common/miner_radius_left");
    finalize with _delete_obj(miner_radius_left); end;

    var _CollisionMask&? miner_radius_right = _new_CollisionMask("pingus/common/miner_radius_right_gfx", "pingus/common/miner_radius_right");
    finalize with _delete_obj(miner_radius_right); end;

    function @rec (bool final) => void mine do
        if not final then
            // regular mine action
            _world_remove(global:world:world, miner_radius,
                                        (int)pingu.get_x() - (miner_radius.get_width() / 2) + pingu.direction,
                                        (int)pingu.get_y() - miner_radius.get_height() + 2);
        else
            // the last mine action before switching to another action
            if pingu.direction == _D_LEFT then
                _world_remove(global:world:world, miner_radius_left,
                                            (int)pingu.get_x() - (miner_radius_left.get_width() / 2) + pingu.direction,
                                            (int)pingu.get_y() - miner_radius_left.get_height() + 2);
            else
                _world_remove(global:world:world, miner_radius_right,
                                            (int)pingu.get_x() - (miner_radius_right.get_width() / 2) + pingu.direction,
                                            (int)pingu.get_y() - miner_radius_right.get_height() + 2);
            end;
        end;
    end

    par do
        every gc in pingu.e_DRAW_CALLED do
            _gc_color_draw2(gc, sprite.get(pingu.direction), pingu.get_pos());
        end
    with
        every global:e_PINGU_UPDATE_ALL do
            sprite.get(pingu.direction):update();
        end
    with
        loop do
            await global:e_PINGU_UPDATE_ALL;

            if pingu.rel_getpixel(0, -1) == _GT_NOTHING then
                // stop mining when in the air
                call/rec mine(true);
                escape _A_WALKER;
            else/if pingu.rel_getpixel(0, -1) == _GT_SOLID or pingu.rel_getpixel(0, _pingu_height) == _GT_SOLID then
                // stop mining when hitting solid ground
                if pingu.rel_getpixel(0, -1) == _GT_SOLID then
                    _Sound_PingusSound_play_sound("chink");
                end

                call/rec mine(true);

                // stop pingu from walking further into the solid.
                pingu.direction.change();

                escape _A_WALKER;
            else
                // mine and walk forward
                call/rec mine(false);
                pingu.set_posf(
                    (int)pingu.get_x() + pingu.direction,
                    (int)pingu.get_y() + 1
                );
            end

            //await 3 more frames
            loop i in 3 do
                await global:e_PINGU_UPDATE_ALL;
            end
        end
    end
end

#endif
