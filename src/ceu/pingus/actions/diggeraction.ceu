#ifndef DIGGERACTION_CEU
#define DIGGERACTION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/scene_context.ceu"
#include "../../engine/display/sprite3.ceu"
#include "../../engine/sound/sound.ceu"
#include "../collision_mask.ceu"
#include "../iaction.ceu"
#include "../ipingu.ceu"
#include "../state_sprite.ceu"
#include "../worldobj.ceu"

class DiggerAction with
    interface IAction;
    interface IPinguAction;
do
    pingu.ceu_action = &this;

    function (int a) => bool change_allowed do
        return true;
    end

    catchable = true;

    function @rec (void) => Vector3f get_center_pos do
        var Vector3f result = (call/rec pingu.get_pos());
        result.y = result.y - 16;
        return result;
    end

    function (void) => _const_char_string get_name do
        return _get_screenname(_A_DIGGER);
    end

    var int delay_count = 0;  

    var _CollisionMask&? digger_radius = _new_CollisionMask("pingus/common/digger_radius_gfx", "pingus/common/digger_radius");
    finalize with _delete_obj(digger_radius); end;

    var _CollisionMask&? digger_radius_final = _new_CollisionMask("pingus/common/digger_radius_final_gfx", "pingus/common/digger_radius_final_gfx");
    finalize with _delete_obj(digger_radius_final); end;

    function @rec (void) => bool have_something_to_dig do
        if (call/rec pingu.rel_getpixel(0, -1)) == _GT_NOTHING then
            return false;
        end

        if (call/rec pingu.rel_getpixel(0, -1)) == _GT_SOLID then
            _Sound_PingusSound_play_sound("chink");
            return false;
        end

        return true;
    end

    function @rec (bool final) => void dig do
        if not final then
            global:world:remove(&digger_radius,
                              (int)pingu.get_x() - digger_radius.get_width() / 2,
                              (int)pingu.get_y() - digger_radius.get_height() + 2);
        else
            global:world:remove(&digger_radius_final,
                              (int)pingu.get_x() - digger_radius.get_width() / 2,
                              (int)pingu.get_y() - digger_radius.get_height() + 2);
        end

        pingu.set_posf((int)pingu.get_x(), (int)pingu.get_y()+1);
    end

    var Sprite3 sprite with
        this.pos_giver = pingu;
    end;
    sprite.reload_by_name(_scc3("pingus/player", pingu.get_owner_str(), "/digger/left").c_str());

    loop do
        await global:e_PINGU_UPDATE_ALL;
        delay_count = delay_count + 1;

        if (call/rec pingu.rel_getpixel(0, -1)) == _GT_WATER or (call/rec pingu.rel_getpixel(0, -1)) == _GT_LAVA then
            escape _A_DROWN;
        else
            if not call/rec have_something_to_dig() then
                call/rec dig(true);
                escape _A_WALKER;
            else/if delay_count % 4 == 0 then
                call/rec dig(false);
            end
        end
    end
end

#endif
