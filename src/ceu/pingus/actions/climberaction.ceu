#ifndef CLIMBERACTION_CEU
#define CLIMBERACTION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../iaction.ceu"
#include "../ipingu.ceu"

native/pre do
    ##include "pingus/actions/climber.hpp"
    ##define AClimber Actions::Climber
    ##define head_collision_on_walk(c, x, y) (c).head_collision_on_walk(x, y)
end

native @pure _head_collision_on_walk();

class ClimberAction with
    interface IAction;
do     
    var _AClimber& climber = _PTR2REF((_AClimber*)pingu.set_ptr(_A_CLIMBER));

    every pingu.e_UPDATE_CALLED do
        climber.sprite[climber.pingu:direction].update();

        //there's something above
        if climber.rel_getpixel(0, 1) != _GT_NOTHING and climber.rel_getpixel(0, 1) != _GT_BRIDGE then
            climber.pingu:direction.change();
            //escape _A_WALKER;
            emit pingu.e_CALL_SET_ACTION => _A_WALKER;
            continue;
        end

        //nothing above and there is still ground to walk on
        if climber.rel_getpixel(1, 1) != _GT_NOTHING then
            climber.pingu:set_pos(climber.pingu:get_x(), climber.pingu:get_y() - 1);
            continue;
        end

        // If Pingu able to get to new position without head collision
        if not _head_collision_on_walk(climber, climber.pingu:direction, 1) then
            // Get ready to walk
            climber.pingu:set_pos(
                climber.pingu:get_x() + (float)climber.pingu:direction,
                climber.pingu:get_y() - 1.0
            );
        else
            // Get ready to fall
            climber.pingu:direction.change();
        end

        // Finish climbing.        
        //escape _A_WALKER;
        emit pingu.e_CALL_SET_ACTION => _A_WALKER;
    end
end

#endif
