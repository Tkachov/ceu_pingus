#ifndef BASHERACTION_CEU
#define BASHERACTION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../math/vector3f.ceu"
#include "../iaction.ceu"
#include "../ipingu.ceu"

native/pre do
    ##include "pingus/actions/basher.hpp"
    ##define ABasher Actions::Basher

    ##include "engine/sound/sound.hpp"
    ##define Sound_PingusSound_play_sound Sound::PingusSound::play_sound
end

class BasherAction with
    interface IAction;
do    
    var _ABasher&? basher = _PTR2REF((_ABasher*)pingu.set_ptr(_A_BASHER));
    var bool odd_frame = true; //-1th, I hope first block will execute not odd_frame faster

    par/or do
        every pingu.e_UPDATE_CALLED do
            basher.sprite[basher.pingu:direction].update();
            odd_frame = not odd_frame;
        end
    with
        loop do
            await pingu.e_UPDATE_CALLED;

            if not basher.walk_forward() then
                //original FIXME: set_action() in walk_forward() makes the Basher object
                // invalid, thus making all further access illegal and thus
                // forces the return here

                //TODO: actually, we don't like invalid objects either
                continue;
            end

            // If on walking forward the Basher has now walked on to water or lava
            if basher.rel_getpixel(0, -1) == _GT_WATER or basher.rel_getpixel(0, -1) == _GT_LAVA then
                emit pingu.e_CALL_SET_ACTION => _A_DROWN;
            // If walking on to something (i.e. hasn't fallen)
            else/if basher.rel_getpixel(0, -1) != _GT_NOTHING then
                //original FIXME: Game logic must be separate from Sprite
                var float progress = (float)(basher.sprite[basher.pingu:direction].get_current_frame())/(float)(basher.sprite[basher.pingu:direction].get_frame_count());

                // If the Basher has walked into something that it won't be able to
                // bash
                if basher.rel_getpixel(0, 0) == _GT_SOLID or basher.rel_getpixel(0, _pingu_height) == _GT_SOLID then
                    // Change direction and let walk code walk forward/up to get out.
                    _Sound_PingusSound_play_sound("chink");
                    basher.pingu:direction.change();
                    emit pingu.e_CALL_SET_ACTION => _A_WALKER;
                else/if basher.have_something_to_dig() then
                    // We only bash every second step, cause the Pingus would
                    // get trapped otherwise in the bashing area.
                    if not odd_frame then
                        basher.bash();
                    end
                else/if progress > 0.6 then
                    //original FIXME: EVIL! Engine must not relay on graphic
                    emit pingu.e_CALL_SET_ACTION => _A_WALKER;
                end
            end

            await pingu.e_UPDATE_CALLED;
            await pingu.e_UPDATE_CALLED;
        end
    end
end

#endif
