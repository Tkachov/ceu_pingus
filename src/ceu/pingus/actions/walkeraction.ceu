#ifndef WALKERACTION_CEU
#define WALKERACTION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/scene_context.ceu"
#include "../../math/vector3f.ceu"
#include "../iaction.ceu"
#include "../ipingu.ceu"
#include "../state_sprite.ceu"

class WalkerAction with
    interface IAction;
    interface IPinguAction;
do    
    pingu.ceu_action = &this;

    function (int a) => bool change_allowed do
        return true;
    end

    catchable = true;

    function @rec (void) => Vector3f get_center_pos do
        var Vector3f result;
        result.x = pingu.get_pos().x;
        result.y = pingu.get_pos().y - 16;
        result.z = pingu.get_pos().z;
        return result;
    end

    function (void) => _const_char_string get_name do
        return _get_screenname(_A_WALKER);
    end

    var StateSprite sprite;
    load_file_directions(sprite, "/walker/");

    var StateSprite floaterlayer;
    floaterlayer.load_file(_D_LEFT,  "other/floaterlayer/left");
    floaterlayer.load_file(_D_RIGHT, "other/floaterlayer/right");

    var int max_steps = 5;

    // Reset the velocity
    var Vector3f vel;
    vel.x = 0;
    vel.y = 0;
    vel.z = 0;
    pingu.set_velocity(vel);

    par do
        every gc in pingu.e_DRAW_CALLED do
            _gc_color_draw2(gc, sprite.get(pingu.me.direction), pingu.get_pos());

            if pingu.has_fall_action() and pingu.get_fall_action() == _A_FLOATER then
                _gc_color_draw2(gc, floaterlayer.get(pingu.me.direction), pingu.get_pos());
            end
        end
    with
        every pingu.e_UPDATE_CALLED do
            sprite.get(pingu.me.direction):update(0.033);
            floaterlayer.get(pingu.me.direction):update(0.033);

            /* How should this code work?

               1) Check that the Pingu stands still on ground, if not turn it into
               a faller or drown. The reason we do so, is that we catch situations
               where a digger or a similar action removed the ground under the
               walker.

               2) If pingu is still on ground, we can preprare the next step

               3) Check if up-hill or down-hill is required

               4)

             */

            if pingu.rel_getpixel(1, 0) == _GT_OUTOFSCREEN then
                pingu.me.set_x(pingu.get_x() + (float)(pingu.me.direction));
                continue;
            end

            if pingu.rel_getpixel(0, -1) == _GT_WATER then
                escape _A_DROWN;
            end

            var Vector3f last_pos;
            last_pos.x = pingu.get_pos().x;
            last_pos.y = pingu.get_pos().y;
            last_pos.z = pingu.get_pos().z;

            // The Pingu stands no longer on ground, the cause for this could be
            // a digger, miner or a bomber
            if pingu.rel_getpixel(0, -1) == _GT_NOTHING then
                // We search for the nearest ground below the pingu, if we can't
                // find anything within a few pixels, we will turn into a faller
                var bool found_ground = false;
                var int level;

                //-2 -3 -4
                loop i in 3 do
                    level = -2-i;
                    if not pingu.rel_getpixel(0, level) == _GT_NOTHING then
                        found_ground = true;
                        break;
                    end
                end

                if found_ground then
                    pingu.me.set_y(pingu.get_y() - (float)level);
                else
                    escape _A_FALLER;
                end
            end

            // original FIXME: here we could/should scan more pixels
            if pingu.rel_getpixel(1, 0) == _GT_BRIDGE and not pingu.head_collision_on_walk(1, 1) then  // bridge
                // simple, stupid, but working bridge code
                // original FIXME: We don't check if we 'drift' into a solid ground block
                pingu.me.set_pos(
                    pingu.get_x() + (float)pingu.me.direction,
                    pingu.get_y() - 1.0); // pingus 'float' through bridges

            else
                // Non of the trivial moves worked, so we do up-hill or down-hill walking
                // original FIXME: currently the pingu takes multiple steps at once when
                // original FIXME: working uphill, this looks kind of ugly

                // original FIXME: rel_getpixel works on the current pos, so modifing pos
                // original FIXME: is evil, a backup copy might help

                // if infront is a pixel
                // Pingu is walking up the mountain
                // we can continue walking up. search for the correct y_pos
                var int y_inc = 0;
                var int possible_y_step = 0;
                var bool found_next_step = false;

                //-max_steps .. 0 .. max_steps
                loop/100 i in max_steps*2+1 do
                    y_inc = -max_steps + i;

                    // up/down-hill scan
                    if (pingu.rel_getpixel(1, y_inc) == _GT_NOTHING or
                        pingu.rel_getpixel(1, y_inc) == _GT_BRIDGE) // original FIXME: This causes a rather huge step
                      and pingu.rel_getpixel(1, y_inc-1) != _GT_NOTHING then
                        // original FIXME:
                        found_next_step = true;
                        possible_y_step = y_inc;
                        // No break here, since we always want to use the highest possible position
                        //break;
                    end
                end

                if found_next_step then
                    // pos.y has a reversed co-system to rel_getpixel()?
                    pingu.me.set_pos(
                        pingu.get_x() + (float)pingu.me.direction,
                        pingu.get_y() - (float)possible_y_step);
                else
                    if pingu.rel_getpixel(1, 0) != _GT_NOTHING then
                        // We reached a wall
                        if pingu.has_wall_action() then
                            _log_debug("Pingu: We are in front of a wall, setting persistant action");
                            escape pingu.get_wall_action();
                        end

                        // No persitent action found, so change the direction
                        pingu.me.direction.change();
                    else
                        // We take the step, so that we are in the air
                        pingu.me.set_x(pingu.get_x() + (float)pingu.me.direction);

                        // We reached a cliff
                        escape _A_FALLER;
                    end
                end
            end

            // This is moved here to fix the bug where pingu stuck turning both
            // sides indefinetely when a head collision occured. the fix needs the
            // above downhill walk being done before head collision check.
            if pingu.head_collision_on_walk(0, 0) then
                _log_debug("Pingu: Head collision");

                //if the new position causes a head collision, we are already
                //stuck in a wall, so lets go back to the old position
                pingu.me.direction.change();
                pingu.me.set_pos(_toVector3f(last_pos));
                continue;
            end
        end
    end
end

#endif
