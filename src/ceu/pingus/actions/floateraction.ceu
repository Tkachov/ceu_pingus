#ifndef FLOATERACTION_CEU
#define FLOATERACTION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/scene_context.ceu"
#include "../../engine/display/sprite.ceu"
#include "../../math/vector3f.ceu"
#include "../iaction.ceu"
#include "../ipingu.ceu"

class FloaterAction with
    interface IAction;
    interface IPinguAction;
do
    pingu.ceu_action = &this;

    function (int a) => bool change_allowed do
        return (a == _A_BOMBER);
    end

    catchable = true;

    function @rec (void) => Vector3f get_center_pos do
        var Vector3f result;
        result.x = pingu.get_pos().x;
        result.y = pingu.get_pos().y - 16;
        result.z = pingu.get_pos().z;
        return result;
    end

    function (void) => _const_char_string get_name do
        return _get_screenname(_A_FLOATER);
    end

    var _Sprite&? sprite = _new_SpriteA(_scc3("pingus/player", pingu.get_owner_str(), "/floater/left"));
    finalize with _delete_obj(sprite); end;

    var Vector3f v_DOWN;
    v_DOWN.x=0;
    v_DOWN.y=1;
    v_DOWN.z=0;

    par do
        every gc in pingu.e_DRAW_CALLED do
            _gc_color_draw2(gc, sprite, pingu.get_pos());
        end
    with
        every global:e_PINGU_UPDATE_ALL do
            sprite.update();
            pingu.set_velocity(v_DOWN);

            if (call/rec pingu.rel_getpixel(0, -1)) == _GT_NOTHING then
                pingu.set_y(pingu.get_y() + 1);
            else
                escape _A_WALKER;
            end
        end
    end
end

#endif
