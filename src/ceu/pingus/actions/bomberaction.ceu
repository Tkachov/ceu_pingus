#ifndef BOMBERACTION_CEU
#define BOMBERACTION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/scene_context.ceu"
#include "../../engine/display/sprite.ceu"
#include "../../engine/sound/sound.ceu"
#include "../../math/vector3f.ceu"
#include "../collision_mask.ceu"
#include "../iaction.ceu"
#include "../ipingu.ceu"
#include "../state_sprite.ceu"
#include "../worldobj.ceu"
#include "../movers/linear_mover.ceu"

native/pre do
    ##include "pingus/particles/pingu_particle_holder.hpp"
    ##include "pingus/colliders/pingu_collider.hpp"
    ##include "pingus/movers/linear_mover.hpp"
    ##include "pingus/pingu_enums.hpp"
    ##define Colliders__PinguCollider Colliders::PinguCollider
    ##define Math__abs Math::abs
end

native @pure _Colliders__PinguCollider();

class BomberAction with
    interface IAction;
    interface IPinguAction;
do
    var _PinguAction&? bomber = _PTR2REF(pingu.set_ptr(_A_BOMBER));
    pingu.ceu_action = &this;

    function (int a) => bool change_allowed do
        return false;
    end

    catchable = true;

    function (void) => Vector3f get_center_pos do
        var Vector3f result;
        result.x = pingu.me.get_pos().x;
        result.y = pingu.me.get_pos().y - 16;
        result.z = pingu.me.get_pos().z;
        return result;
    end

    var StateSprite sprite;
    load_file_directions(sprite, bomber, "/bomber/");

    var _Sprite&? explo_surf = _new_SpriteA(_scc3("pingus/player", pingu.me.get_owner_str(), "/explo"));
    finalize with _delete_Sprite(explo_surf); end;

    var _CollisionMask&? bomber_radius = _new_CollisionMask("other/bomber_radius_gfx", "other/bomber_radius");
    finalize with _delete_CollisionMask(bomber_radius); end;

    var _Movers_LinearMover&? mover = _new_LinearMover();
    finalize with _delete_LinearMover(mover); end;

    _WorldObj__get_world_play_sound("ohno", pingu.me.get_pos());

    par do
        every pingu.e_UPDATE_CALLED do
            sprite.update();

            // Move the Pingu
            mover.reset(pingu.me.get_pos());
            mover.update(pingu.me.get_velocity(), _Colliders__PinguCollider(_pingu_height));
            pingu.me.set_pos(mover.get_pos());
        end
    with
        par do
            var _SceneContext* gc = await pingu.e_DRAW_CALLED until sprite.get(pingu.me.direction):get_current_frame() >= 13;
            _gc_color_draw2(gc, explo_surf, _Vector3f(pingu.me.get_x()-32, pingu.me.get_y()-48));
        with
            every gc in pingu.e_DRAW_CALLED do
                _gc_color_draw2(gc, sprite.get(pingu.me.direction), pingu.me.get_pos());
            end
        end
    with
        // If the Bomber hasn't 'exploded' yet...
        every pingu.e_UPDATE_CALLED do
            if sprite.get(pingu.me.direction):get_current_frame() > 9 then
                break;
            end

            // ...and it has hit Water or Lava
            if pingu.rel_getpixel(0, -1) == _GT_WATER or pingu.rel_getpixel(0, -1) == _GT_LAVA then
                escape _A_DROWN;
            end

            // ...and it has hit the ground too quickly
            if pingu.rel_getpixel(0, -1) != _GT_NOTHING and pingu.me.get_velocity().y > _deadly_velocity then
                escape _A_SPLASHED;
            end
        end

        //Play sound at 10th frame (>9)
        _WorldObj__get_world():play_sound("plop", pingu.me.get_pos());

        //Wait for 13th frame to throw particles
        await pingu.e_UPDATE_CALLED until (sprite.get(pingu.me.direction):get_current_frame() > 12);

        // Throwing particles
        _WorldObj__get_world():get_pingu_particle_holder():add_particle(
            (int)pingu.me.get_x(), (int)pingu.me.get_y() - 5
        );

        //Wait for 13th frame again?..
        PRE_CONDITION_AWAIT(pingu.e_UPDATE_CALLED, sprite.get(pingu.me.direction):get_current_frame() >= 13);

        _WorldObj__get_world_remove(
            bomber_radius,
            (int)((int)pingu.me.get_x() - (bomber_radius.get_width()/2)),
            (int)((int)pingu.me.get_y() - 16 - (bomber_radius.get_width()/2))
        );

        // The pingu explode
        PRE_CONDITION_AWAIT(pingu.e_UPDATE_CALLED, sprite.get(pingu.me.direction):is_finished());

        escape _A_DEAD;
    end
end

#endif
