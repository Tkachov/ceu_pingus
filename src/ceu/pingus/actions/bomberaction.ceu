#ifndef BOMBERACTION_CEU
#define BOMBERACTION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/scene_context.ceu"
#include "../../engine/display/sprite.ceu"
#include "../../engine/sound/sound.ceu"
#include "../../math/vector3f.ceu"
#include "../collision_mask.ceu"
#include "../iaction.ceu"
#include "../ipingu.ceu"
#include "../global_interface.ceu"
#include "../right_left_sprite.ceu"
#include "../worldobj.ceu"
#include "../movers/linear_mover.ceu"
#include "../particles/particles.ceu"

native/pre do
    ##include "pingus/pingu_enums.hpp"    
end

class BomberAction with
    interface IAction;
    interface IPinguAction;
do
    pingu.ceu_action = &this;

    function (int a) => bool change_allowed do
        return false;
    end

    catchable = true;

    function @rec (void) => Vector3f get_center_pos do
        var Vector3f result = (call/rec pingu.get_pos());
        result.y = (call/rec pingu.get_pos()).y - 16;
        return result;
    end

    function (void) => _const_char_string get_name do
        return _get_screenname(_A_BOMBER);
    end

    var RightLeftSprite sprite with
        this.pingu = pingu;
        this.pos_giver = pingu;
        this.left_name = _new_String(_concat2(pingu.get_owner_str(), "/bomber/left"));
        this.right_name = _new_String(_concat2(pingu.get_owner_str(), "/bomber/right"));
    end;

    var _Sprite&? explo_surf = _new_SpriteA(_scc3("pingus/player", pingu.get_owner_str(), "/explo"));
    finalize with _delete_obj(explo_surf); end;

    var _CollisionMask&? bomber_radius = _new_CollisionMask("other/bomber_radius_gfx", "other/bomber_radius");
    finalize with _delete_obj(bomber_radius); end;

    global:world:play_sound("ohno", (call/rec pingu.get_pos()), 0.5);

    par do
        loop do
            await global:world:update;            

            // Move the Pingu
            var LinearMover mover with
                this.pos = call/rec pingu.get_pos();
            end;
            var PinguCollider collider with
                this.height = _pingu_height;
            end;            
            call/rec mover.update(pingu.get_velocity(), &collider);
            pingu.set_pos(_toVector3f(mover.get_pos()));
        end
    with        
        var _SceneContext* gc = await pingu.e_DRAW_CALLED until sprite.get_current():get_current_frame() >= 13;
        _gc_color_draw2(gc, explo_surf, _Vector3f(pingu.get_x()-32, pingu.get_y()-48));
    with
        // If the Bomber hasn't 'exploded' yet...
        loop do
            await global:world:update;
            
            if sprite.get_current():get_current_frame() > 9 then
                break;
            end

            // ...and it has hit Water or Lava
            if (call/rec pingu.rel_getpixel(0, -1)) == _GT_WATER or (call/rec pingu.rel_getpixel(0, -1)) == _GT_LAVA then
                escape _A_DROWN;
            end

            // ...and it has hit the ground too quickly
            if (call/rec pingu.rel_getpixel(0, -1)) != _GT_NOTHING and pingu.get_velocity().y > _deadly_velocity then
                escape _A_SPLASHED;
            end
        end

        //Play sound at 10th frame (>9)
        global:world:play_sound("plop", (call/rec pingu.get_pos()), 0.5);

        //Wait for 13th frame to throw particles
        await global:world:update until (sprite.get_current():get_current_frame() > 12);

        // Throwing particles
        call/rec global:world:get_pingu_particles_holder():add_particle(
            pingu.get_x(), pingu.get_y() - 5
        );

        //Wait for 13th frame again?..        
        PRE_CONDITION_AWAIT(global:world:update, sprite.get_current():get_current_frame() >= 13);

        global:world:remove(
            &bomber_radius,
            (int)((int)pingu.get_x() - (bomber_radius.get_width()/2)),
            (int)((int)pingu.get_y() - 16 - (bomber_radius.get_width()/2))
        );

        // The pingu explode
        if not sprite.get_current():is_finished() then
            await sprite.finished;
        end

        escape _A_DEAD;
    end
end

#endif
