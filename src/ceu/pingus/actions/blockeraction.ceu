#ifndef BLOCKERACTION_CEU
#define BLOCKERACTION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/scene_context.ceu"
#include "../iaction.ceu"
#include "../ipingu.ceu"
#include "../state_sprite.ceu"

native/pre do
    ##include "pingus/actions/blocker.hpp"
    ##define ABlocker Actions::Blocker
end

class BlockerAction with
    interface IAction;
do
    var _ABlocker&? blocker = _PTR2REF((_ABlocker*)pingu.set_ptr(_A_BLOCKER));

    var StateSprite sprite;
    load_file_directions(sprite, blocker, "/blocker/");

    if blocker.rel_getpixel(0, -1) == _GT_NOTHING then
        if blocker.rel_getpixel(0, -2) == _GT_GROUND then
            blocker.pingu:set_y(blocker.pingu:get_y() + 1);
        else/if blocker.rel_getpixel(0, -2) == _GT_NOTHING and blocker.rel_getpixel(0, -3) == _GT_GROUND then
            blocker.pingu:set_y(blocker.pingu:get_y() + 2);
        end
    end

    par do
        every gc in pingu.e_DRAW_CALLED do
            _gc_color_draw2(gc, sprite.get(blocker.pingu:direction), blocker.pingu:get_pos());
        end
    with
        every pingu.e_UPDATE_CALLED do
            if not blocker.standing_on_ground() then
                escape _A_FALLER;
            end

            blocker.catch_pingus();
            sprite.update();
        end
    end
end

#endif
