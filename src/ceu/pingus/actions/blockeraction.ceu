#ifndef BLOCKERACTION_CEU
#define BLOCKERACTION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/scene_context.ceu"
#include "../iaction.ceu"
#include "../ipingu.ceu"
#include "../right_left_sprite.ceu"
#include "../global_interface.ceu"

class BlockerAction with
    interface IAction;
    interface IPinguAction;
do
    pingu.ceu_action = &this;

    function (int a) => bool change_allowed do
        return true;
    end

    catchable = true;

    function @rec (void) => Vector3f get_center_pos do
        var Vector3f result = (call/rec pingu.get_pos());
        result.y = (call/rec pingu.get_pos()).y - 16;
        return result;
    end

    function (void) => _const_char_string get_name do
        return _get_screenname(_A_BLOCKER);
    end

    if (call/rec pingu.rel_getpixel(0, -1)) == _GT_NOTHING then
        if (call/rec pingu.rel_getpixel(0, -2)) == _GT_GROUND then
            pingu.set_y(pingu.get_y() + 1);
        else/if (call/rec pingu.rel_getpixel(0, -2)) == _GT_NOTHING and (call/rec pingu.rel_getpixel(0, -3)) == _GT_GROUND then
            pingu.set_y(pingu.get_y() + 2);
        end
    end

    var RightLeftSprite sprite with
        this.pingu = pingu;
        this.pos_giver = pingu;
        this.left_name = _new_String(_concat2(pingu.get_owner_str(), "/blocker/left"));
        this.right_name = _new_String(_concat2(pingu.get_owner_str(), "/blocker/right"));
    end;

    loop do
        await global:world:update;
        
        if (call/rec pingu.rel_getpixel(0,-1)) == _GT_NOTHING then
            escape _A_FALLER;
        end

        loop catched in global:world:get_pingus():all_pingus do
            // avoid 'self' catch
            if catched == &pingu then
                continue;
            end

            if catched:get_x() > pingu.get_x()-16 and
               catched:get_x() < pingu.get_x()+16 and
               catched:get_y() > pingu.get_y()-32 and
               catched:get_y() < pingu.get_y()+5 then
                if catched:get_x() > pingu.get_x() then
                    emit catched:direction().right;
                else
                    emit catched:direction().left;
                end
            end
        end
    end    
end

#endif
