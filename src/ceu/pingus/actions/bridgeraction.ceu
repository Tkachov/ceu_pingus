#ifndef BRIDGERACTION_CEU
#define BRIDGERACTION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/scene_context.ceu"
#include "../../engine/sound/sound.ceu"
#include "../collision_mask.ceu"
#include "../iaction.ceu"
#include "../ipingu.ceu"
#include "../right_left_sprite.ceu"
#include "../worldobj.ceu"

native/pre do
    ##include "pingus/gettext.h"
    ##include "util/string_util.hpp"
    ##define make_name(b) std::string(_("Bridger") + std::string(" (" + StringUtil::to_string(b) + ")")).c_str()
end

native @pure _make_name();

//I want constants =(
#define MAX_BRICKS 15

class BridgerAction with
    interface IAction;
    interface IPinguAction;
    interface IPosGiver;
do
    pingu.ceu_action = &this;

    function (int a) => bool change_allowed do
        return true;
    end

    catchable = true;

    function @rec (void) => Vector3f get_center_pos do
        var Vector3f result = (call/rec pingu.get_pos());
        result.y = (call/rec pingu.get_pos()).y - 16;
        return result;
    end

    var int bricks = MAX_BRICKS;
    var String name;
    name.set(_make_name(bricks));

    function (void) => _const_char_string get_name do
        return name.get();
    end

    var _CollisionMask&? brick_l = _new_CollisionMask("other/brick_left");
    finalize with _delete_obj(brick_l); end;

    var _CollisionMask&? brick_r = _new_CollisionMask("other/brick_right");
    finalize with _delete_obj(brick_r); end;

    // way_is_free() needs to stop BRIDGERS from getting stuck between a brick
    // and the ceiling.  The routine also stops cases of Bridgers building up but
    // then not being able to walk all the way down the bridge the it has built.
    // Even though the routine may be the same as brick_placement_allowed(), it is
    // best to keep them apart as they may need to be independent of each other if
    // there needs to be a patch.
    function @rec (void) => bool way_is_free do
        loop i in 4 do
            var int x_inc = i+1;

            if (call/rec pingu.rel_getpixel(x_inc, 2)) != _GT_NOTHING
            or (call/rec pingu.head_collision_on_walk(x_inc, 2)) then
                return false;
            end
        end

        return true;
    end

    // brick_placement_allowed() is mainly for stopping WALKERS from getting stuck
    // between a brick and the ceiling.  Even though the routine may be the same,
    // as way_is_free() it is best to keep them apart as they may need to be
    // independent of each other if there needs to be a patch.
    function @rec (void) => bool brick_placement_allowed do
        return not (call/rec pingu.head_collision_on_walk(0, 2));
    end

    function @rec (void) => void place_a_brick do
        bricks = bricks-1;
        name.set(_make_name(bricks));

        if bricks < 4 then
            _Sound_PingusSound_play_sound("ting");
        end

        if pingu.direction().is_right() then
            global:world:put(
                       &brick_r,
                       (int)(pingu.get_x() + 10.0 - (float)brick_r.get_width()),
                       (int)pingu.get_y(),
                       _GT_BRIDGE);
        else
            global:world:put(
                       &brick_l,
                       (int)(pingu.get_x() - 10.0),
                       (int)pingu.get_y(),
                       _GT_BRIDGE);
        end
    end

    function @rec (void) => void walk_one_step_up do
        pingu.set_posf(
            pingu.get_x() + 4.0*(float)(pingu.direction().value),
            pingu.get_y() - 2
        );
    end

    function @rec (void) => Vector3f get_pos do
        var float x_offset = 6;
        var float y_offset = 4;

        if bricks == MAX_BRICKS then
            x_offset = -4;
            y_offset = 0;
        else/if bricks == MAX_BRICKS-1 then
            x_offset = 0;
            y_offset = 1;
        else/if bricks == MAX_BRICKS-2 then
            x_offset = 3;
            y_offset = 2;
        end

        x_offset = x_offset * (float)pingu.direction().value;

        var Vector3f p = (call/rec pingu.get_pos());
        p.x = p.x - x_offset;
        p.y = p.y + y_offset;
        return p;
    end

    loop do
        //building step
        do
            var RightLeftSprite build_sprite with
                this.pingu = pingu;
                this.pos_giver = outer;
                this.left_name = _new_String(_concat2(pingu.get_owner_str(), "/bridger/left"));
                this.right_name = _new_String(_concat2(pingu.get_owner_str(), "/bridger/right"));
            end;

            await global:world:update until (build_sprite.get_current():get_current_frame () >= 7);

            if bricks > 0 then
                if call/rec brick_placement_allowed() then
                    call/rec place_a_brick();
                else
                    emit pingu.direction().change;
                    escape _A_WALKER;
                end
            else // Out of bricks
                escape _A_WAITER;
            end

            if not build_sprite.get_current():is_finished() then
                await build_sprite.finished;
            end
        end

        //walking step
        do
            var RightLeftSprite walk_sprite with
                this.pingu = pingu;
                this.pos_giver = outer;
                this.left_name = _new_String(_concat2(pingu.get_owner_str(), "/bridger_walk/left"));
                this.right_name = _new_String(_concat2(pingu.get_owner_str(), "/bridger_walk/right"));
            end;

            await walk_sprite.finished;
        end

        if call/rec way_is_free() then
            call/rec walk_one_step_up();
        else // We reached a wall...
            emit pingu.direction().change;
            escape _A_WALKER;
        end
    end
end

#endif
