#ifndef BRIDGERACTION_CEU
#define BRIDGERACTION_CEU

#include "../../c.ceu"
#include "../../sdl.ceu"
#include "../../engine/display/scene_context.ceu"
#include "../iaction.ceu"
#include "../ipingu.ceu"
#include "../state_sprite.ceu"

native/pre do
    ##include "pingus/actions/bridger.hpp"
    ##define ABridger Actions::Bridger
    ##define AB_MAX_BRICKS Actions::Bridger::MAX_BRICKS
end

class BridgerAction with
    interface IAction;
do
    var _ABridger&? bridger = _PTR2REF((_ABridger*)pingu.set_ptr(_A_BRIDGER));

    load_directions(bridger.walk_sprite, bridger, "/bridger_walk/");
    load_directions(bridger.build_sprite, bridger, "/bridger/");

    loop do
        var float x_offset = 6;
        var float y_offset = 4;

        if bridger.bricks == _AB_MAX_BRICKS then
            x_offset = -4;
            y_offset = 0;
        else/if bridger.bricks == _AB_MAX_BRICKS-1 then
            x_offset = 0;
            y_offset = 1;
        else/if bridger.bricks == _AB_MAX_BRICKS-2 then
            x_offset = 3;
            y_offset = 2;
        end

        x_offset = x_offset * (float)bridger.pingu:direction;

        //building step
        par/or do
            every pingu.e_UPDATE_CALLED do
                bridger.build_sprite[bridger.pingu:direction].update();
            end
        with
            every gc in pingu.e_DRAW_CALLED do
                _gc_color_draw(
                    gc,
                    bridger.build_sprite[bridger.pingu:direction],
                    _Vector3f(
                        bridger.pingu:get_pos().x - x_offset,
                        bridger.pingu:get_pos().y + y_offset
                    )
                );
            end
        with
            every pingu.e_UPDATE_CALLED do
                if bridger.build_sprite[bridger.pingu:direction].get_current_frame () >= 7 then
                    break;
                end
            end

            if bridger.bricks > 0 then
                if bridger.brick_placement_allowed() then
                    bridger.place_a_brick();
                else
                    bridger.pingu:direction.change();
                    escape _A_WALKER;
                end
            else // Out of bricks
                escape _A_WAITER;
            end

            if not bridger.build_sprite[bridger.pingu:direction].is_finished() then
                every pingu.e_UPDATE_CALLED do
                    if bridger.build_sprite[bridger.pingu:direction].is_finished() then
                        break;
                    end
                end
            end

            bridger.build_sprite[bridger.pingu:direction].restart();
        end

        //walking step
        par/or do
            every pingu.e_UPDATE_CALLED do
                //original FIXME: Dangerous! might not be fixed timing
                if bridger.walk_sprite[bridger.pingu:direction].is_finished() then
                    break;
                end

                bridger.walk_sprite.update();
            end
        with
            every gc in pingu.e_DRAW_CALLED do
                _gc_color_draw(
                    gc,
                    bridger.walk_sprite[bridger.pingu:direction],
                    _Vector3f(
                        bridger.pingu:get_pos().x - x_offset,
                        bridger.pingu:get_pos().y + y_offset
                    )
                );
            end
        end

        if bridger.way_is_free() then
            bridger.walk_sprite[bridger.pingu:direction].restart();
            bridger.walk_one_step_up();
        else // We reached a wall...
            bridger.pingu:direction.change();
            escape _A_WALKER;
        end
    end
end

#endif
