#ifndef IPINGU_CEU
#define IPINGU_CEU

native/pre do
    ##include "pingus/pingu.hpp"
    ##include "pingus/groundtype.hpp"
    ##define GT_OUTOFSCREEN Groundtype::GP_OUTOFSCREEN
    ##define GT_NOTHING Groundtype::GP_NOTHING
    ##define GT_WATER Groundtype::GP_WATER
    ##define GT_BRIDGE Groundtype::GP_BRIDGE
    ##define GT_GROUND Groundtype::GP_GROUND
    ##define GT_LAVA Groundtype::GP_LAVA
    ##define GT_SOLID Groundtype::GP_SOLID
end

#include "ipingu_action.ceu"

interface IPingu with
    var _Pingu& me;    
    var IPinguAction* ceu_action;

    event void e_UPDATE_CALLED;
    event _SceneContext* e_DRAW_CALLED;

    event int e_CHANGE_ACTION;
    
    function (int x, int y) => int rel_getpixel;
    function (int x, int y) => bool head_collision_on_walk;
    function (int x, int y) => bool collision_on_walk;

    function @rec (void) => Vector3f get_center_pos;

    function @rec (int x, int y) => bool is_over;
    function (int x1, int y1, int x2, int y2) => bool is_inside;
    function @rec (int x, int y) => float dist;
    
    function (void) => bool has_fall_action;
    function (void) => bool has_wall_action;
    function (void) => int get_fall_action;
    function (void) => int get_wall_action;
    function (void) => int get_previous_action;
    function (void) => int get_current_action;
    
    function (void) => Vector3f get_velocity;
    function (Vector3f) => void set_velocity;
    function (Vector3f) => void apply_force;
end

#endif
