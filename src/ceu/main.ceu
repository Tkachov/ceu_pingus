native/pre do
    ##define private public
    ##define protected public
end

#include "c.ceu"
#include "sdl.ceu"
#include "pingus/colliders/pingu_collider.ceu"
#include "pingus/screens/demo_session.ceu"
#include "pingus/screens/game_session.ceu"
#include "pingus/screens/font_test_screen.ceu"
#include "pingus/screens/start_screen.ceu"
#include "pingus/screens/story_screen.ceu"
#include "pingus/screens/result_screen.ceu"
#include "pingus/screens/pingus_menu.ceu"
#include "pingus/screens/level_menu.ceu"
#include "pingus/screens/option_menu.ceu"
#include "pingus/screens/credits.ceu"


#include "math/math.ceu"
#include "math/rect.ceu"
#include "util/file_reader.ceu"
#include "pingus/iworld.ceu"
#include "pingus/global_interface.ceu"
#include "pingus/worldmap/worldmap.ceu"
#include "pingus/worldmap/pingus_worldmap.ceu"

native/pre do
    ##include "engine/display/display.hpp"
    ##include "engine/display/graphic_context_state.hpp"
    ##include "engine/gui/gui_manager.hpp"
    ##include "engine/gui/rect_component.hpp"
    ##include "engine/gui/surface_button.hpp"
    ##include "engine/screen/screen_manager.hpp"
    ##include "engine/sound/sound.hpp"
    ##include "pingus/fonts.hpp"
    ##include "pingus/game_time.hpp"
    ##include "pingus/gettext.h"
    ##include "pingus/globals.hpp"
    ##include "pingus/savegame_manager.hpp"

    ##define new_GUI_Component() new GUI::Component()
    ##define Display__get_width() Display::get_width()
    ##define Display__get_height() Display::get_height()    
    ##define Fonts__chalk_large Fonts::chalk_large
    ##define Fonts__chalk_normal Fonts::chalk_normal
    ##define Fonts__chalk_small Fonts::chalk_small  
end

native @pure _new_GUI_Component(), _ScreenManager__instance(),
             _Display__get_width(), _Display__get_height();

input _ScreenUpdatePackage* WORLDMAP_SCREEN_UPDATE;
input _GUIScreen* DELETE_WORLDMAP_SCREEN;

interface IWorldmapScreen with
    function (void) => Worldmap*? get_ceu_worldmap;
    function (void) => Rect get_trans_rect;
end

////////////////////////////////////////////////

class WorldmapScreenCreditsButton with
do
end

////////////////////////////////////////////////

class WorldmapScreenCloseButton with
    interface IGUI_Component;
do
    function @rec (Vector2i pos) => bool is_at_func do
        return false; //TODO
    end

    await FOREVER;
end

////////////////////////////////////////////////

class WorldmapScreenComponent with
    interface IGUI_Component;
    var IWorldmapScreen& parent;
do
    function @rec (Vector2i pos) => bool is_at_func do
        return false; //TODO
    end

    var EventProxy ep with this.gui = outer; end;

    every gc in draw do
        _printf("A | &this == %d; parent == %d\n", &this, &parent);
        var Rect cliprect = parent.get_trans_rect();
        _printf("B\n");
    end
end

////////////////////////////////////////////////

class WorldmapScreen with
    interface IWorldmapScreen;
    event void draw;
do
    var Worldmap*? worldmap = null;

    _printf("WorldmapScreen == %d\n", &this);

    var WorldmapScreenComponent comp with
        this.me = _new_GUI_Component();
        this.me.ceu = &this;        
        this.parent = outer;
    end;

    var WorldmapScreenCloseButton close_button with
        this.me = _new_GUI_Component();
    end;

    var WorldmapScreenCreditsButton*? credits_button = null;

    function (void) => Worldmap*? get_ceu_worldmap do
        return worldmap;
    end

    function (void) => Rect get_trans_rect do
        _printf("rect\n");
        var Rect r;
        return r;
    end

    every draw do
        _printf("WorldmapScreen/draw_background\n");
        emit comp.draw => null;
    end
end

#include "pingus/pingu_holder.ceu"
#include "pingus/pingu_events.ceu"
#include "pingus/global_interface.ceu"
#include "pingus/server_event.ceu"
#include "pingus/iworld.ceu"
#include "proxies/proxyeventlist.ceu"

event void e_PINGU_DIED;
event void e_PINGU_EXITED;
event _SceneContext* e_PINGU_DRAW_WALKER;
event _SceneContext* e_PINGU_DRAW_OTHERS;
event void e_PINGU_UPDATE_ALL;

//global events
event _SceneContext* draw;
event void update;
event void push_option_menu;
event void push_worldmap_tutorial_screen;

input void NEW_PINGUS_MENU;
input _Pathname* PUSH_FONT_TEST_SCREEN;

var IWorld* world = null;

await NEW_PINGUS_MENU;
await 100ms;

var WorldmapScreen ws;
_printf("go go draw\n");
emit ws.draw;

await SDL_QUIT;

escape 0;
