native/pre do
    ##define private public
    ##define protected public
end

#include "c.ceu"
#include "sdl.ceu"
#include "pingus/colliders/pingu_collider.ceu"
#include "pingus/screens/demo_session.ceu"
#include "pingus/screens/game_session.ceu"
#include "pingus/screens/font_test_screen.ceu"
#include "pingus/screens/start_screen.ceu"
#include "pingus/screens/story_screen.ceu"
#include "pingus/screens/result_screen.ceu"
#include "pingus/screens/pingus_menu.ceu"
#include "pingus/screens/level_menu.ceu"
#include "pingus/screens/option_menu.ceu"
#include "pingus/screens/credits.ceu"


#include "math/math.ceu"
#include "math/rect.ceu"
#include "util/file_reader.ceu"
#include "pingus/iworld.ceu"
#include "pingus/global_interface.ceu"
#include "pingus/worldmap/worldmap.ceu"
#include "pingus/worldmap/pingus_worldmap.ceu"

native/pre do
    ##include "engine/display/display.hpp"
    ##include "engine/display/graphic_context_state.hpp"
    ##include "engine/gui/gui_manager.hpp"
    ##include "engine/gui/rect_component.hpp"
    ##include "engine/gui/surface_button.hpp"
    ##include "engine/screen/screen_manager.hpp"
    ##include "engine/sound/sound.hpp"
    ##include "pingus/fonts.hpp"
    ##include "pingus/game_time.hpp"
    ##include "pingus/gettext.h"
    ##include "pingus/globals.hpp"
    ##include "pingus/savegame_manager.hpp"

    ##define new_GUI_Component() new GUI::Component()
    ##define Display__get_width() Display::get_width()
    ##define Display__get_height() Display::get_height()    
    ##define Fonts__chalk_large Fonts::chalk_large
    ##define Fonts__chalk_normal Fonts::chalk_normal
    ##define Fonts__chalk_small Fonts::chalk_small  
end

native @pure _new_GUI_Component(), _ScreenManager__instance(),
             _Display__get_width(), _Display__get_height();

input _WorldmapScreenLoadPackage* LOAD_WORLDMAP_SCREEN;
input _ScreenUpdatePackage* WORLDMAP_SCREEN_UPDATE;
input _GUIScreen* DELETE_WORLDMAP_SCREEN;

interface IWorldmapScreen with
    function (void) => Worldmap*? get_ceu_worldmap;
    function (void) => Rect get_trans_rect;

    var _GUIScreen* me;

    event _Pathname* load;
end

////////////////////////////////////////////////

class WorldmapScreenCreditsButton with
do
end

////////////////////////////////////////////////

class WorldmapScreenCloseButton with
    interface IGUI_Component;
do
    function @rec (Vector2i pos) => bool is_at_func do
        return false; //TODO
    end

    await FOREVER;
end

////////////////////////////////////////////////

class WorldmapScreenComponent with
    interface IGUI_Component;
    var IWorldmapScreen& parent;
do
    function @rec (Vector2i pos) => bool is_at_func do
        return false; //TODO
    end

    var EventProxy ep with this.gui = outer; end;

    every gc in draw do
        _printf("A | &this == %d; parent == %d\n", &this, &parent);
        var Rect cliprect = parent.get_trans_rect();
        _printf("B\n");
    end
end

////////////////////////////////////////////////

class WorldmapScreen with
    interface IWorldmapScreen;
do
    var _GUIScreen&? worldmap_screen = _PTR2REF((_GUIScreen*)me);

    var Worldmap*? worldmap = null;

    _printf("WorldmapScreen == %d\n", &this);

    var WorldmapScreenComponent comp with
        this.me = _new_GUI_Component();
        this.me.ceu = &this;        
        this.parent = outer;
    end;

    var WorldmapScreenCloseButton close_button with
        this.me = _new_GUI_Component();
    end;

    var WorldmapScreenCreditsButton*? credits_button = null;

    function (void) => Worldmap*? get_ceu_worldmap do
        return worldmap;
    end

    function (void) => Rect get_trans_rect do
        _printf("rect\n");
        var Rect r;
        return r;
    end

    par/or do
        every package in LOAD_WORLDMAP_SCREEN do
            if package:screen != &worldmap_screen then
                continue;
            end

            emit load => (_Pathname*)&package:filename;
        end
    with
        every filename in load do
            var PingusWorldmap*? pingus_worldmap = spawn PingusWorldmap;
            var _FileReader&? fr = _new_FileReader(_FileReader__parse(_deref(filename)));
            call/rec pingus_worldmap:parse_file(&fr);
            _delete_obj(fr);

            worldmap = spawn Worldmap with                
                this.pingus_worldmap = pingus_worldmap;
            end;
        end
    with
        every screen in ON_STARTUP do
            if screen != &worldmap_screen then
                continue;
            end

            if worldmap then
                emit worldmap:startup;
            end
        end
    with
        every package in SCREEN_DRAW_BACKGROUND do
            if package:screen == &worldmap_screen then
                _printf("WorldmapScreen/draw_background\n");
                emit comp.draw => _addr(package:gc);
                //emit ((IGUI_Component*)children.at(i):ceu):draw => &drawing_context;
            end
        end
    end
end

#include "pingus/pingu_holder.ceu"
#include "pingus/pingu_events.ceu"
#include "pingus/global_interface.ceu"
#include "pingus/server_event.ceu"
#include "pingus/iworld.ceu"
#include "proxies/proxyeventlist.ceu"

native/pre do
    ##define new_OptionMenu new OptionMenu
    ##define new_Pathname new Pathname
    ##define make_std__shared_ptr_Screen(x) std::shared_ptr<Screen>(x)
end

native @pure _new_Pathname(), _make_std__shared_ptr_Screen(), _new_OptionMenu();

event void e_PINGU_DIED;
event void e_PINGU_EXITED;
event _SceneContext* e_PINGU_DRAW_WALKER;
event _SceneContext* e_PINGU_DRAW_OTHERS;
event void e_PINGU_UPDATE_ALL;

//global events
event _SceneContext* draw;
event void update;
event void push_option_menu;
event void push_worldmap_tutorial_screen;

input void NEW_PINGUS_MENU;
input _Pathname* PUSH_FONT_TEST_SCREEN;

var IWorld* world = null;

await NEW_PINGUS_MENU;
await 100ms;
do
    var WorldmapScreen* ws = null;
    spawn WorldmapScreen with
        this.me = _PTR2REF(_new_GUIScreen());
        ws = &this;
    end;

    var _Pathname&? filename = _new_Pathname("worldmaps/tutorial.worldmap", _Pathname__DATA_PATH); //hardcoded tutorial pathname
    emit ws:load => &filename;
    _delete_obj(filename);

    _ScreenManager__instance():push_screen(_make_std__shared_ptr_Screen(ws:me));
end
await SDL_QUIT;

escape 0;
