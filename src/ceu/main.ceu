native/pre do
    ##define private public
    ##define protected public
end

#include "c.ceu"
#include "sdl.ceu"
#include "pingus/colliders/pingu_collider.ceu"
#include "pingus/screens/demo_session.ceu"
#include "pingus/screens/game_session.ceu"
#include "pingus/screens/font_test_screen.ceu"
#include "pingus/screens/start_screen.ceu"
#include "pingus/screens/story_screen.ceu"
#include "pingus/screens/result_screen.ceu"
#include "pingus/screens/pingus_menu.ceu"
#include "pingus/screens/level_menu.ceu"
#include "pingus/screens/option_menu.ceu"
#include "pingus/screens/credits.ceu"
#include "pingus/worldmap/worldmap_screen.ceu"
#include "pingus/pingu_holder.ceu"
#include "pingus/pingu_events.ceu"
#include "pingus/global_interface.ceu"
#include "pingus/server_event.ceu"
#include "pingus/iworld.ceu"
#include "proxies/proxyeventlist.ceu"
#include "engine/screen/screen_manager.ceu"

native/pre do
    ##define new_OptionMenu new OptionMenu
    ##define new_Pathname new Pathname
    ##define make_std__shared_ptr_Screen(x) std::shared_ptr<Screen>(x)
end

native @pure _new_Pathname(), _make_std__shared_ptr_Screen(), _new_OptionMenu();

event void e_PINGU_DIED;
event void e_PINGU_EXITED;
event _SceneContext* e_PINGU_DRAW_WALKER;
event _SceneContext* e_PINGU_DRAW_OTHERS;

//global events
event _SceneContext* draw;
event float update;
event void push_option_menu;
event void push_worldmap_tutorial_screen;

input _DemoSession* NEW_DEMO_SESSION;
input _GameSession* NEW_GAME_SESSION;
input _StartScreen* NEW_START_SCREEN;
input _StoryScreen* NEW_STORY_SCREEN;
input _ResultScreen* NEW_RESULT_SCREEN;
input _WorldmapNS__WorldmapScreen* NEW_WORLDMAP_SCREEN;
input _PingusMenu* NEW_PINGUS_MENU;
input _Credits* NEW_CREDITS;
input _LevelMenu* NEW_LEVEL_MENU;
input _Pathname* PUSH_FONT_TEST_SCREEN;
input _ScreenManager* NEW_SCREEN_MANAGER;

#define WITH_SCREEN_CEU(CClassName, ClassName, Event) with \
    loop do \
        var CClassName* p = await Event; \
        spawn ClassName with \
            this.me = _PTR2REF(p); \
            this.me.ceu = &this; \
        end; \
    end

var IWorld* world = null;

par/or do
    await SDL_QUIT;
WITH_SCREEN_CEU(_DemoSession, DemoSession, NEW_DEMO_SESSION)
WITH_SCREEN_CEU(_GameSession, GameSession, NEW_GAME_SESSION)
WITH_SCREEN_CEU(_StartScreen, StartScreen, NEW_START_SCREEN)
WITH_SCREEN_CEU(_StoryScreen, StoryScreen, NEW_STORY_SCREEN)
WITH_SCREEN_CEU(_ResultScreen, ResultScreen, NEW_RESULT_SCREEN)
WITH_SCREEN_CEU(_WorldmapNS__WorldmapScreen, WorldmapScreen, NEW_WORLDMAP_SCREEN)
WITH_SCREEN_CEU(_PingusMenu, PingusMenu, NEW_PINGUS_MENU)
WITH_SCREEN_CEU(_Credits, Credits, NEW_CREDITS)
WITH_SCREEN_CEU(_LevelMenu, LevelMenu, NEW_LEVEL_MENU)
with
    every push_worldmap_tutorial_screen do
        /*
        std::shared_ptr<WorldmapNS::WorldmapScreen> worldmap_screen = std::make_shared<WorldmapNS::WorldmapScreen>();
        worldmap_screen->load(Pathname("worldmaps/tutorial.worldmap", Pathname::DATA_PATH)); //hardcoded tutorial pathname
        ScreenManager::instance()->push_screen(worldmap_screen);
        */
        var WorldmapScreen*? ws = spawn WorldmapScreen with
            this.me = _new_GUIScreen();
            this.me.ceu = &this;            
        end;

        var _Pathname&? filename = _new_Pathname("worldmaps/tutorial.worldmap", _Pathname__DATA_PATH); //hardcoded tutorial pathname
        emit ws:load => &filename;
        _delete_obj(filename);

        _ScreenManager__instance():push_screen(_make_std__shared_ptr_Screen(ws:me));
    end
with
    every push_option_menu do
        var OptionMenu*? os = spawn OptionMenu with
            this.me = _new_OptionMenu();
            this.me.ceu = &this;
        end;
        _ScreenManager__instance():push_screen(_make_std__shared_ptr_Screen(os:me));
    end
with
    every filename in PUSH_FONT_TEST_SCREEN do
        spawn FontTestScreen with
            this.me = _new_GUIScreen();
            this.fontfile = _PTR2REF(filename);
            _ScreenManager__instance():push_screen(_make_std__shared_ptr_Screen(this.me));
        end;
    end
with
    every new_se in NEW_SERVER_EVENT do
        spawn ServerEvent with
            this.me = _PTR2REF(new_se);
        end;
    end
with
    every new_sm in NEW_SCREEN_MANAGER do
        spawn ScreenManager with
            this.screen_manager = _PTR2REF(new_sm);
        end;
    end
with
    loop do
        await SDL_REDRAW;
    end
with
    //FPS
    loop do
        var int c = 0;
        par/or do
            every SDL_REDRAW do
                c = c + 1;
            end
        with
            await 1s;
        end
        _printf("[FPS=%d]\n", c);
    end
end

escape 0;
