#ifndef SORTED_LIST_CEU
#define SORTED_LIST_CEU

##include "pingus/worldobj.ceu"
##include "isorted_list.ceu"

native/pre do
    ##include "pingus/worldobj.hpp"
end

interface INode with
    var IWorldObj* ceu;
    var int z;
end;

class Node with
    interface INode;
    var INode* next;
do
    finalize with _printf("N"); next = null; ceu = null; end
    await FOREVER;
end

class SortedList with
    interface ISortedList;
    var Node* first = null;
    var int cnt = 0;
do
    finalize with
        first = null;
        _printf("SortedList finalized (%d):\n", cnt);
    end

    par/or do
        every object in e_INSERT do
            if object == null then
                continue;
            end

            //_printf("inserting %d\n", object);
            var int object_z = object:me:get_z_pos();
            var Node* before = null;

            var Node* current = first;
            loop/10000 do
                if current == null then
                    break;
                end

                if current:z < object_z then
                    before = current;
                else
                    break;
                end

                current = (Node*)current:next;
            end

            var Node* new_node = null;
            spawn Node with
                this.ceu = object;
                this.z = object_z;
                new_node = &this;
            end;
            cnt = cnt + 1;

            if before == null then
                new_node:next = first;
                first = new_node;
            else
                new_node:next = before:next;
                before:next = new_node;
            end

            /*
            _printf("contains:");
            var Node* n = first;
            loop do
                if n == null then
                    break;
                end

                _printf(" %d", n:ceu);

                n = (Node*)n:next;
            end
            _printf("\n");
            */
        end
    with
        every object in e_REMOVE do
            _printf("remove: 1");
            var Node* n = first;
            loop do
                if n == null then
                    break;
                end

                if n:ceu == object then
                    _printf("2");
                    n:ceu = null;
                end

                n = (Node*)n:next;
            end
            _printf("3\n");
        end
    with
        await e_DELETE;      
    end
    _printf("SortedList deleted\n");
end

#endif
