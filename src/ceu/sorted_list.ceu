#ifndef SORTED_LIST_CEU
#define SORTED_LIST_CEU

##include "pingus/worldobj.ceu"
##include "isorted_list.ceu"

native/pre do
    ##include "pingus/worldobj.hpp"
end

interface INode with
    var IWorldObj* ceu;
    var bool destroy;
end;

class Node with
    interface INode;
    var INode* next;
do
    every 2s do
        if destroy then
            break;
        end
    end

    _printf("node: 1");
    if ceu != null then
        emit ceu:e_DELETE;
    end

    _printf("2");
    if next != null then
        next:destroy = true;
    end
    _printf("3\n");
end

class SortedList with
    interface ISortedList;
    var Node* first = null;
do
    finalize with
        if first != null then
            first:destroy = true;
        end
        _printf("sorted list\n");
    end

    par/or do
        every object in e_INSERT do
            //_printf("inserting %d\n", object);
            var Node* before = null;

            var Node* current = first;
            loop/10000 do
                if current == null then
                    break;
                end

                if current:ceu:me:get_z_pos() < object:me:get_z_pos() then
                    before = current;
                else
                    break;
                end

                current = (Node*)current:next;
            end

            var Node* new_node = null;
            spawn Node with
                this.ceu = object;
                this.destroy = false;
                new_node = &this;
            end;

            if before == null then
                new_node:next = first;
                first = new_node;
            else
                new_node:next = before:next;
                before:next = new_node;
            end

            /*
            _printf("contains:");
            var Node* n = first;
            loop do
                if n == null then
                    break;
                end

                _printf(" %d", n:ceu);

                n = (Node*)n:next;
            end
            _printf("\n");
            */
        end
    with
        every object in e_REMOVE do
            _printf("remove: 1");
            var Node* n = first;
            loop do
                if n == null then
                    break;
                end

                if n:ceu == object then
                    _printf("2");
                    n:ceu = null;
                end

                n = (Node*)n:next;
            end
            _printf("3\n");
        end
    with
        await e_DELETE;
        _printf("delete sorted list\n");
    end
end

#endif
